{"version":3,"sources":["app/views/admin/SchoolCountsView.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/admin/SchoolCountsView.js","sourcesContent":["RootView = require 'views/core/RootView'\nCocoCollection = require 'collections/CocoCollection'\nClassroom = require 'models/Classroom'\nCourseInstance = require 'models/CourseInstance'\nTrialRequest = require 'models/TrialRequest'\nUser = require 'models/User'\nutils = require 'core/utils'\n\n# TODO: match anonymous trial requests with real users via email\n# TODO: sanitize and use student.schoolName, can't use it directly\n# TODO: example untriaged student: no geo IP, not attached to teacher with school\n# TODO: example untriaged teacher: deleted but owner of a classroom\n# TODO: use student geoip on their teacher\n\nmodule.exports = class SchoolCountsView extends RootView\n  id: 'admin-school-counts-view'\n  template: require 'templates/admin/school-counts'\n\n  initialize: ->\n    return super() unless me.isAdmin()\n    @classrooms = new CocoCollection([], { url: \"/db/classroom/-/users\", model: Classroom })\n    @supermodel.loadCollection(@classrooms, 'classrooms', {cache: false})\n    @courseInstances = new CocoCollection([], { url: \"/db/course_instance/-/non-hoc\", model: CourseInstance})\n    @supermodel.loadCollection(@courseInstances, 'course-instances', {cache: false})\n    @students = new CocoCollection([], { url: \"/db/user/-/students\", model: User })\n    @supermodel.loadCollection(@students, 'students', {cache: false})\n    @teachers = new CocoCollection([], { url: \"/db/user/-/teachers\", model: User })\n    @supermodel.loadCollection(@teachers, 'teachers', {cache: false})\n    @trialRequests = new CocoCollection([], { url: \"/db/trial.request/-/users\", model: TrialRequest })\n    @supermodel.loadCollection(@trialRequests, 'trial-requests', {cache: false})\n    super()\n\n  onLoaded: ->\n    return super() unless me.isAdmin()\n\n    console.log(new Date().toISOString(), 'onLoaded')\n\n    teacherMap = {} # Used to make sure teachers and students only counted once\n    studentMap = {} # Used to make sure teachers and students only counted once\n    studentNonHocMap = {} # Used to exclude HoC users\n    teacherStudentMap = {} # Used to link students to their teacher locations\n    unknownSchoolCount = 1 # Used to separate unique but unknown schools\n\n    console.log(new Date().toISOString(), \"Processing #{@courseInstances.models.length} course instances...\")\n    for courseInstance in @courseInstances.models\n      studentNonHocMap[courseInstance.get('ownerID')] = true\n      studentNonHocMap[studentID] = true for studentID in courseInstance.get('members') ? []\n\n    console.log(new Date().toISOString(), \"Processing #{@teachers.models.length} teachers...\")\n    for teacher in @teachers.models\n      teacherMap[teacher.id] = teacher.get('geo') ? {}\n\n    console.log(new Date().toISOString(), \"Processing #{@classrooms.models.length} classrooms...\")\n    for classroom in @classrooms.models\n      teacherID = classroom.get('ownerID')\n      teacherMap[teacherID] ?= {}\n      teacherStudentMap[teacherID] ?= {}\n      for studentID in classroom.get('members')\n        continue if teacherMap[studentID]\n        continue unless studentNonHocMap[studentID]\n        studentMap[studentID] = {}\n        teacherStudentMap[teacherID][studentID] = true\n\n    console.log(new Date().toISOString(), \"Processing #{@students.models.length} students...\")\n    for student in @students.models\n      continue unless studentNonHocMap[student.id]\n      continue if teacherMap[student.id]\n      studentMap[student.id] = {geo: student.get('geo')}\n\n    delete studentNonHocMap[studentId] for studentId in studentNonHocMap # Don't need these anymore\n\n    console.log(new Date().toISOString(), \"Cloning #{Object.keys(teacherMap).length} teacherMap...\")\n    orphanTeacherMap = {}\n    orphanTeacherMap[teacherID] = true for teacherID of teacherMap\n    console.log(new Date().toISOString(), \"Cloning #{Object.keys(studentMap).length} studentMap...\")\n    orphanStudentMap = {}\n    orphanStudentMap[studentID] = true for studentID of studentMap\n\n    console.log(new Date().toISOString(), \"Processing #{@trialRequests.models.length} trial requests...\")\n    countryStateDistrictSchoolCountsMap = {}\n    for trialRequest in @trialRequests.models\n      teacherID = trialRequest.get('applicant')\n      unless teacherMap[teacherID]\n        # E.g. parents\n        # console.log(\"Skipping non-teacher #{teacherID} trial request #{trialRequest.id}\")\n        continue\n      props = trialRequest.get('properties')\n      if props.nces_id and props.country and props.state\n        country = props.country\n        state = props.state\n        district = props.nces_district\n        school = props.nces_name\n        countryStateDistrictSchoolCountsMap[country] ?= {}\n        countryStateDistrictSchoolCountsMap[country][state] ?= {}\n        countryStateDistrictSchoolCountsMap[country][state][district] ?= {}\n        countryStateDistrictSchoolCountsMap[country][state][district][school] ?= {students: {}, teachers: {}}\n        countryStateDistrictSchoolCountsMap[country][state][district][school].teachers[teacherID] = true\n        for studentID, val of teacherStudentMap[teacherID] when orphanStudentMap[studentID]\n          countryStateDistrictSchoolCountsMap[country][state][district][school].students[studentID] = true\n          delete orphanStudentMap[studentID]\n        delete orphanTeacherMap[teacherID]\n      else if not _.isEmpty(props.country)\n        country = props.country?.trim()\n        country = country[0].toUpperCase() + country.substring(1).toLowerCase()\n        country = 'Taiwan' if /台灣/ig.test(country)\n        country = 'UK' if /^uk$|united kingdom|england/ig.test(country)\n        country = 'USA' if /^u\\.s\\.?(\\.a)?\\.?$|^us$|america|united states|usa/ig.test(country)\n        state = props.state ? 'unknown'\n        if country is 'USA'\n          stateName = utils.usStateCodes.sanitizeStateName(state)\n          state = utils.usStateCodes.getStateCodeByStateName(stateName) if stateName\n          state = utils.usStateCodes.sanitizeStateCode(state) ? state\n        district = 'unknown'\n        school = props.organiziation ? 'unknown'\n        countryStateDistrictSchoolCountsMap[country] ?= {}\n        countryStateDistrictSchoolCountsMap[country][state] ?= {}\n        countryStateDistrictSchoolCountsMap[country][state][district] ?= {}\n        countryStateDistrictSchoolCountsMap[country][state][district][school] ?= {students: {}, teachers: {}}\n        countryStateDistrictSchoolCountsMap[country][state][district][school].teachers[teacherID] = true\n        for studentID, val of teacherStudentMap[teacherID] when orphanStudentMap[studentID]\n          countryStateDistrictSchoolCountsMap[country][state][district][school].students[studentID] = true\n          delete orphanStudentMap[studentID]\n        delete orphanTeacherMap[teacherID]\n\n    console.log(new Date().toISOString(), \"Processing #{Object.keys(orphanTeacherMap).length} orphaned teachers with geo IPs...\")\n    for teacherID, val of orphanTeacherMap\n      continue unless teacherMap[teacherID].country\n      country = teacherMap[teacherID].countryName or teacherMap[teacherID].country\n      country = 'UK' if country is 'GB' or country is 'United Kingdom'\n      country = 'USA' if country is 'US' or country is 'United States'\n      state = teacherMap[teacherID].region or 'unknown'\n      district = 'unknown'\n      school = 'unknown'\n      if teacherStudentMap[teacherID] and Object.keys(teacherStudentMap[teacherID]).length >= 10\n        school += unknownSchoolCount++\n      countryStateDistrictSchoolCountsMap[country] ?= {}\n      countryStateDistrictSchoolCountsMap[country][state] ?= {}\n      countryStateDistrictSchoolCountsMap[country][state][district] ?= {}\n      countryStateDistrictSchoolCountsMap[country][state][district][school] ?= {students: {}, teachers: {}}\n      countryStateDistrictSchoolCountsMap[country][state][district][school].teachers[teacherID] = true\n      if teacherStudentMap[teacherID] and Object.keys(teacherStudentMap[teacherID]).length >= 10\n        for studentID, val of teacherStudentMap[teacherID] when orphanStudentMap[studentID]\n          countryStateDistrictSchoolCountsMap[country][state][district][school].students[studentID] = true\n          delete orphanStudentMap[studentID]\n      delete orphanTeacherMap[teacherID]\n\n    console.log(new Date().toISOString(), \"Processing #{Object.keys(orphanTeacherMap).length} orphaned teachers with 10+ students...\")\n    for teacherID, val of orphanTeacherMap\n      continue unless teacherStudentMap[teacherID] and Object.keys(teacherStudentMap[teacherID]).length >= 10\n      country = 'unknown'\n      state = 'unknown'\n      district = 'unknown'\n      school = \"unknown#{unknownSchoolCount++}\"\n      countryStateDistrictSchoolCountsMap[country] ?= {}\n      countryStateDistrictSchoolCountsMap[country][state] ?= {}\n      countryStateDistrictSchoolCountsMap[country][state][district] ?= {}\n      countryStateDistrictSchoolCountsMap[country][state][district][school] ?= {students: {}, teachers: {}}\n      countryStateDistrictSchoolCountsMap[country][state][district][school].teachers[teacherID] = true\n      for studentID, val of teacherStudentMap[teacherID] when orphanStudentMap[studentID]\n        countryStateDistrictSchoolCountsMap[country][state][district][school].students[studentID] = true\n        delete orphanStudentMap[studentID]\n      delete orphanTeacherMap[teacherID]\n\n    console.log(new Date().toISOString(), \"Processing #{Object.keys(orphanStudentMap).length} orphaned students with geo IPs...\")\n    for studentID of orphanStudentMap\n      continue unless studentMap[studentID].geo?.country\n      country = studentMap[studentID].geo.countryName or studentMap[studentID].geo.country\n      country = 'UK' if country is 'GB' or country is 'United Kingdom'\n      country = 'USA' if country is 'US' or country is 'United States'\n      state = studentMap[studentID].geo.region or 'unknown'\n      district = 'unknown'\n      school = 'unknown'\n      countryStateDistrictSchoolCountsMap[country] ?= {}\n      countryStateDistrictSchoolCountsMap[country][state] ?= {}\n      countryStateDistrictSchoolCountsMap[country][state][district] ?= {}\n      countryStateDistrictSchoolCountsMap[country][state][district][school] ?= {students: {}, teachers: {}}\n      countryStateDistrictSchoolCountsMap[country][state][district][school].students[studentID] = true\n      delete orphanStudentMap[studentID]\n\n    console.log(new Date().toISOString(), 'Building country graphs...')\n    @countryGraphs = {}\n    @countryCounts = []\n    totalStudents = 0\n    totalTeachers = 0\n    for country, stateDistrictSchoolCountsMap of countryStateDistrictSchoolCountsMap\n      @countryGraphs[country] =\n        districtCounts: []\n        stateCounts: []\n        stateCountsMap: {}\n        totalSchools: 0\n        totalStates: 0\n        totalStudents: 0\n        totalTeachers: 0\n      for state, districtSchoolCountsMap of stateDistrictSchoolCountsMap\n        if utils.usStateCodes.sanitizeStateCode(state)? or ['GU', 'PR'].indexOf(state) >= 0\n          @countryGraphs[country].totalStates++\n        stateData = {state: state, districts: 0, schools: 0, students: 0, teachers: 0}\n        for district, schoolCountsMap of districtSchoolCountsMap\n          stateData.districts++\n          districtData = {state: state, district: district, schools: 0, students: 0, teachers: 0}\n          for school, counts of schoolCountsMap\n            studentCount = Object.keys(counts.students).length\n            teacherCount = Object.keys(counts.teachers).length\n            @countryGraphs[country].totalSchools++\n            @countryGraphs[country].totalStudents += studentCount\n            @countryGraphs[country].totalTeachers += teacherCount\n            stateData.schools++\n            stateData.students += studentCount\n            stateData.teachers += teacherCount\n            districtData.schools++\n            districtData.students += studentCount\n            districtData.teachers += teacherCount\n          @countryGraphs[country].districtCounts.push(districtData)\n        @countryGraphs[country].stateCounts.push(stateData)\n        @countryGraphs[country].stateCountsMap[state] = stateData\n      @countryCounts.push\n        country: country\n        schools: @countryGraphs[country].totalSchools\n        students: @countryGraphs[country].totalStudents\n        teachers: @countryGraphs[country].totalTeachers\n      totalStudents += @countryGraphs[country].totalStudents\n      totalTeachers += @countryGraphs[country].totalTeachers\n\n    # Compare against orphanStudentMap and orphanTeacherMap to catch bugs\n    @untriagedStudents = Object.keys(studentMap).length - totalStudents\n    @untriagedTeachers = Object.keys(teacherMap).length - totalTeachers\n\n    console.log(new Date().toISOString(), \"teacherMap #{Object.keys(teacherMap).length} totalTeachers #{totalTeachers} orphanTeacherMap #{Object.keys(orphanTeacherMap).length}  @untriagedTeachers #{@untriagedTeachers}\")\n    console.log(new Date().toISOString(), \"studentMap #{Object.keys(studentMap).length} totalStudents #{totalStudents} orphanStudentMap #{Object.keys(orphanStudentMap).length}  @untriagedStudents #{@untriagedStudents}\")\n\n    for country, graph of @countryGraphs\n      graph.stateCounts.sort (a, b) ->\n        b.students - a.students or b.teachers - a.teachers or b.schools - a.schools or b.districts - a.districts or b.state.localeCompare(a.state)\n      graph.districtCounts.sort (a, b) ->\n        if a.state isnt b.state\n          stateCountsA = graph.stateCountsMap[a.state]\n          stateCountsB = graph.stateCountsMap[b.state]\n          stateCountsB.students - stateCountsA.students or stateCountsB.teachers - stateCountsA.teachers or stateCountsB.schools - stateCountsA.schools or stateCountsB.districts - stateCountsA.districts or a.state.localeCompare(b.state)\n        else\n          b.students - a.students or b.teachers - a.teachers or b.schools - a.schools or b.district.localeCompare(a.district)\n    @countryCounts.sort (a, b) ->\n      b.students - a.students or b.teachers - a.teachers or b.schools - a.schools or b.country.localeCompare(a.country)\n\n    console.log(new Date().toISOString(), 'Done...')\n    super()\n"]}