{"version":3,"sources":["app/views/admin/AdminClassroomContentView.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/admin/AdminClassroomContentView.js","sourcesContent":["utils = require 'core/utils'\nRootView = require 'views/core/RootView'\n\nmodule.exports = class AdminClassroomContentView extends RootView\n  id: 'admin-classroom-content-view'\n  template: require 'templates/admin/admin-classroom-content'\n\n  initialize: ->\n    return super() unless me.isAdmin()\n    @fetchData()\n    super()\n\n  fetchData: ->\n    # Fetch playtime data for released courses\n    # Makes a bunch of small fetches per course and per day to avoid gateway timeouts\n    @minSessionCount = 50\n    @maxDays = 20\n    @loadingMessage = \"Loading..\"\n    courseLevelPlaytimesMap = {}\n    courseLevelTotalPlaytimeMap = {}\n    levelPracticeMap = {}\n    getMoreLevelSessions = (courseIDs, startOffset, endOffset) =>\n      return if @destroyed\n      @loadingMessage = \"Fetching data for #{courseIDs.length} courses for #{endOffset ? 0}/#{@maxDays} days ago..\"\n      @render?()\n      startDate = new Date()\n      startDate.setUTCDate(startDate.getUTCDate() - startOffset)\n      startDay = startDate.toISOString().substring(0, 10)\n      if endOffset\n        endDate = new Date()\n        endDate.setUTCDate(endDate.getUTCDate() - endOffset)\n        endDay = endDate.toISOString().substring(0, 10)\n      promises = []\n      for courseID in courseIDs\n        url = \"/db/classroom/-/playtimes?sessionLimit=#{@minSessionCount * 100}&courseID=#{courseID}&startDay=#{encodeURIComponent(startDay)}\"\n        if endDay\n          url += \"&endDay=#{encodeURIComponent(endDay)}\"\n        promises.push(Promise.resolve($.get(url)))\n      Promise.all(promises)\n      .then (results) =>\n        return if @destroyed\n\n        for data, index in results\n          [levelPlaytimes, levelSessions] = data\n          continue unless levelPlaytimes[0]\n          courseID = levelPlaytimes[0].courseID\n          courseLevelPlaytimesMap[courseID] ?= levelPlaytimes\n          courseLevelTotalPlaytimeMap[courseID] ?= {}\n          for levelPlaytime in levelPlaytimes\n            courseLevelTotalPlaytimeMap[courseID][levelPlaytime.levelOriginal] ?= {count: 0, total: 0}\n            levelPracticeMap[levelPlaytime.levelOriginal] = true if levelPlaytime.practice\n          for session in levelSessions\n            courseLevelTotalPlaytimeMap[courseID][session.level.original].count++\n            courseLevelTotalPlaytimeMap[courseID][session.level.original].total += session.playtime\n        # console.log 'courseLevelTotalPlaytimeMap', courseLevelTotalPlaytimeMap\n\n        for courseID, totalPlaytimes of courseLevelTotalPlaytimeMap when courseID in courseIDs\n          needMoreData = false\n          for levelOriginal, data of totalPlaytimes\n            if data.count < @minSessionCount\n              needMoreData = true\n              break\n          continue if needMoreData\n          # console.log 'getMoreLevelSessions have enough data for course', courseID\n          _.remove courseIDs, (val) -> val is courseID\n\n        if startOffset <= @maxDays and courseIDs.length > 0\n          return getMoreLevelSessions(courseIDs, startOffset + 1, endOffset + 1 or 1)\n        else\n          for courseID, levelPlaytimes of courseLevelPlaytimesMap\n            for data in levelPlaytimes\n              data.count = courseLevelTotalPlaytimeMap[courseID][data.levelOriginal]?.count ? 0\n              data.playtime = courseLevelTotalPlaytimeMap[courseID][data.levelOriginal]?.total ? 0\n          # console.log 'courseLevelPlaytimesMap', courseLevelPlaytimesMap\n\n          @courseLevelPlaytimes = _.flatten((levelPlaytimes for courseID, levelPlaytimes of courseLevelPlaytimesMap))\n          @courseLevelPlaytimes.sort (a, b) =>\n            aRank = (utils.orderedCourseIDs.indexOf(a.courseID) ? 9000) * 1000 + (a.levelIndex ? 500)\n            bRank = (utils.orderedCourseIDs.indexOf(b.courseID) ? 9000) * 1000 + (b.levelIndex ? 500)\n            aRank - bRank\n\n          @totalSeconds = 0\n          courseSecondsMap = {}\n          courseIDMap = {}\n          for data in @courseLevelPlaytimes\n            courseSecondsMap[data.courseSlug] ?= 0\n            avgPlaytime = if data.count > 0 then data.playtime / data.count else 300\n            avgPlaytime /= 3 if levelPracticeMap[data.levelOriginal]\n            courseIDMap[data.courseSlug] = data.courseID\n            courseSecondsMap[data.courseSlug] += avgPlaytime\n            @totalSeconds += avgPlaytime\n          @courseSeconds = (courseSlug: courseSlug, seconds: data for courseSlug, data of courseSecondsMap)\n          @courseSeconds.sort (a, b) ->\n            utils.orderedCourseIDs.indexOf(courseIDMap[a.courseSlug]) - utils.orderedCourseIDs.indexOf(courseIDMap[b.courseSlug])\n\n          @render?()\n\n    getMoreLevelSessions((courseID for key, courseID of utils.courseIDs), 1)\n"]}