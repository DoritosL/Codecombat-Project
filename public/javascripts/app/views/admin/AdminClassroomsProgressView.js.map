{"version":3,"sources":["app/views/admin/AdminClassroomsProgressView.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/admin/AdminClassroomsProgressView.js","sourcesContent":["utils = require 'core/utils'\nRootView = require 'views/core/RootView'\n\n# TODO: adjust opacity of student on level cell based on num users\n# TODO: better variables between current course/levels and classroom versioned ones\n# TODO: exclude archived classes?\n# TODO: level cell widths based on level median playtime\n# TODO: students in multiple classrooms with different programming languages?\n\n# TODO: refactor, cleanup, perf, yikes\n\n# Outline:\n# 1. Get a bunch of data\n# 2. Get latest course and level maps\n# 3. Get user activity and licenses\n# 4. Get classroom activity\n# 5. Build classroom progress\n\nmodule.exports = class AdminClassroomsProgressView extends RootView\n  id: 'admin-classrooms-progress-view'\n  template: require 'templates/admin/admin-classrooms-progress'\n  courseAcronymMap: utils.courseAcronyms\n\n  initialize: ->\n    return super() unless me.isAdmin()\n    @licenseEndMonths = utils.getQueryVariable('licenseEndMonths', 6)\n    @buildProgressData(@licenseEndMonths)\n    super()\n\n  buildProgressData: ->\n\n    Promise.all [\n      Promise.resolve($.get('/db/course')),\n      Promise.resolve($.get('/db/campaign')),\n      Promise.resolve($.get(\"/db/prepaid/-/active-school-licenses?licenseEndMonths=#{@licenseEndMonths}\"))\n    ]\n    .then (results) =>\n      [courses, campaigns, {@classrooms, levelSessions, prepaids, teachers}] = results\n      courses = courses.filter((c) => c.releasePhase is 'released')\n      utils.sortCourses(courses)\n      licenses = prepaids.filter((p) => p.redeemers?.length > 0)\n\n      # console.log 'courses', courses\n      # console.log 'campaigns', campaigns\n      # console.log 'classrooms', @classrooms\n      # console.log 'licenses', licenses\n      # console.log 'levelSessions', levelSessions\n\n      @teacherMap = {}\n      @teacherMap[teacher._id] = teacher for teacher in teachers\n\n      [@latestCourseMap, @latestLevelSlugMap, latestOrderedLevelOriginals] = @getLatestLevels(campaigns, courses)\n      [userLatestActivityMap, userLevelOriginalCompleteMap, userLicensesMap] = @getUserActivity(levelSessions, licenses, latestOrderedLevelOriginals)\n      [classroomLatestActivity, classroomLicenseCourseLevelMap, classroomLicenseFurthestLevelMap] = @getClassroomActivity(@classrooms, @latestCourseMap, userLatestActivityMap, userLicensesMap, userLevelOriginalCompleteMap)\n\n      # Build classroom/license/course/level progress\n      @classroomProgress = []\n      for classroomId, licensesCourseLevelMap of classroomLicenseCourseLevelMap #when classroomId is '573ac4b48edc9c1f009cd6be'\n        classroom = _.find(@classrooms, (c) -> c._id is classroomId)\n        classroomLicenses = []\n        \n        for licenseId, courseLevelMap of licensesCourseLevelMap\n\n          # Build full level list and individual course indexes\n          courseLastLevelIndexes = []\n          courseLastLevelIndexMap = {}\n          levels = []\n          for courseId, levelMap of courseLevelMap\n            for levelOriginal, val of levelMap\n              levels.push({levelOriginal, numUsers: val})\n            courseLastLevelIndexes.push({courseId, index: levels.length - 1})\n            courseLastLevelIndexMap[courseId] = levels.length - 1\n          furthestLevelIndex = levels.indexOf(_.findLast(levels, (l) -> l.numUsers > 0))\n          percentComplete = (furthestLevelIndex + 1) / levels.length * 100\n          courseLastLevelIndexes.sort((a, b) => utils.orderedCourseIDs.indexOf(a.courseId) - utils.orderedCourseIDs.indexOf(b.courseId))\n\n          # Check latest courses for missing courses and levels in current classroom\n          # NOTE: Missing levels are injected directly into levels list with extra missing=true prop\n          missingCourses = []\n          for courseId, courseData of @latestCourseMap #when @latestCourseMap[courseId].slug is 'computer-science-3'\n            if courseLevelMap[courseId]\n              # Course is available in classroom\n              # furthestLevelIndex > courseLastLevelIndexMap[courseId] means furthest level is after this course\n              # furthestLevelIndex <= courseLastLevelIndexMap[courseId] means furthest level is at or before end of this course\n              if furthestLevelIndex <= courseLastLevelIndexMap[courseId]\n                # Course is available in classroom, and furthest student is not past this course\n                @addAvailableCourseMissingLevels(classroomId, classroomLicenseFurthestLevelMap, courseId, courseLastLevelIndexes, courseLevelMap, courseData.levels, latestOrderedLevelOriginals, levels, licenseId)\n            else\n              # Course missing entirely from classroom\n              missingCourses.push({courseId, levels: courseData.levels})\n          license = _.find(licenses, (l) -> l._id is licenseId)\n          classroomLicenses.push({courseLastLevelIndexes, license, levels, furthestLevelIndex, missingCourses, percentComplete})\n          # console.log classroomId, licenseId, levels, levelMap\n          # break\n        @classroomProgress.push({classroom, licenses: classroomLicenses, latestActivity: classroomLatestActivity[classroom._id]})\n\n      @sortClassroomProgress(@classroomProgress)\n\n      console.log 'classroomProgress', @classroomProgress\n\n      @render?()\n\n  addAvailableCourseMissingLevels: (classroomId, classroomLicenseFurthestLevelMap, courseId, courseLastLevelIndexes, courseLevelMap, latestCourseLevelOriginals, latestOrderedLevelOriginals, levels, licenseId) ->\n    # Add missing levels from available course to full level list\n\n    # Find missing levels from the latest version of the course\n    currentCourseLevelOriginals = (levelOriginal for levelOriginal, val of courseLevelMap[courseId])\n    latestCourseMissingLevelOriginals = _.reject(latestCourseLevelOriginals, (l) -> l in currentCourseLevelOriginals)\n    # console.log 'latestCourseMissingLevelOriginals', @latestCourseMap[courseId].slug, _.map(latestCourseMissingLevelOriginals, (l) => @latestLevelSlugMap[l] or l)\n\n    # Find missing latest levels that can be safely added to current course\n    currentFurthestCourseLevelIndex = currentCourseLevelOriginals.indexOf(classroomLicenseFurthestLevelMap[classroomId]?[licenseId])\n    # Find current started level that is closest to furthest current course level and also in latest level list\n    furthestCurrentAndLatestCourseLevelIndex = currentFurthestCourseLevelIndex\n    while furthestCurrentAndLatestCourseLevelIndex >= 0 and\n    latestOrderedLevelOriginals.indexOf(currentCourseLevelOriginals[furthestCurrentAndLatestCourseLevelIndex]) < 0\n      furthestCurrentAndLatestCourseLevelIndex--\n    # Find earliest index in latest levels list that missing levels could be inserted\n    latestLevelEarliestInsertionLevelIndex = 0\n    if furthestCurrentAndLatestCourseLevelIndex >= 0\n      latestLevelEarliestInsertionLevelIndex = latestOrderedLevelOriginals.indexOf(currentCourseLevelOriginals[furthestCurrentAndLatestCourseLevelIndex]) + 1\n    # Keep each missing latest level that ahead of furthest insertion point in latest level list\n    latestLevelsToAdd = _.filter(latestCourseMissingLevelOriginals, (l) ->\n      latestOrderedLevelOriginals.indexOf(l) >= latestLevelEarliestInsertionLevelIndex and not _.find(levels, {levelOriginal: l}))\n    latestLevelsToAdd.sort((a, b) => latestOrderedLevelOriginals.indexOf(a) - latestOrderedLevelOriginals.indexOf(b))\n    # console.log 'latestLevelsToAdd', @latestCourseMap[courseId].slug, currentFurthestCourseLevelIndex, latestLevelEarliestInsertionLevelIndex, levels.length, _.map(latestLevelsToAdd, (l) => @latestLevelSlugMap[l] or l)\n\n    # Find a specific insertion point in current course levels for each missing latest level\n    # Splicing each missing level directly into current full levels list and current course levels list\n    # Options for adding this latest level to existing course levels:\n      # no furthest current or latest prev, insert at beginning\n      # no furthest current, insert after latest prev\n      # furthest current is latest previous, then insert right after furthest\n      # latest previous is before furthest current, then insert right after furthest\n      # latest previous is not in current levels, then insert right after furthest\n      # latest previous is after furthest current, then insert after found latest previous\n    currentPreviousCourseLevelIndex = currentFurthestCourseLevelIndex\n    for levelOriginal, i in latestLevelsToAdd #when @latestCourseMap[courseId].slug is 'computer-science-4'\n      previousLatestOriginal = latestOrderedLevelOriginals[latestOrderedLevelOriginals.indexOf(levelOriginal) - 1]\n\n      if currentPreviousCourseLevelIndex < 0\n        # no furthest current\n        currentPreviousCourseLevelIndex = currentCourseLevelOriginals.indexOf(previousLatestOriginal)\n        if currentPreviousCourseLevelIndex < 0\n          # no furthest current or latest prev, insert at beginning\n          currentPreviousCourseLevelIndex = 0\n          # console.log 'no furthest current or latest prev, insert at beginning', previousLatestOriginal, currentPreviousCourseLevelIndex, _.findIndex(levels, {levelOriginal: currentCourseLevelOriginals[currentPreviousCourseLevelIndex]}), @latestLevelSlugMap[levelOriginal]\n          levels.splice(_.findIndex(levels, {levelOriginal: currentCourseLevelOriginals[currentPreviousCourseLevelIndex]}), 0, {levelOriginal, numusers: 0, missing: true})\n          currentCourseLevelOriginals.splice(currentPreviousCourseLevelIndex, 0, levelOriginal)\n        else\n          # no furthest current, insert after latest prev\n          # console.log 'no furthest current, insert after latest prev', previousLatestOriginal, currentPreviousCourseLevelIndex, _.findIndex(levels, {levelOriginal: currentCourseLevelOriginals[currentPreviousCourseLevelIndex]}) + 1, @latestLevelSlugMap[levelOriginal]\n          levels.splice(_.findIndex(levels, {levelOriginal: currentCourseLevelOriginals[currentPreviousCourseLevelIndex]}) + 1, 0, {levelOriginal, numusers: 0, missing: true})\n          currentCourseLevelOriginals.splice(currentPreviousCourseLevelIndex + 1, 0, levelOriginal)\n          currentPreviousCourseLevelIndex++\n\n      else if currentCourseLevelOriginals[currentPreviousCourseLevelIndex] is previousLatestOriginal or\n      currentCourseLevelOriginals.indexOf(previousLatestOriginal) < 0 or\n      currentCourseLevelOriginals.indexOf(previousLatestOriginal) < currentPreviousCourseLevelIndex\n        # furthest current is latest previous, then insert right after furthest\n        # latest previous is before furthest current, then insert right after furthest\n        # latest previous is not in current levels, then insert right after furthest\n        # console.log 'insert next to furthest', previousLatestOriginal, currentPreviousCourseLevelIndex, _.findIndex(levels, {levelOriginal: currentCourseLevelOriginals[currentPreviousCourseLevelIndex]}) + 1, @latestLevelSlugMap[levelOriginal]\n        levels.splice(_.findIndex(levels, {levelOriginal: currentCourseLevelOriginals[currentPreviousCourseLevelIndex]}) + 1, 0, {levelOriginal, numusers: 0, missing: true})\n        currentCourseLevelOriginals.splice(currentPreviousCourseLevelIndex + 1, 0, levelOriginal)\n        currentPreviousCourseLevelIndex++\n\n      else #if currentCourseLevelOriginals.indexOf(previousLatestOriginal) > currentPreviousCourseLevelIndex\n        if currentCourseLevelOriginals.indexOf(previousLatestOriginal) <= currentPreviousCourseLevelIndex\n          console.log \"ERROR! current index #{currentCourseLevelOriginals.indexOf(previousLatestOriginal)} of prev latest #{previousLatestOriginal} is <= currentPreviousCourseLevelIndex #{currentPreviousCourseLevelIndex}\"\n        # latest previous is after furthest current, then insert after found latest previous\n        currentPreviousCourseLevelIndex = currentCourseLevelOriginals.indexOf(previousLatestOriginal)\n        # console.log 'no furthest current, insert at beginning', _.findIndex(levels, {levelOriginal: currentCourseLevelOriginals[currentPreviousCourseLevelIndex]}) + 1, @latestLevelSlugMap[levelOriginal]\n        levels.splice(_.findIndex(levels, {levelOriginal: currentCourseLevelOriginals[currentPreviousCourseLevelIndex]}) + 1, 0, {levelOriginal, numusers: 0, missing: true})\n        currentCourseLevelOriginals.splice(currentPreviousCourseLevelIndex + 1, 0, levelOriginal)\n        currentPreviousCourseLevelIndex++\n\n      # Update courseLastLevelIndexes\n      for courseLastLevelIndexData in courseLastLevelIndexes\n        if utils.orderedCourseIDs.indexOf(courseLastLevelIndexData.courseId) >= utils.orderedCourseIDs.indexOf(courseId)\n          courseLastLevelIndexData.index++\n          # console.log 'incremented last level course index', courseLastLevelIndexData.index, @latestCourseMap[courseLastLevelIndexData.courseId].slug, @latestLevelSlugMap[levelOriginal]\n      # break if i >= 1\n    # console.log 'levels', levels.length\n\n  getClassroomActivity: (classrooms, latestCourseMap, userLatestActivityMap, userLicensesMap, userLevelOriginalCompleteMap) ->\n    classroomLicenseFurthestLevelMap = {}\n    classroomLatestActivity = {}\n    classroomLicenseCourseLevelMap = {}\n    for classroom in classrooms #when classroom._id is '573ac4b48edc9c1f009cd6be'\n      for license in userLicensesMap[classroom.ownerID]\n        licensedMembers = _.intersection(classroom.members, _.map(license.redeemers, 'userID'))\n        continue if _.isEmpty(licensedMembers)\n        classroomLicenseCourseLevelMap[classroom._id] ?= {}\n        classroomLicenseCourseLevelMap[classroom._id][license._id] ?= {}\n        courseOriginalLevels = []\n        for course in utils.sortCourses(classroom.courses) when latestCourseMap[course._id]\n          for level in course.levels\n            courseOriginalLevels.push(level.original)\n        userFurthestLevelOriginalMap = {}\n        for userId, levelOriginalCompleteMap of userLevelOriginalCompleteMap when licensedMembers.indexOf(userId) >= 0\n          userFurthestLevelOriginalMap[userId] ?= {}\n          for levelOriginal, complete of levelOriginalCompleteMap\n            if _.isEmpty(userFurthestLevelOriginalMap[userId]) or\n            courseOriginalLevels.indexOf(levelOriginal) > courseOriginalLevels.indexOf(userFurthestLevelOriginalMap[userId])\n              userFurthestLevelOriginalMap[userId] = levelOriginal\n        # For each level, how many is that the furthest for?\n        for course in utils.sortCourses(classroom.courses) when latestCourseMap[course._id]\n          classroomLicenseCourseLevelMap[classroom._id][license._id][course._id] ?= {}\n          for level in course.levels\n            classroomLicenseCourseLevelMap[classroom._id][license._id][course._id][level.original] ?= 0\n            for userId in licensedMembers\n              if not classroomLatestActivity[classroom._id] or\n              classroomLatestActivity[classroom._id] < userLatestActivityMap[userId]\n                classroomLatestActivity[classroom._id] = userLatestActivityMap[userId]\n              if userFurthestLevelOriginalMap[userId] is level.original\n                classroomLicenseCourseLevelMap[classroom._id][license._id][course._id][level.original]++\n                classroomLicenseFurthestLevelMap[classroom._id] ?= {}\n                classroomLicenseFurthestLevelMap[classroom._id][license._id] ?= {}\n                classroomLicenseFurthestLevelMap[classroom._id][license._id] = level.original\n                # console.log 'furthest level setting', latestCourseMap[course._id].slug, @latestLevelSlugMap[level.original]\n    # console.log 'classroomLicenseFurthestLevelMap', classroomLicenseFurthestLevelMap\n    # console.log 'classroomLatestActivity', classroomLatestActivity\n    # console.log 'classroomLicenseCourseLevelMap', classroomLicenseCourseLevelMap\n    [classroomLatestActivity, classroomLicenseCourseLevelMap, classroomLicenseFurthestLevelMap]\n\n  getLatestLevels: (campaigns, courses) ->\n    courseLevelsMap = {}\n    originalSlugMap = {}\n    latestOrderedLevelOriginals = []\n    for course in courses\n      campaign = _.find(campaigns, _id: course.campaignID)\n      courseLevelsMap[course._id] = {slug: course.slug, levels: []}\n      for levelOriginal, level of campaign.levels\n        originalSlugMap[levelOriginal] = level.slug\n        latestOrderedLevelOriginals.push(levelOriginal)\n        courseLevelsMap[course._id].levels.push(levelOriginal)\n    # console.log 'latestOrderedLevelOriginals', latestOrderedLevelOriginals\n    [courseLevelsMap, originalSlugMap, latestOrderedLevelOriginals]\n\n  getUserActivity: (levelSessions, licenses, latestOrderedLevelOriginals) ->\n    # TODO: need to do anything with level sessions not in latest classroom content?\n    userLatestActivityMap = {}\n    userLevelOriginalCompleteMap = {}\n    for levelSession in levelSessions when latestOrderedLevelOriginals.indexOf(levelSession?.level?.original) >= 0\n      userLevelOriginalCompleteMap[levelSession.creator] ?= {}\n      userLevelOriginalCompleteMap[levelSession.creator][levelSession.level.original] = levelSession?.state?.complete ? false\n      if not userLatestActivityMap[levelSession.creator] or\n      userLatestActivityMap[levelSession.creator] < levelSession.changed\n        userLatestActivityMap[levelSession.creator] = levelSession.changed\n    # console.log 'userLatestActivityMap', userLatestActivityMap\n    # console.log 'userLevelOriginalCompleteMap', userLevelOriginalCompleteMap\n\n    userLicensesMap = {}\n    for license in licenses\n      userLicensesMap[license.creator] ?= []\n      userLicensesMap[license.creator].push(license)\n    # console.log 'userLicensesMap', userLicensesMap\n\n    [userLatestActivityMap, userLevelOriginalCompleteMap, userLicensesMap]\n\n  sortClassroomProgress: (classroomProgress) ->\n    # Find least amount of content buffer by teacher\n    # TODO: use classroom members instead of license redeemers?\n    teacherContentBufferMap = {}\n    for progress in classroomProgress\n      teacherId = progress.classroom.ownerID\n      teacherContentBufferMap[teacherId] ?= {}\n      percentComplete = _.max(_.map(progress.licenses, 'percentComplete'))\n      if not teacherContentBufferMap[teacherId].percentComplete? or\n      percentComplete > teacherContentBufferMap[teacherId].percentComplete\n        teacherContentBufferMap[teacherId].percentComplete = percentComplete\n      if not teacherContentBufferMap[teacherId].latestActivity? or\n      progress.latestActivity > teacherContentBufferMap[teacherId].latestActivity\n        teacherContentBufferMap[teacherId].latestActivity = progress.latestActivity\n      numUsers = _.max(_.map(progress.licenses, (l) -> l.license?.redeemers?.length ? 0))\n      if not teacherContentBufferMap[teacherId].numUsers? or numUsers > teacherContentBufferMap[teacherId].numUsers\n        teacherContentBufferMap[teacherId].numUsers = numUsers\n    # console.log 'teacherContentBufferMap', teacherContentBufferMap\n\n    classroomProgress.sort (a, b) ->\n      idA = a.classroom.ownerID\n      idB = b.classroom.ownerID\n      if idA is idB\n        percentCompleteA = _.max(_.map(a.licenses, 'percentComplete'))\n        percentCompleteB = _.max(_.map(b.licenses, 'percentComplete'))\n        if percentCompleteA > percentCompleteB\n          return -1\n        else if percentCompleteA < percentCompleteB\n          return 1\n        else\n          latestActivityA = a.latestActivity\n          latestActivityB = b.latestActivity\n          if latestActivityA > latestActivityB\n            return -1\n          else if latestActivityA < latestActivityB\n            return 1\n          else\n            numUsersA = _.max(_.map(a.licenses, (l) -> l.license?.redeemers?.length ? 0))\n            numUsersB = _.max(_.map(b.licenses, (l) -> l.license?.redeemers?.length ? 0))\n            if numUsersA > numUsersB\n              return -1\n            else if numUsersA < numUsersB\n              return 1\n            else\n              return 0\n      else\n        percentCompleteA = teacherContentBufferMap[idA].percentComplete\n        percentCompleteB = teacherContentBufferMap[idB].percentComplete\n        if percentCompleteA > percentCompleteB\n          return -1\n        else if percentCompleteA < percentCompleteB\n          return 1\n        else\n          latestActivityA = teacherContentBufferMap[idA].latestActivity\n          latestActivityB = teacherContentBufferMap[idB].latestActivity\n          if latestActivityA > latestActivityB\n            return -1\n          else if latestActivityA < latestActivityB\n            return 1\n          else\n            numUsersA = teacherContentBufferMap[idA].numUsers\n            numUsersB = teacherContentBufferMap[idB].numUsers\n            if numUsersA > numUsersB\n              return -1\n            else if numUsersA < numUsersB\n              return 1\n            else\n              return 0\n"]}