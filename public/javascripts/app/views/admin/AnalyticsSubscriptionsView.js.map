{"version":3,"sources":["app/views/admin/AnalyticsSubscriptionsView.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/admin/AnalyticsSubscriptionsView.js","sourcesContent":["RootView = require 'views/core/RootView'\ntemplate = require 'templates/admin/analytics-subscriptions'\nThangType = require 'models/ThangType'\nUser = require 'models/User'\n\n# TODO: Graphing code copied/mangled from campaign editor level view.  OMG, DRY.\n\nrequire 'vendor/d3'\n\nmodule.exports = class AnalyticsSubscriptionsView extends RootView\n  id: 'admin-analytics-subscriptions-view'\n  template: template\n\n  events:\n    'click .btn-show-more-cancellations': 'onClickShowMoreCancellations'\n\n  constructor: (options) ->\n    super options\n    @showMoreCancellations = false\n    @resetSubscriptionsData()\n    @refreshData() if me.isAdmin()\n\n  getRenderData: ->\n    context = super()\n    context.analytics = @analytics ? graphs: []\n    context.cancellations = if @showMoreCancellations then @cancellations else (@cancellations ? []).slice(0, 40)\n    context.showMoreCancellations = @showMoreCancellations\n    context.subs = _.cloneDeep(@subs ? []).reverse()\n    context.subscribers = @subscribers ? []\n    context.subscriberCancelled = _.find context.subscribers, (subscriber) -> subscriber.cancel\n    context.subscriberSponsored = _.find context.subscribers, (subscriber) -> subscriber.user?.stripe?.sponsorID\n    context.total = @total ? 0\n    context.monthlyChurn = @monthlyChurn ? 0.0\n    context.monthlyGrowth = @monthlyGrowth ? 0.0\n    context.outstandingCancels = @outstandingCancels ? []\n    context.refreshDataState = @refreshDataState\n    context\n\n  afterRender: ->\n    super()\n    @updateAnalyticsGraphs()\n\n  onClickShowMoreCancellations: (e) ->\n    @showMoreCancellations = true\n    @render?()\n\n  resetSubscriptionsData: ->\n    @analytics = graphs: []\n    @subs = []\n    @total = 0\n    @monthlyChurn = 0.0\n    @monthlyGrowth = 0.0\n    @refreshDataState = 'Fetching dashboard data...'\n\n  refreshData: ->\n    return unless me.isAdmin()\n    @resetSubscriptionsData()\n    @getCancellations (cancellations) =>\n      @cancellations = cancellations\n      @render?()\n      @getOutstandingCancelledSubscriptions cancellations, (outstandingCancels) =>\n        @outstandingCancels = outstandingCancels\n        @getSubscriptions cancellations, (subscriptions) =>\n          @updateAnalyticsGraphData()\n          @render?()\n          @getSubscribers subscriptions, =>\n            @render?()\n\n  updateFetchDataState: (msg) ->\n    @refreshDataState = msg\n    @render?()\n\n  getCancellations: (done) ->\n    cancellations = []\n    @getCancellationEvents (cancelledSubscriptions) =>\n      # Get user objects for cancelled subscriptions\n      userIDs = _.filter(_.map(cancelledSubscriptions, (a) -> a.userID), (b) -> b?)\n      options =\n        url: '/db/user/-/users'\n        method: 'POST'\n        data: {ids: userIDs}\n      options.error = (model, response, options) =>\n        return if @destroyed\n        console.error 'Failed to get cancelled users', response\n      options.success = (cancelledUsers, response, options) =>\n        return if @destroyed\n        userMap = {}\n        userMap[user._id] = user for user in cancelledUsers\n        for cancellation in cancelledSubscriptions when cancellation.userID of userMap\n          cancellation.user = userMap[cancellation.userID]\n          cancellation.level = User.levelFromExp(cancellation.user.points)\n        cancelledSubscriptions.sort (a, b) -> if a.cancel > b.cancel then -1 else 1\n        done(cancelledSubscriptions)\n      @updateFetchDataState 'Fetching cancellations...'\n      @supermodel.addRequestResource('get_cancelled_users', options, 0).load()\n\n  getCancellationEvents: (done) ->\n    cancellationEvents = []\n    earliestEventDate = new Date()\n    earliestEventDate.setUTCMonth(earliestEventDate.getUTCMonth() - 2)\n    earliestEventDate.setUTCDate(earliestEventDate.getUTCDate() - 8)\n    nextBatch = (starting_after, done) =>\n      @updateFetchDataState \"Fetching cancellations #{cancellationEvents.length}...\"\n      options =\n        url: '/db/subscription/-/stripe_events'\n        method: 'POST'\n        data: {options: {limit: 100}}\n      options.data.options.starting_after = starting_after if starting_after\n      options.data.options.type = 'customer.subscription.updated'\n      options.data.options.created = gte: Math.floor(earliestEventDate.getTime() / 1000)\n      options.error = (model, response, options) =>\n        return if @destroyed\n        console.error 'Failed to get cancelled events', response\n      options.success = (events, response, options) =>\n        return if @destroyed\n        for event in events.data\n          continue unless event.data?.object?.cancel_at_period_end is true and event.data?.previous_attributes.cancel_at_period_end is false\n          continue unless event.data?.object?.plan?.id is 'basic'\n          continue unless event.data?.object?.id?\n          cancellationEvents.push\n            cancel: new Date(event.created * 1000)\n            customerID: event.data.object.customer\n            start: new Date(event.data.object.start * 1000)\n            subscriptionID: event.data.object.id\n            userID: event.data.object.metadata?.id\n\n        if events.has_more\n          return nextBatch(events.data[events.data.length - 1].id, done)\n        done(cancellationEvents)\n      @supermodel.addRequestResource('get_cancellation_events', options, 0).load()\n    nextBatch null, done\n\n  getOutstandingCancelledSubscriptions: (cancellations, done) ->\n    @updateFetchDataState \"Fetching oustanding cancellations...\"\n    trimmedCancellations = _.map(cancellations, (a) -> _.pick(a, ['customerID', 'subscriptionID']))\n    options =\n      url: '/db/subscription/-/stripe_subscriptions'\n      method: 'POST'\n      data: {subscriptions: trimmedCancellations}\n    options.error = (model, response, options) =>\n      return if @destroyed\n      console.error 'Failed to get outstanding cancellations', response\n    options.success = (subscriptions, response, options) =>\n      return if @destroyed\n      outstandingCancelledSubscriptions = []\n      for subscription in subscriptions\n        continue unless subscription?.cancel_at_period_end\n        outstandingCancelledSubscriptions.push\n          cancel: new Date(subscription.canceled_at * 1000)\n          customerID: subscription.customerID\n          start: new Date(subscription.start * 1000)\n          subscriptionID: subscription.id\n          userID: subscription.metadata?.id\n      done(outstandingCancelledSubscriptions)\n    @supermodel.addRequestResource('get_outstanding_cancelled_subscriptions', options, 0).load()\n\n  getSubscribers: (subscriptions, done) ->\n    # console.log 'getSubscribers', subscriptions.length\n    @updateFetchDataState \"Fetching recent subscribers...\"\n    @render?()\n    maxSubscribers = 40\n\n    subscribers = _.filter subscriptions, (a) -> a.userID?\n    subscribers.sort (a, b) -> if a.start > b.start then -1 else 1\n    subscribers = subscribers.slice(0, maxSubscribers)\n    subscriberUserIDs = _.map subscribers, (a) -> a.userID\n\n    options =\n      url: '/db/subscription/-/subscribers'\n      method: 'POST'\n      data: {ids: subscriberUserIDs}\n    options.error = (model, response, options) =>\n      return if @destroyed\n      console.error 'Failed to get subscribers', response\n    options.success = (userMap, response, options) =>\n      return if @destroyed\n      for subscriber in subscribers\n        continue unless subscriber.userID of userMap\n        subscriber.user = userMap[subscriber.userID]\n        subscriber.level = User.levelFromExp subscriber.user.points\n        if hero = subscriber.user.heroConfig?.thangType\n          subscriber.hero = _.invert(ThangType.heroes)[hero]\n      @subscribers = subscribers\n      done()\n    @supermodel.addRequestResource('get_subscribers', options, 0).load()\n\n  getSubscriptions: (cancellations=[], done) ->\n    @getInvoices (invoices) =>\n      subMap = {}\n      for invoice in invoices\n        subID = invoice.subscriptionID\n        if subID of subMap\n          subMap[subID].first = new Date(invoice.date)\n        else\n          subMap[subID] =\n            first: new Date(invoice.date)\n            last: new Date(invoice.date)\n            customerID: invoice.customerID\n        subMap[subID].userID = invoice.userID if invoice.userID\n\n      @getSponsors (sponsors) =>\n        @getRecipientSubscriptions sponsors, (recipientSubscriptions) =>\n          for subscription in recipientSubscriptions\n            subMap[subscription.id] =\n              first: new Date(subscription.start * 1000)\n            subMap[subscription.id].userID = subscription.metadata.id if subscription.metadata?.id?\n            if subscription.cancel_at_period_end\n              subMap[subscription.id].cancel = new Date(subscription.canceled_at * 1000)\n              subMap[subscription.id].end = new Date(subscription.current_period_end * 1000)\n\n          subs = []\n          for subID of subMap\n            sub =\n              customerID: subMap[subID].customerID\n              start: subMap[subID].first\n              subscriptionID: subID\n            sub.cancel = subMap[subID].cancel if subMap[subID].cancel\n            oneMonthAgo = new Date()\n            oneMonthAgo.setUTCMonth(oneMonthAgo.getUTCMonth() - 1)\n            if subMap[subID].end?\n              sub.end = subMap[subID].end\n            else if subMap[subID].last < oneMonthAgo\n              sub.end = subMap[subID].last\n              sub.end.setUTCMonth(sub.end.getUTCMonth() + 1)\n            sub.userID = subMap[subID].userID if subMap[subID].userID\n            subs.push sub\n\n          subDayMap = {}\n          for sub in subs\n            startDay = sub.start.toISOString().substring(0, 10)\n            subDayMap[startDay] ?= {}\n            subDayMap[startDay]['start'] ?= 0\n            subDayMap[startDay]['start']++\n            if endDay = sub?.end?.toISOString().substring(0, 10)\n              subDayMap[endDay] ?= {}\n              subDayMap[endDay]['end'] ?= 0\n              subDayMap[endDay]['end']++\n            for cancellation in cancellations\n              if cancellation.subscriptionID is sub.subscriptionID\n                sub.cancel = cancellation.cancel\n                cancelDay = cancellation.cancel.toISOString().substring(0, 10)\n                subDayMap[cancelDay] ?= {}\n                subDayMap[cancelDay]['cancel'] ?= 0\n                subDayMap[cancelDay]['cancel']++\n                break\n\n          today = new Date().toISOString().substring(0, 10)\n          for day of subDayMap\n            continue if day > today\n            @subs.push\n              day: day\n              started: subDayMap[day]['start'] or 0\n              cancelled: subDayMap[day]['cancel'] or 0\n              ended: subDayMap[day]['end'] or 0\n\n          @subs.sort (a, b) -> a.day.localeCompare(b.day)\n          cancelledThisMonth = 0\n          totalLastMonth = 0\n          for sub, i in @subs\n            @total += sub.started\n            @total -= sub.ended\n            sub.total = @total\n            cancelledThisMonth += sub.cancelled if @subs.length - i < 31\n            totalLastMonth = @total if @subs.length - i is 31\n          @monthlyChurn = cancelledThisMonth / totalLastMonth * 100.0 if totalLastMonth > 0\n          if @subs.length > 30 and @subs[@subs.length - 31].total > 0\n            startMonthTotal = @subs[@subs.length - 31].total\n            endMonthTotal = @subs[@subs.length - 1].total\n            @monthlyGrowth = (endMonthTotal / startMonthTotal - 1) * 100\n          done(subs)\n\n  getInvoices: (done) ->\n    invoices = {}\n\n    addInvoice = (invoice) =>\n      return unless invoice.paid\n      return unless invoice.subscription\n      return unless invoice.total > 0\n      return unless invoice.lines?.data?[0]?.plan?.id is 'basic'\n      invoices[invoice.id] =\n        customerID: invoice.customer\n        subscriptionID: invoice.subscription\n        date: new Date(invoice.date * 1000)\n      invoices[invoice.id].userID = invoice.lines.data[0].metadata.id if invoice.lines?.data?[0]?.metadata?.id\n\n    getLiveInvoices = (ending_before, done) =>\n\n      nextBatch = (ending_before, done) =>\n        @updateFetchDataState \"Fetching invoices #{Object.keys(invoices).length}...\"\n        options =\n          url: '/db/subscription/-/stripe_invoices'\n          method: 'POST'\n          data: {options: {ending_before: ending_before, limit: 100}}\n        options.error = (model, response, options) =>\n          return if @destroyed\n          console.error 'Failed to get live invoices', response\n        options.success = (invoiceData, response, options) =>\n          return if @destroyed\n          addInvoice(invoice) for invoice in invoiceData.data\n          if invoiceData.has_more\n            return nextBatch(invoiceData.data[0].id, done)\n          else\n            invoices = (invoice for invoiceID, invoice of invoices)\n            invoices.sort (a, b) -> if a.date > b.date then -1 else 1\n            return done(invoices)\n        @supermodel.addRequestResource('get_live_invoices', options, 0).load()\n\n      nextBatch ending_before, done\n\n    getAnalyticsInvoices = (done) =>\n      @updateFetchDataState \"Fetching invoices #{Object.keys(invoices).length}...\"\n      options =\n        url: '/db/analytics.stripe.invoice/-/all'\n        method: 'GET'\n      options.error = (model, response, options) =>\n        return if @destroyed\n        console.error 'Failed to get analytics stripe invoices', response\n      options.success = (docs, response, options) =>\n        return if @destroyed\n        docs.sort (a, b) -> b.date - a.date\n        addInvoice(doc.properties) for doc in docs\n        getLiveInvoices(docs[0]._id, done)\n      @supermodel.addRequestResource('get_analytics_invoices', options, 0).load()\n\n    getAnalyticsInvoices(done)\n\n  getRecipientSubscriptions: (sponsors, done) ->\n    @updateFetchDataState \"Fetching recipient subscriptions...\"\n    subscriptionsToFetch = []\n    for user in sponsors\n      for recipient in user.stripe?.recipients\n        subscriptionsToFetch.push\n          customerID: user.stripe.customerID\n          subscriptionID: recipient.subscriptionID\n    return done([]) if _.isEmpty subscriptionsToFetch\n    options =\n      url: '/db/subscription/-/stripe_subscriptions'\n      method: 'POST'\n      data: {subscriptions: subscriptionsToFetch}\n    options.error = (model, response, options) =>\n      return if @destroyed\n      console.error 'Failed to get recipient subscriptions', response\n    options.success = (subscriptions, response, options) =>\n      return if @destroyed\n      done(subscriptions)\n    @supermodel.addRequestResource('get_recipient_subscriptions', options, 0).load()\n\n  getSponsors: (done) ->\n    @updateFetchDataState \"Fetching sponsors...\"\n    options =\n      url: '/db/user/-/sub_sponsors'\n      method: 'POST'\n    options.error = (model, response, options) =>\n      return if @destroyed\n      console.error 'Failed to get sponsors', response\n    options.success = (sponsors, response, options) =>\n      return if @destroyed\n      done(sponsors)\n    @supermodel.addRequestResource('get_sponsors', options, 0).load()\n\n  updateAnalyticsGraphData: ->\n    # console.log 'updateAnalyticsGraphData'\n    # Build graphs based on available @analytics data\n    # Currently only one graph\n    @analytics.graphs = []\n\n    return unless @subs?.length > 0\n\n    @addGraphData(60)\n    @addGraphData(180, true)\n\n  addGraphData: (timeframeDays, skipCancelled=false) ->\n    graph = {graphID: 'total-subs', lines: []}\n\n    # TODO: Where should this metadata live?\n    # TODO: lineIDs assumed to be unique across graphs\n    totalSubsID = 'total-subs'\n    startedSubsID = 'started-subs'\n    cancelledSubsID = 'cancelled-subs'\n    netSubsID = 'net-subs'\n    averageNewID = 'average-new'\n    lineMetadata = {}\n    lineMetadata[totalSubsID] =\n      description: 'Total Active Subscriptions'\n      color: 'green'\n      strokeWidth: 1\n    lineMetadata[startedSubsID] =\n      description: 'New Subscriptions'\n      color: 'blue'\n      strokeWidth: 1\n    lineMetadata[cancelledSubsID] =\n      description: 'Cancelled Subscriptions'\n      color: 'red'\n      strokeWidth: 1\n    lineMetadata[netSubsID] =\n      description: '7-day Average Net Subscriptions (started - cancelled)'\n      color: 'black'\n      strokeWidth: 4\n    lineMetadata[averageNewID] =\n      description: '7-day Average New Subscriptions'\n      color: 'black'\n      strokeWidth: 4\n\n    days = (sub.day for sub in @subs)\n    if days.length > 0\n      currentIndex = 0\n      currentDay = days[currentIndex]\n      currentDate = new Date(currentDay + \"T00:00:00.000Z\")\n      lastDay = days[days.length - 1]\n      while currentDay isnt lastDay\n        days.splice currentIndex, 0, currentDay if days[currentIndex] isnt currentDay\n        currentIndex++\n        currentDate.setUTCDate(currentDate.getUTCDate() + 1)\n        currentDay = currentDate.toISOString().substr(0, 10)\n\n    ## Totals\n\n    # Build line data\n    levelPoints = []\n    for sub, i in @subs\n      levelPoints.push\n        x: i\n        y: sub.total\n        day: sub.day\n        pointID: \"#{totalSubsID}#{i}\"\n        values: []\n\n    # Ensure points for each day\n    for day, i in days\n      if levelPoints.length <= i or levelPoints[i].day isnt day\n        prevY = if i > 0 then levelPoints[i - 1].y else 0.0\n        levelPoints.splice i, 0,\n          y: prevY\n          day: day\n          values: []\n      levelPoints[i].x = i\n      levelPoints[i].pointID = \"#{totalSubsID}#{i}\"\n\n    levelPoints.splice(0, levelPoints.length - timeframeDays) if levelPoints.length > timeframeDays\n\n    graph.lines.push\n      lineID: totalSubsID\n      enabled: true\n      points: levelPoints\n      description: lineMetadata[totalSubsID].description\n      lineColor: lineMetadata[totalSubsID].color\n      strokeWidth: lineMetadata[totalSubsID].strokeWidth\n      min: 0\n      max: d3.max(@subs, (d) -> d.total)\n\n    ## Started\n\n    # Build line data\n    levelPoints = []\n    for sub, i in @subs\n      levelPoints.push\n        x: i\n        y: sub.started\n        day: sub.day\n        pointID: \"#{startedSubsID}#{i}\"\n        values: []\n\n    # Ensure points for each day\n    for day, i in days\n      if levelPoints.length <= i or levelPoints[i].day isnt day\n        prevY = if i > 0 then levelPoints[i - 1].y else 0.0\n        levelPoints.splice i, 0,\n          y: prevY\n          day: day\n          values: []\n      levelPoints[i].x = i\n      levelPoints[i].pointID = \"#{startedSubsID}#{i}\"\n\n    levelPoints.splice(0, levelPoints.length - timeframeDays) if levelPoints.length > timeframeDays\n\n    graph.lines.push\n      lineID: startedSubsID\n      enabled: true\n      points: levelPoints\n      description: lineMetadata[startedSubsID].description\n      lineColor: lineMetadata[startedSubsID].color\n      strokeWidth: lineMetadata[startedSubsID].strokeWidth\n      min: 0\n      max: d3.max(@subs[-timeframeDays..], (d) -> d.started + 2)\n\n    if skipCancelled\n\n      ## 7-Day average started\n\n      # Build line data\n      levelPoints = []\n      sevenStarts = []\n      for sub, i in @subs\n        average = 0\n        sevenStarts.push sub.started\n        if sevenStarts.length > 7\n          sevenStarts.shift()\n        if sevenStarts.length is 7\n          average = sevenStarts.reduce((a, b) -> a + b) / sevenStarts.length\n        levelPoints.push\n          x: i\n          y: average\n          day: sub.day\n          pointID: \"#{averageNewID}#{i}\"\n          values: []\n\n      # Ensure points for each day\n      for day, i in days\n        if levelPoints.length <= i or levelPoints[i].day isnt day\n          prevY = if i > 0 then levelPoints[i - 1].y else 0.0\n          levelPoints.splice i, 0,\n            y: prevY\n            day: day\n            values: []\n        levelPoints[i].x = i\n        levelPoints[i].pointID = \"#{averageNewID}#{i}\"\n\n      levelPoints.splice(0, levelPoints.length - timeframeDays) if levelPoints.length > timeframeDays\n\n      graph.lines.push\n        lineID: averageNewID\n        enabled: true\n        points: levelPoints\n        description: lineMetadata[averageNewID].description\n        lineColor: lineMetadata[averageNewID].color\n        strokeWidth: lineMetadata[averageNewID].strokeWidth\n        min: 0\n        max: d3.max(@subs[-timeframeDays..], (d) -> d.started + 2)\n\n    else\n\n      ## Cancelled\n\n      # Build line data\n      levelPoints = []\n      for sub, i in @subs\n        levelPoints.push\n          x: @subs.length - 30 + i\n          y: sub.cancelled\n          day: sub.day\n          pointID: \"#{cancelledSubsID}#{@subs.length - 30 + i}\"\n          values: []\n\n      # Ensure points for each day\n      for day, i in days\n        if levelPoints.length <= i or levelPoints[i].day isnt day\n          prevY = if i > 0 then levelPoints[i - 1].y else 0.0\n          levelPoints.splice i, 0,\n            y: prevY\n            day: day\n            values: []\n        levelPoints[i].x = i\n        levelPoints[i].pointID = \"#{cancelledSubsID}#{i}\"\n\n      levelPoints.splice(0, levelPoints.length - timeframeDays) if levelPoints.length > timeframeDays\n\n      graph.lines.push\n        lineID: cancelledSubsID\n        enabled: true\n        points: levelPoints\n        description: lineMetadata[cancelledSubsID].description\n        lineColor: lineMetadata[cancelledSubsID].color\n        strokeWidth: lineMetadata[cancelledSubsID].strokeWidth\n        min: 0\n        max: d3.max(@subs[-timeframeDays..], (d) -> d.started + 2)\n\n      ## 7-Day Net Subs\n\n      # Build line data\n      levelPoints = []\n      sevenNets = []\n      for sub, i in @subs\n        net = 0\n        sevenNets.push sub.started - sub.cancelled\n        if sevenNets.length > 7\n          sevenNets.shift()\n        if sevenNets.length is 7\n          net = sevenNets.reduce((a, b) -> a + b) / 7\n        levelPoints.push\n          x: i\n          y: net\n          day: sub.day\n          pointID: \"#{netSubsID}#{i}\"\n          values: []\n\n      # Ensure points for each day\n      for day, i in days\n        if levelPoints.length <= i or levelPoints[i].day isnt day\n          prevY = if i > 0 then levelPoints[i - 1].y else 0.0\n          levelPoints.splice i, 0,\n            y: prevY\n            day: day\n            values: []\n        levelPoints[i].x = i\n        levelPoints[i].pointID = \"#{netSubsID}#{i}\"\n\n      levelPoints.splice(0, levelPoints.length - timeframeDays) if levelPoints.length > timeframeDays\n\n      graph.lines.push\n        lineID: netSubsID\n        enabled: true\n        points: levelPoints\n        description: lineMetadata[netSubsID].description\n        lineColor: lineMetadata[netSubsID].color\n        strokeWidth: lineMetadata[netSubsID].strokeWidth\n        min: 0\n        max: d3.max(@subs[-timeframeDays..], (d) -> d.started + 2)\n\n    @analytics.graphs.push(graph)\n\n  updateAnalyticsGraphs: ->\n    # Build d3 graphs\n    return unless @analytics?.graphs?.length > 0\n    containerSelector = '.line-graph-container'\n    # console.log 'updateAnalyticsGraphs', containerSelector, @analytics.graphs\n\n    margin = 20\n    keyHeight = 20\n    xAxisHeight = 20\n    yAxisWidth = 40\n    containerWidth = $(containerSelector).width()\n    containerHeight = $(containerSelector).height()\n\n    for graph in @analytics.graphs\n      graphLineCount = _.reduce graph.lines, ((sum, item) -> if item.enabled then sum + 1 else sum), 0\n      svg = d3.select(containerSelector).append(\"svg\")\n        .attr(\"width\", containerWidth)\n        .attr(\"height\", containerHeight)\n      width = containerWidth - margin * 2 - yAxisWidth * 2\n      height = containerHeight - margin * 2 - xAxisHeight - keyHeight * graphLineCount\n      currentLine = 0\n      for line in graph.lines\n        continue unless line.enabled\n        xRange = d3.scale.linear().range([0, width]).domain([d3.min(line.points, (d) -> d.x), d3.max(line.points, (d) -> d.x)])\n        yRange = d3.scale.linear().range([height, 0]).domain([line.min, line.max])\n\n        # x-Axis\n        if currentLine is 0\n          startDay = new Date(line.points[0].day)\n          endDay = new Date(line.points[line.points.length - 1].day)\n          xAxisRange = d3.time.scale()\n            .domain([startDay, endDay])\n            .range([0, width])\n          xAxis = d3.svg.axis()\n            .scale(xAxisRange)\n          svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .call(xAxis)\n            .selectAll(\"text\")\n            .attr(\"dy\", \".35em\")\n            .attr(\"transform\", \"translate(\" + (margin + yAxisWidth) + \",\" + (height + margin) + \")\")\n            .style(\"text-anchor\", \"start\")\n\n        if line.lineID is 'started-subs'\n          # Horizontal guidelines\n          marks = (Math.round(i * line.max / 5) for i in [1...5])\n          svg.selectAll(\".line\")\n            .data(marks)\n            .enter()\n            .append(\"line\")\n            .attr(\"x1\", margin + yAxisWidth * 2)\n            .attr(\"y1\", (d) -> margin + yRange(d))\n            .attr(\"x2\", margin + yAxisWidth * 2 + width)\n            .attr(\"y2\", (d) -> margin + yRange(d))\n            .attr(\"stroke\", line.lineColor)\n            .style(\"opacity\", \"0.5\")\n\n        if currentLine < 2\n          # y-Axis\n          yAxisRange = d3.scale.linear().range([height, 0]).domain([line.min, line.max])\n          yAxis = d3.svg.axis()\n            .scale(yRange)\n            .orient(\"left\")\n          svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .attr(\"transform\", \"translate(\" + (margin + yAxisWidth * currentLine) + \",\" + margin + \")\")\n            .style(\"color\", line.lineColor)\n            .call(yAxis)\n            .selectAll(\"text\")\n            .attr(\"y\", 0)\n            .attr(\"x\", 0)\n            .attr(\"fill\", line.lineColor)\n            .style(\"text-anchor\", \"start\")\n\n        # Key\n        svg.append(\"line\")\n          .attr(\"x1\", margin)\n          .attr(\"y1\", margin + height + xAxisHeight + keyHeight * currentLine + keyHeight / 2)\n          .attr(\"x2\", margin + 40)\n          .attr(\"y2\", margin + height + xAxisHeight + keyHeight * currentLine + keyHeight / 2)\n          .attr(\"stroke\", line.lineColor)\n          .attr(\"class\", \"key-line\")\n        svg.append(\"text\")\n          .attr(\"x\", margin + 40 + 10)\n          .attr(\"y\", margin + height + xAxisHeight + keyHeight * currentLine + (keyHeight + 10) / 2)\n          .attr(\"fill\", if line.lineColor is 'gold' then 'orange' else line.lineColor)\n          .attr(\"class\", \"key-text\")\n          .text(line.description)\n\n        # Path and points\n        svg.selectAll(\".circle\")\n          .data(line.points)\n          .enter()\n          .append(\"circle\")\n          .attr(\"transform\", \"translate(\" + (margin + yAxisWidth * 2) + \",\" + margin + \")\")\n          .attr(\"cx\", (d) -> xRange(d.x))\n          .attr(\"cy\", (d) -> yRange(d.y))\n          .attr(\"r\", 2)\n          .attr(\"fill\", line.lineColor)\n          .attr(\"stroke-width\", 1)\n          .attr(\"class\", \"graph-point\")\n          .attr(\"data-pointid\", (d) -> \"#{line.lineID}#{d.x}\")\n        d3line = d3.svg.line()\n          .x((d) -> xRange(d.x))\n          .y((d) -> yRange(d.y))\n          .interpolate(\"linear\")\n        svg.append(\"path\")\n          .attr(\"d\", d3line(line.points))\n          .attr(\"transform\", \"translate(\" + (margin + yAxisWidth * 2) + \",\" + margin + \")\")\n          .style(\"stroke-width\", line.strokeWidth)\n          .style(\"stroke\", line.lineColor)\n          .style(\"fill\", \"none\")\n        currentLine++\n"]}