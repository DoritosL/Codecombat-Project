{"version":3,"sources":["app/templates/editor/fork-modal.jade","app/views/editor/ForkModal.coffee"],"names":[],"mappings":"AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;;ACAA;EAAA;;;AAAA,YAAY,QAAQ,sBAAR;;AACZ,WAAW,QAAQ,6BAAR;;AACX,QAAQ,QAAQ,YAAR;;AAER,MAAM,CAAC,OAAP,GAAuB;;;sBACrB,KAAI;;sBACJ,WAAU;;sBACV,UAAS;;sBAET,SACE;IAAA,oCAAoC,WAApC;IACA,eAAe,WADf;;;EAGW,mBAAC,OAAD;IACX,2CAAM,OAAN;IACA,IAAC,WAAD,GAAc,OAAO,CAAC;IACtB,IAAC,MAAD,GAAS,OAAO,CAAC;IACjB,IAAC,WAAD,GAAc,IAAC,MAAK,CAAC;EAJV;;sBAMb,YAAW,SAAC,CAAD;AACT;IAAA,CAAC,CAAC,cAAF;IACA,IAAC,YAAD;IACA,KAAK,CAAC,eAAN,CAAsB,IAAC,IAAvB;IACA,WAAe,QAAC,WAAD,CAAY,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,EAAf,EAAmB,IAAC,MAAK,CAAC,UAA1B,CAAZ;IACf,QAAQ,CAAC,KAAT,CAAe,KAAf;IACA,QAAQ,CAAC,KAAT,CAAe,SAAf;IACA,QAAQ,CAAC,KAAT,CAAe,SAAf;IACA,QAAQ,CAAC,KAAT,CAAe,SAAf;IACA,QAAQ,CAAC,KAAT,CAAe,UAAf;IACA,QAAQ,CAAC,KAAT,CAAe,QAAf;IACA,QAAQ,CAAC,KAAT,CAAe,MAAf;IACA,QAAQ,CAAC,KAAT,CAAe,cAAf;IACA,QAAQ,CAAC,GAAT,CAAa,eAAb,EAA8B,iBAAc,CAAC,IAAC,MAAK,CAAC,GAAP,CAAW,MAAX,CAAD,CAA5C;IACA,QAAQ,CAAC,GAAT,CAAa,MAAb,EAAqB,IAAC,IAAG,CAAC,IAAL,CAAU,kBAAV,CAA6B,CAAC,GAA9B,EAArB;IACA,IAAG,IAAC,MAAK,CAAC,MAAP,EAAe,CAAC,UAAU,CAAC,WAA9B;MACE,QAAQ,CAAC,GAAT,CAAa,aAAb,EAA4B;QAAC;UAAA,QAAQ,OAAR;UAAiB,QAAQ,EAAE,CAAC,EAA5B;SAAD;OAA5B,EADF;;IAEA,gBAAgB,YAAU,IAAC,WAAX,GAAsB;IACtC,MAAM,QAAQ,CAAC,IAAT,CAAc,IAAd,EAAoB;MAAC,MAAM,MAAP;KAApB;IACN,KAAc,GAAd;AAAA;;IACA,GAAG,CAAC,KAAJ,CAAU;aAAA;QACR,KAAC,YAAD;eACA,KAAK,CAAC,iBAAN,CAAwB,KAAC,IAAG,CAAC,IAAL,CAAU,MAAV,CAAxB,EAA2C,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,YAAf,CAA3C;MAFQ;IAAA,QAAV;WAGA,GAAG,CAAC,OAAJ,CAAY;aAAA;QACV,KAAC,KAAD;eACA,WAAW,CAAC,MAAM,CAAC,QAAnB,CAA4B,gBAAgB,QAAQ,CAAC,GAAT,CAAa,MAAb,CAA5C,EAAkE;UAAC,SAAS,IAAV;SAAlE;MAFU;IAAA,QAAZ;EAvBS;;;;GAf4B","file":"public/javascripts/app/views/editor/ForkModal.js","sourcesContent":["var __templateData = function anonymous(locals\n/**/) {\nvar buf = [];\nvar locals_ = (locals || {}),view = locals_.view;buf.push(\"<div class=\\\"modal-dialog game\\\"><div class=\\\"background-wrapper\\\"><div class=\\\"modal-content\\\"><div class=\\\"modal-header\\\">\");\nif ( view.closeButton)\n{\nbuf.push(\"<div type=\\\"button\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" class=\\\"button close\\\">&times;</div>\");\n}\nbuf.push(\"<h3 data-i18n=\\\"editor.fork_title\\\">Fork New Version</h3></div><div class=\\\"modal-body\\\"><form class=\\\"form\\\"><div class=\\\"form-group\\\"><label for=\\\"model-name\\\" data-i18n=\\\"general.name\\\">Name</label><input id=\\\"fork-model-name\\\" name=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\"/></div></form></div><div class=\\\"modal-body wait secret\\\"><h3 data-i18n=\\\"editor.fork_creating\\\">Creating Fork...</h3><div class=\\\"progress progress-striped active\\\"><div class=\\\"progress-bar\\\"></div></div></div><div class=\\\"modal-footer\\\"><button data-dismiss=\\\"modal\\\" data-i18n=\\\"common.cancel\\\" class=\\\"btn\\\">Cancel</button><button id=\\\"fork-model-confirm-button\\\" data-i18n=\\\"common.save\\\" class=\\\"btn btn-primary\\\">Save</button></div></div></div></div>\");;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","ModalView = require 'views/core/ModalView'\ntemplate = require 'templates/editor/fork-modal'\nforms = require 'core/forms'\n\nmodule.exports = class ForkModal extends ModalView\n  id: 'fork-modal'\n  template: template\n  instant: false\n\n  events:\n    'click #fork-model-confirm-button': 'forkModel'\n    'submit form': 'forkModel'\n\n  constructor: (options) ->\n    super options\n    @editorPath = options.editorPath  # like 'level' or 'thang'\n    @model = options.model\n    @modelClass = @model.constructor\n\n  forkModel: (e) ->\n    e.preventDefault()\n    @showLoading()\n    forms.clearFormAlerts(@$el)\n    newModel = new @modelClass($.extend(true, {}, @model.attributes))\n    newModel.unset '_id'\n    newModel.unset 'version'\n    newModel.unset 'creator'\n    newModel.unset 'created'\n    newModel.unset 'original'\n    newModel.unset 'parent'\n    newModel.unset 'i18n'\n    newModel.unset 'i18nCoverage'\n    newModel.set 'commitMessage', \"Forked from #{@model.get('name')}\"\n    newModel.set 'name', @$el.find('#fork-model-name').val()\n    if @model.schema().properties.permissions\n      newModel.set 'permissions', [access: 'owner', target: me.id]\n    newPathPrefix = \"editor/#{@editorPath}/\"\n    res = newModel.save(null, {type: 'POST'})  # Override PUT so we can trigger postFirstVersion logic\n    return unless res\n    res.error =>\n      @hideLoading()\n      forms.applyErrorsToForm(@$el.find('form'), JSON.parse(res.responseText))\n    res.success =>\n      @hide()\n      application.router.navigate(newPathPrefix + newModel.get('slug'), {trigger: true})\n"]}