{"version":3,"sources":["app/views/editor/PatchesView.coffee"],"names":[],"mappings":";AAAA;EAAA;;;AAAA,WAAW,QAAQ,qBAAR;;AACX,WAAW,QAAQ,0BAAR;;AACX,oBAAoB,QAAQ,+BAAR;;AACpB,aAAa,QAAQ,iBAAR;;AACb,aAAa,QAAQ,cAAR;;AAEb,MAAM,CAAC,OAAP,GAAuB;;;wBACrB,WAAU;;wBACV,YAAW;;wBACX,SAAQ;;wBAER,SACE;IAAA,0BAA0B,wBAA1B;IACA,oBAAoB,gBADpB;;;EAGW,qBAAC,KAAD,EAAS,OAAT;IAAC,IAAC,SAAD;IACZ,6CAAM,OAAN;IACA,IAAC,YAAD;EAFW;;wBAIb,cAAa;IACX,IAAC,eAAD,GAAkB;WAClB,IAAC,QAAD,GAAW,IAAC,MAAK,CAAC,sBAAP;EAFA;;wBAIb,OAAM;IACJ,IAAC,YAAD;IACA,IAAC,QAAD,GAAW,IAAC,MAAK,CAAC,sBAAP,CAA8B,IAAC,OAA/B,EAAuC;MAAC,OAAO,KAAR;KAAvC;IACX,IAAC,WAAU,CAAC,eAAZ,CAA4B,IAAC,QAA7B;WACA,IAAC,SAAD,CAAU,IAAC,QAAX,EAAoB,MAApB,EAA4B,IAAC,gBAA7B;EAJI;;wBAMN,kBAAiB;AACf;IAAA;;AAAO;AAAA;WAAA;;qBAAA,CAAC,CAAC,GAAF,CAAM,SAAN;AAAA;;;IACP,eAAe,UAAU,CAAC,SAAX,CAAqB,GAArB;IACf,IAAqE,YAArE;aAAA,IAAC,WAAU,CAAC,kBAAZ,CAA+B,YAA/B,EAA6C,YAA7C,CAA0D,CAAC,IAA3D;;EAHe;;wBAKjB,gBAAe;AACb;IAAA,IAAI;AACJ;AAAA;;MAAA,KAAK,CAAC,QAAN,GAAiB,UAAU,CAAC,OAAX,CAAmB,KAAK,CAAC,GAAN,CAAU,SAAV,CAAnB;AAAjB;IACA,CAAC,CAAC,OAAF,GAAY,IAAC,QAAO,CAAC;IACrB,CAAC,CAAC;WACF;EALa;;wBAOf,cAAa;IACX,IAAC,IAAG,CAAC,IAAL,CAAU,MAAI,IAAC,OAAf,CAAwB,CAAC,QAAzB,CAAkC,QAAlC;WACA;EAFW;;wBAIb,yBAAwB,SAAC,CAAD;IACtB,IAAC,OAAD,GAAU,EAAE,CAAC,CAAC,MAAJ,CAAW,CAAC,GAAZ;WACV,IAAC,cAAD;EAFsB;;wBAIxB,gBAAe;IACb,IAAC,WAAU,CAAC,aAAZ;IACA,IAAC,KAAD;WACA,IAAC,OAAD;EAHa;;wBAKf,iBAAgB,SAAC,CAAD;AACd;IAAA,MAAM,EAAE,CAAC,CAAC,MAAJ,CAAW,CAAC,OAAZ,CAAoB,YAApB;IACN,QAAQ,CAAC,CAAC,IAAF,CAAO,IAAC,QAAO,CAAC,MAAhB,EAAwB;MAAC,IAAI,GAAG,CAAC,IAAJ,CAAS,UAAT,CAAL;KAAxB;IACR,QAAY,eAAW,KAAX,EAAkB,IAAC,MAAnB;IACZ,IAAC,cAAD,CAAe,KAAf;IACA,IAAC,SAAD,CAAU,KAAV,EAAiB,gBAAjB,EAAmC;aAAG,IAAC,QAAD,CAAS,gBAAT;IAAH,CAAnC;WACA,IAAC,SAAD,CAAU,KAAV,EAAiB,MAAjB,EAAyB;AACvB;MAAA,IAAI;eAAA;iBAAG,KAAC,cAAD;QAAH;MAAA;MACJ,WAAW,CAAX,EAAc,GAAd;aACA,IAAC,cAAD,CAAe,KAAf;IAHuB,CAAzB;EANc;;;;GAhDyB","file":"public/javascripts/app/views/editor/PatchesView.js","sourcesContent":["CocoView = require 'views/core/CocoView'\ntemplate = require 'templates/editor/patches'\nPatchesCollection = require 'collections/PatchesCollection'\nnameLoader = require 'core/NameLoader'\nPatchModal = require './PatchModal'\n\nmodule.exports = class PatchesView extends CocoView\n  template: template\n  className: 'patches-view'\n  status: 'pending'\n\n  events:\n    'change .status-buttons': 'onStatusButtonsChanged'\n    'click .patch-row': 'openPatchModal'\n\n  constructor: (@model, options) ->\n    super(options)\n    @initPatches()\n\n  initPatches: ->\n    @startedLoading = false\n    @patches = @model.fetchPatchesWithStatus()\n\n  load: ->\n    @initPatches()\n    @patches = @model.fetchPatchesWithStatus(@status, {cache: false})\n    @supermodel.trackCollection(@patches)\n    @listenTo @patches, 'sync', @onPatchesLoaded\n\n  onPatchesLoaded: ->\n    ids = (p.get('creator') for p in @patches.models)\n    jqxhrOptions = nameLoader.loadNames ids\n    @supermodel.addRequestResource('user_names', jqxhrOptions).load() if jqxhrOptions\n\n  getRenderData: ->\n    c = super()\n    patch.userName = nameLoader.getName(patch.get('creator')) for patch in @patches.models\n    c.patches = @patches.models\n    c.status\n    c\n\n  afterRender: ->\n    @$el.find(\".#{@status}\").addClass 'active'\n    super()\n\n  onStatusButtonsChanged: (e) ->\n    @status = $(e.target).val()\n    @reloadPatches()\n\n  reloadPatches: ->\n    @supermodel.resetProgress()\n    @load()\n    @render()\n\n  openPatchModal: (e) ->\n    row = $(e.target).closest '.patch-row'\n    patch = _.find @patches.models, {id: row.data('patch-id')}\n    modal = new PatchModal(patch, @model)\n    @openModalView(modal)\n    @listenTo modal, 'accepted-patch', -> @trigger 'accepted-patch'\n    @listenTo modal, 'hide', ->\n      f = => @reloadPatches()\n      setTimeout(f, 400)\n      @stopListening modal\n"]}