{"version":3,"sources":["app/views/editor/level/modals/LoadBranchModal.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/editor/level/modals/LoadBranchModal.js","sourcesContent":["ModalView = require 'views/core/ModalView'\ntemplate = require 'templates/editor/level/modal/load-branch-modal'\nDeltaView = require 'views/editor/DeltaView'\ndeltasLib = require 'core/deltas'\nBranch = require 'models/Branch'\nBranches = require 'collections/Branches'\nLevelComponents = require 'collections/LevelComponents'\nLevelSystems = require 'collections/LevelSystems'\n\n\nmodule.exports = class LoadBranchModal extends ModalView\n  id: 'load-branch-modal'\n  template: template\n  modalWidthPercent: 99\n  events:\n    'click #load-branch-btn': 'onClickLoadBranchButton'\n    'click #unstash-branch-btn': 'onClickUnstashBranchButton'\n    'click #branches-list-group .list-group-item': 'onClickBranch'\n    'click .delete-branch-btn': 'onClickDeleteBranchButton'\n    \n\n  initialize: ({ @components, @systems }) ->\n    # Should be given all loaded, up to date systems and components with existing changes\n    \n    # Load existing branches\n    @branches = new Branches()\n    @branches.fetch({url: '/db/branches'})\n    .then(=>\n      @selectedBranch = @branches.first()\n      \n      # Load any patch target we don't already have\n      fetches = []\n      for branch in @branches.models\n        for patch in branch.get('patches')\n          collection = if patch.target.collection is 'level_component' then @components else @systems\n          model = collection.get(patch.target.id)\n          if not model\n            model = new collection.model({ _id: patch.target.id })\n            fetches.push(model.fetch())\n            model.once 'sync', -> @markToRevert()\n            collection.add(model)\n      return $.when(fetches...)\n      \n    ).then(=>\n\n      # Go through each branch and figure out what their patch statuses are\n      for branch in @branches.models\n        for patch in branch.get('patches')\n          patch.id = _.uniqueId()\n          collection = if patch.target.collection is 'level_component' then @components else @systems\n\n          # make a model that represents what the patch represented when it was made\n          originalChange = collection.get(patch.target.id).clone(false)\n          originalChange.markToRevert()\n          originalChange.applyDelta(patch.delta)\n          \n          # make a model that represents what will change locally\n          currentModel = collection.find (model) -> _.all([\n            model.get('original') is patch.target.original,\n            model.get('version').isLatestMajor\n          ])\n          postLoadChange = currentModel.clone()\n          postLoadChange.markToRevert() # includes whatever local changes we have now\n          \n          toApply = currentModel.clone(false)\n          applied = toApply.applyDelta(patch.delta)\n          if applied\n            postLoadChange.set(toApply.attributes)\n            for key in postLoadChange.keys()\n              if not toApply.has(key)\n                postLoadChange.unset(key)\n            # now postLoadChange has current state -> future state\n          \n          # properties used in rendering and loading\n          _.assign(patch, {\n            # the original target with patch applied\n            originalChange\n            \n            # the current target with local changes removed and patch applied (if successful)\n            # Whether the patch was applied or not, this is how the model will be after loading\n            postLoadChange\n            \n            # whether applying the patch to the current target was successful\n            applied\n            \n            # so we can label this part of the patch as overwriting local changes\n            currentModelHasLocalChanges: currentModel.hasLocalChanges()\n            \n            # so we can label changes being applied to a newer version of the model\n            modelHasChangedSincePatchCreated: originalChange.id isnt currentModel.id\n            \n            # the target model as it was passed into the modal, unchanged\n            currentModel\n          })\n    ).then(=> @render())\n    \n  afterRender: ->\n    super()\n    @renderSelectedBranch()\n\n  insertDeltaView: (model, changeEl, headModel) ->\n    try\n      deltaView = new DeltaView({model: model, headModel, skipPaths: deltasLib.DOC_SKIP_PATHS})\n      @insertSubView(deltaView, $(changeEl))\n      return deltaView\n    catch e\n      console.error 'Couldn\\'t create delta view:', e\n        \n  renderSelectedBranch: ->\n    # insert delta subviews for the selected branch, including the 'headComponent' which shows\n    # what, if any, conflicts the existing branch has with the client's local changes\n    \n    @removeSubView(view) for view in @selectedBranchDeltaViews if @selectedBranchDeltaViews\n    @selectedBranchDeltaViews = []\n    @renderSelectors('#selected-branch-col')\n    return unless @selectedBranch\n    for patch in @selectedBranch.get('patches')\n      originalChangeEl = @$(\".changes-stub[data-patch-id='#{patch.id}'][data-prop='original-change']\")\n      @insertDeltaView(patch.originalChange, originalChangeEl)\n      postLoadChangeEl = @$(\".changes-stub[data-patch-id='#{patch.id}'][data-prop='post-load-change']\")\n      @insertDeltaView(patch.postLoadChange, postLoadChangeEl)\n    \n  onClickBranch: (e) ->\n    $(e.currentTarget).closest('.list-group').find('.active').removeClass('active')\n    $(e.currentTarget).addClass('active')\n    branchCid = $(e.currentTarget).data('branch-cid')\n    @selectedBranch = @branches.get(branchCid)\n    @renderSelectedBranch()\n\n  onClickUnstashBranchButton: (e) ->\n    @loadBranch({deleteBranch: true})\n\n  onClickLoadBranchButton: (e) ->\n    @loadBranch({deleteBranch: false})\n\n  loadBranch: ({deleteBranch}) ->\n    selectedBranch = @$('#branches-list-group .active')\n    branchCid = selectedBranch.data('branch-cid')\n    branch = @branches.get(branchCid)\n    for patch in branch.get('patches')\n      continue if not patch.applied\n      { currentModel, postLoadChange } = patch\n      \n      currentModel.set(postLoadChange.attributes)\n      for key in currentModel.keys()\n        if not postLoadChange.has(key)\n          currentModel.unset(key)\n    if deleteBranch\n      Promise.resolve(branch.destroy()).catch((e) => noty text: 'Failed to delete branch after unstashing', layout: 'topCenter', type: 'error', killer: false)\n    @hide()\n\n  onClickDeleteBranchButton: (e) ->\n    e.preventDefault()\n    e.stopImmediatePropagation()\n    branchCid = $(e.currentTarget).closest('.list-group-item').data('branch-cid')\n    branch = @branches.get(branchCid)\n    return unless confirm('Really delete this branch?')\n    branch.destroy()\n    @branches.remove(branch)\n    if branch is @selectedBranch\n      @selectedBranch = null\n      @renderSelectedBranch()\n    $(e.currentTarget).closest('.list-group-item').remove()\n"]}