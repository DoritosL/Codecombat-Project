{"version":3,"sources":["app/views/editor/level/modals/WorldSelectModal.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/editor/level/modals/WorldSelectModal.js","sourcesContent":["ModalView = require 'views/core/ModalView'\ntemplate = require 'templates/editor/level/modal/world-select-modal'\nSurface = require 'lib/surface/Surface'\nThangType = require 'models/ThangType'\n\nmodule.exports = class WorldSelectModal extends ModalView\n  id: 'world-select-modal'\n  template: template\n  modalWidthPercent: 80\n  cache: false\n\n  subscriptions:\n    'surface:choose-region': 'selectionMade'\n    'surface:choose-point': 'selectionMade'\n\n  events:\n    'click #done-button': 'done'\n\n  shortcuts:\n    'enter': 'done'\n\n  constructor: (options) ->\n    @world = options.world\n    @dataType = options.dataType or 'point'\n    @default = options.default\n    @defaultFromZoom = options.defaultFromZoom\n    @selectionMade = _.debounce(@selectionMade, 300)\n    @supermodel = options.supermodel\n    super()\n\n  getRenderData: (c={}) =>\n    c = super(c)\n    c.selectingPoint = @dataType is 'point'\n    c.flexibleRegion = @dataType is 'region'\n    c\n\n  afterInsert: ->\n    super()\n    @initSurface()\n\n  # surface setup\n\n  initSurface: ->\n    webGLCanvas = @$el.find('.webgl-canvas')\n    normalCanvas = @$el.find('.normal-canvas')\n    canvases = webGLCanvas.add(normalCanvas)\n    canvases.attr('width', currentView.$el.width()*.8-70)\n    canvases.attr('height', currentView.$el.height()*.6)\n    @surface = new Surface @world, normalCanvas, webGLCanvas, {\n      paths: false\n      grid: true\n      navigateToSelection: false\n      choosing: @dataType\n      coords: true\n      thangTypes: @supermodel.getModels(ThangType)\n      showInvisible: true\n    }\n    @surface.playing = false\n    @surface.setWorld @world\n    @surface.camera.zoomTo({x: 262, y: -164}, 1.66, 0)\n    @showDefaults()\n\n  showDefaults: ->\n    # show current point, and zoom to it\n    if @dataType is 'point'\n      if @default? and _.isFinite(@default.x) and _.isFinite(@default.y)\n        @surface.chooser.setPoint(@default)\n        @surface.camera.zoomTo(@surface.camera.worldToSurface(@default), 2)\n\n    else if @defaultFromZoom?\n      @showZoomRegion()\n      surfaceTarget = @surface.camera.worldToSurface(@defaultFromZoom.target)\n      @surface.camera.zoomTo(surfaceTarget, @defaultFromZoom.zoom*0.6)\n\n    else if @default? and _.isFinite(@default[0].x) and _.isFinite(@default[0].y) and _.isFinite(@default[1].x) and _.isFinite(@default[1].y)\n      @surface.chooser.setRegion(@default)\n      @showBoundaryRegion()\n\n  showZoomRegion: ->\n    d = @defaultFromZoom\n    canvasWidth = 924  # Dimensions for canvas player. Need these somewhere.\n    canvasHeight = 589\n    dimensions = {x: canvasWidth/d.zoom, y: canvasHeight/d.zoom}\n    dimensions = @surface.camera.surfaceToWorld(dimensions)\n    width = dimensions.x\n    height = dimensions.y\n    target = d.target\n    region = [\n      {x: target.x - width/2, y: target.y - height/2}\n      {x: target.x + width/2, y: target.y + height/2}\n    ]\n    @surface.chooser.setRegion(region)\n\n  showBoundaryRegion: ->\n    bounds = @surface.camera.normalizeBounds(@default)\n    point = {\n      x: bounds.x + bounds.width / 2\n      y: bounds.y + bounds.height / 2\n    }\n    zoom = 0.8 * (@surface.camera.canvasWidth / bounds.width)\n    @surface.camera.zoomTo(point, zoom)\n\n  # event handlers\n\n  selectionMade: (e) =>\n    e.camera = @surface.camera\n    @lastSelection = e\n\n  done: =>\n    @callback?(@lastSelection)\n    @hide()\n\n  onHidden: ->\n    @surface?.destroy()\n"]}