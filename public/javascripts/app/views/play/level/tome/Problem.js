require.register("views/play/level/tome/Problem", function(exports, require, module) {
var Problem, Range, ace;

ace = require('ace');

Range = ace.require('ace/range').Range;

module.exports = Problem = (function() {
  Problem.prototype.annotation = null;

  Problem.prototype.markerRange = null;

  function Problem(arg) {
    var col, error, isCast, ref, ref1, ref2, ref3, ref4, ref5, userCodeHasChangedSinceLastCast;
    this.aether = arg.aether, this.aetherProblem = arg.aetherProblem, this.ace = arg.ace, isCast = (ref = arg.isCast) != null ? ref : false, this.levelID = arg.levelID, error = arg.error, userCodeHasChangedSinceLastCast = arg.userCodeHasChangedSinceLastCast;
    if (this.aetherProblem) {
      this.annotation = this.buildAnnotationFromAetherProblem(this.aetherProblem);
      if (isCast) {
        ref1 = this.buildMarkerRangesFromAetherProblem(this.aetherProblem), this.lineMarkerRange = ref1.lineMarkerRange, this.textMarkerRange = ref1.textMarkerRange;
      }
      ref2 = this.aetherProblem, this.level = ref2.level, this.range = ref2.range, this.message = ref2.message, this.hint = ref2.hint, this.userInfo = ref2.userInfo;
      ref4 = ((ref3 = this.aetherProblem.range) != null ? ref3[0] : void 0) || {}, this.row = ref4.row, col = ref4.this;
      this.createdBy = 'aether';
    } else {
      if (!userCodeHasChangedSinceLastCast) {
        this.annotation = this.buildAnnotationFromWebDevError(error);
        ref5 = this.buildMarkerRangesFromWebDevError(error), this.lineMarkerRange = ref5.lineMarkerRange, this.textMarkerRange = ref5.textMarkerRange;
      }
      this.level = 'error';
      this.row = error.line;
      this.column = error.column;
      this.message = error.message || 'Unknown Error';
      if (error.line && !userCodeHasChangedSinceLastCast) {
        this.message = ("Line " + (error.line + 1) + ": ") + this.message;
      }
      if (userCodeHasChangedSinceLastCast) {
        this.hint = "This error was generated by old code — Try running your new code first.";
      } else {
        this.hint = void 0;
      }
      this.userInfo = void 0;
      this.createdBy = 'web-dev-iframe';
    }
    if (application.isIPadApp) {
      Backbone.Mediator.publish("problem:problem-created", {
        line: this.annotation.row,
        text: this.annotation.text
      });
    }
  }

  Problem.prototype.isEqual = function(problem) {
    return _.all(['row', 'column', 'level', 'column', 'message', 'hint'], (function(_this) {
      return function(attr) {
        return _this[attr] === problem[attr];
      };
    })(this));
  };

  Problem.prototype.destroy = function() {
    this.removeMarkerRanges();
    if (this.userCodeProblem) {
      return this.userCodeProblem.off();
    }
  };

  Problem.prototype.buildAnnotationFromWebDevError = function(error) {
    return {
      row: error.line,
      column: error.column,
      raw: error.message,
      text: error.message,
      type: 'error',
      createdBy: 'web-dev-iframe'
    };
  };

  Problem.prototype.buildAnnotationFromAetherProblem = function(aetherProblem) {
    var ref, start, text;
    if (!aetherProblem.range) {
      return;
    }
    text = aetherProblem.message.replace(/^Line \d+: /, '');
    start = aetherProblem.range[0];
    return {
      row: start.row,
      column: start.col,
      raw: text,
      text: text,
      type: (ref = this.aetherProblem.level) != null ? ref : 'error',
      createdBy: 'aether'
    };
  };

  Problem.prototype.buildMarkerRangesFromWebDevError = function(error) {
    var lineMarkerRange, textMarkerRange;
    lineMarkerRange = new Range(error.line, 0, error.line, 1);
    lineMarkerRange.start = this.ace.getSession().getDocument().createAnchor(lineMarkerRange.start);
    lineMarkerRange.end = this.ace.getSession().getDocument().createAnchor(lineMarkerRange.end);
    lineMarkerRange.id = this.ace.getSession().addMarker(lineMarkerRange, 'problem-line', 'fullLine');
    textMarkerRange = void 0;
    return {
      lineMarkerRange: lineMarkerRange,
      textMarkerRange: textMarkerRange
    };
  };

  Problem.prototype.buildMarkerRangesFromAetherProblem = function(aetherProblem) {
    var end, lineClazz, lineMarkerRange, ref, start, textClazz, textMarkerRange;
    if (!aetherProblem.range) {
      return {};
    }
    ref = aetherProblem.range, start = ref[0], end = ref[1];
    textClazz = "problem-marker-" + aetherProblem.level;
    textMarkerRange = new Range(start.row, start.col, end.row, end.col);
    textMarkerRange.start = this.ace.getSession().getDocument().createAnchor(textMarkerRange.start);
    textMarkerRange.end = this.ace.getSession().getDocument().createAnchor(textMarkerRange.end);
    textMarkerRange.id = this.ace.getSession().addMarker(textMarkerRange, textClazz, 'text');
    lineClazz = "problem-line";
    lineMarkerRange = new Range(start.row, start.col, end.row, end.col);
    lineMarkerRange.start = this.ace.getSession().getDocument().createAnchor(lineMarkerRange.start);
    lineMarkerRange.end = this.ace.getSession().getDocument().createAnchor(lineMarkerRange.end);
    lineMarkerRange.id = this.ace.getSession().addMarker(lineMarkerRange, lineClazz, 'fullLine');
    return {
      lineMarkerRange: lineMarkerRange,
      textMarkerRange: textMarkerRange
    };
  };

  Problem.prototype.removeMarkerRanges = function() {
    if (this.textMarkerRange) {
      this.ace.getSession().removeMarker(this.textMarkerRange.id);
      this.textMarkerRange.start.detach();
      this.textMarkerRange.end.detach();
    }
    if (this.lineMarkerRange) {
      this.ace.getSession().removeMarker(this.lineMarkerRange.id);
      this.lineMarkerRange.start.detach();
      return this.lineMarkerRange.end.detach();
    }
  };

  return Problem;

})();
});

;
//# sourceMappingURL=/javascripts/app/views/play/level/tome/Problem.js.map