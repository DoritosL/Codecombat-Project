{"version":3,"sources":["app/views/play/level/ThangAvatarView.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/play/level/ThangAvatarView.js","sourcesContent":["CocoView = require 'views/core/CocoView'\ntemplate = require 'templates/play/level/thang_avatar'\nThangType = require 'models/ThangType'\n\nmodule.exports = class ThangAvatarView extends CocoView\n  className: 'thang-avatar-view'\n  template: template\n\n  subscriptions:\n    'tome:problems-updated': 'onProblemsUpdated'\n    'god:new-world-created': 'onNewWorld'\n\n  constructor: (options) ->\n    super options\n    @thang = options.thang\n    @includeName = options.includeName\n    @thangType = @getSpriteThangType()\n    if not @thangType\n      console.error 'Thang avatar view expected a thang type to be provided.'\n      return\n\n    unless @thangType.isFullyLoaded() or @thangType.loading\n      @thangType.fetch()\n\n    # couldn't get the level view to load properly through the supermodel\n    # so just doing it manually this time.\n    @listenTo @thangType, 'sync', @render\n    @listenTo @thangType, 'build-complete', @render\n\n  getSpriteThangType: ->\n    thangs = @supermodel.getModels(ThangType)\n    thangs = (t for t in thangs when t.get('name') is @thang.spriteName)\n    loadedThangs = (t for t in thangs when t.isFullyLoaded())\n    return loadedThangs[0] or thangs[0] # try to return one with all the goods, otherwise a projection\n\n  getRenderData: (context={}) ->\n    context = super context\n    context.thang = @thang\n    options = @thang?.getLankOptions() or {}\n    #options.async = true  # sync builds fail during async builds, and we build HUD version sync\n    context.avatarURL = @thangType.getPortraitSource(options) unless @thangType.loading\n    context.includeName = @includeName\n    context\n\n  setProblems: (problemCount, level) ->\n    badge = @$el.find('.badge.problems').text(if problemCount then 'x' else '')\n    badge.removeClass('error warning info')\n    badge.addClass level if level\n\n  setSharedThangs: (sharedThangCount) ->\n    badge = @$el.find('.badge.shared-thangs').text(if sharedThangCount > 1 then sharedThangCount else '')\n    # TODO: change the alert color based on whether any of those things that aren't us have problems\n    #badge.removeClass('error warning info')\n    #badge.addClass level if level\n\n  setSelected: (selected) ->\n    @$el.toggleClass 'selected', Boolean(selected)\n\n  onProblemsUpdated: (e) ->\n    return unless @thang?.id is e.spell.thang?.thang.id\n    aether = e.spell.thang.castAether\n    myProblems = aether?.getAllProblems() ? []\n    worstLevel = null\n    for level in ['error', 'warning', 'info'] when _.some myProblems, {level: level}\n      worstLevel = level\n      break\n    @setProblems myProblems.length, worstLevel\n\n  onNewWorld: (e) ->\n    @options.thang = @thang = e.world.thangMap[@thang.id] if @thang and e.world.thangMap[@thang.id]\n\n  destroy: ->\n    super()\n"]}