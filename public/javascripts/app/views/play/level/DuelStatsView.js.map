{"version":3,"sources":["app/templates/play/level/duel-stats-view.jade","app/views/play/level/DuelStatsView.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/views/play/level/DuelStatsView.js","sourcesContent":["var __templateData = function anonymous(locals\n/**/) {\nvar buf = [];\nvar locals_ = (locals || {}),view = locals_.view;// iterate view.players\n;(function(){\n  var $$obj = view.players;\n  if ('number' == typeof $$obj.length) {\n\n    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {\n      var player = $$obj[$index];\n\nbuf.push(\"<div\" + (jade.attrs({ \"class\": [(\"player-container team-\" + player.team)] }, {\"class\":true})) + \"><div class=\\\"player-portrait\\\"><div class=\\\"thang-avatar-placeholder\\\"></div></div><div class=\\\"player-info\\\"><div class=\\\"name-and-power\\\">\");\nif ( view.showsPower)\n{\nbuf.push(\"<div class=\\\"player-power\\\"><div class=\\\"power-icon\\\"></div><div class=\\\"power-value\\\"></div></div>\");\n}\nif ( view.showsGold)\n{\nbuf.push(\"<div class=\\\"player-gold\\\"><div class=\\\"gold-icon\\\"></div><div class=\\\"gold-value\\\"></div></div>\");\n}\nbuf.push(\"<div class=\\\"player-name\\\">\" + (jade.escape(null == (jade.interp = player.name || 'Anonymous') ? \"\" : jade.interp)) + \"</div></div><div class=\\\"player-health\\\"><div class=\\\"health-icon\\\"></div><div class=\\\"health-bar-container\\\"><div class=\\\"health-bar\\\"></div></div><div class=\\\"health-value\\\"></div></div></div></div>\");\n    }\n\n  } else {\n    var $$l = 0;\n    for (var $index in $$obj) {\n      $$l++;      var player = $$obj[$index];\n\nbuf.push(\"<div\" + (jade.attrs({ \"class\": [(\"player-container team-\" + player.team)] }, {\"class\":true})) + \"><div class=\\\"player-portrait\\\"><div class=\\\"thang-avatar-placeholder\\\"></div></div><div class=\\\"player-info\\\"><div class=\\\"name-and-power\\\">\");\nif ( view.showsPower)\n{\nbuf.push(\"<div class=\\\"player-power\\\"><div class=\\\"power-icon\\\"></div><div class=\\\"power-value\\\"></div></div>\");\n}\nif ( view.showsGold)\n{\nbuf.push(\"<div class=\\\"player-gold\\\"><div class=\\\"gold-icon\\\"></div><div class=\\\"gold-value\\\"></div></div>\");\n}\nbuf.push(\"<div class=\\\"player-name\\\">\" + (jade.escape(null == (jade.interp = player.name || 'Anonymous') ? \"\" : jade.interp)) + \"</div></div><div class=\\\"player-health\\\"><div class=\\\"health-icon\\\"></div><div class=\\\"health-bar-container\\\"><div class=\\\"health-bar\\\"></div></div><div class=\\\"health-value\\\"></div></div></div></div>\");\n    }\n\n  }\n}).call(this);\n;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}","CocoView = require 'views/core/CocoView'\ntemplate = require 'templates/play/level/duel-stats-view'\nThangAvatarView = require 'views/play/level/ThangAvatarView'\nutils = require 'core/utils'\n\n# TODO:\n# - if a hero is dead, a big indication that they are dead\n# - each hero's current action?\n# - if one player is you, an indicator that it's you?\n# - indication of which team won (not always hero dead--ties and other victory conditions)\n# - army composition or power or attack/defense (for certain levels): experiment with something simple, not like the previous unit list thing\n\nmodule.exports = class DuelStatsView extends CocoView\n  id: 'duel-stats-view'\n  template: template\n\n  subscriptions:\n    'surface:gold-changed': 'onGoldChanged'\n    'god:new-world-created': 'onNewWorld'\n    'god:streaming-world-updated': 'onNewWorld'\n    'surface:frame-changed': 'onFrameChanged'\n\n  constructor: (options) ->\n    super options\n    options.thangs = _.filter options.thangs, 'inThangList'\n    unless options.otherSession\n      options.otherSession = get: (prop) -> {\n        creatorName: $.i18n.t 'ladder.simple_ai'\n        team: if options.session.get('team') is 'humans' then 'ogres' else 'humans'\n        heroConfig: options.session.get('heroConfig')\n      }[prop]\n    @showsGold = options.level.get('slug') in ['wakka-maul']\n    @showsPower = options.level.get('slug') not in ['wakka-maul', 'dueling-grounds', 'cavern-survival', 'multiplayer-treasure-grove']\n    @teamGold = {}\n    @players = (@formatPlayer team for team in ['humans', 'ogres'])\n\n  formatPlayer: (team) ->\n    p = team: team\n    session = _.find [@options.session, @options.otherSession], (s) -> s.get('team') is team\n    p.name = session.get 'creatorName'\n    p.heroThangType = (session.get('heroConfig') ? {}).thangType or '529ffbf1cf1818f2be000001'\n    p.heroID = if team is 'ogres' then 'Hero Placeholder 1' else 'Hero Placeholder'\n    p\n\n  afterRender: ->\n    super()\n    for player in @players\n      @buildAvatar player.heroID, player.team\n    @$el.css 'display', 'flex'  # Show it\n\n  buildAvatar: (heroID, team) ->\n    @avatars ?= {}\n    return if @avatars[team]\n    thang = _.find @options.thangs, id: heroID\n    @avatars[team] = avatar = new ThangAvatarView thang: thang, includeName: false, supermodel: @supermodel\n    @$find(team, '.thang-avatar-placeholder').replaceWith avatar.$el\n    avatar.render()\n\n  onNewWorld: (e) ->\n    @options.thangs = _.filter e.world.thangs, 'inThangList'\n\n  onFrameChanged: (e) ->\n    @update()\n\n  update: ->\n    for player in @players\n      thang = _.find @options.thangs, id: @avatars[player.team].thang.id\n      @updateHealth thang\n    @updatePower() if @showsPower\n\n  updateHealth: (thang) ->\n    $health = @$find thang.team, '.player-health'\n    $health.find('.health-bar').css 'width', Math.max(0, Math.min(100, 100 * thang.health / thang.maxHealth)) + '%'\n    utils.replaceText $health.find('.health-value'), Math.round thang.health\n\n  updatePower: ->\n    # Right now we just display the army cost of all living units as opposed to doing something more sophisticate to measure power.\n    @costTable ?=\n      soldier: 20\n      archer: 25\n      decoy: 25\n      'griffin-rider': 50\n      paladin: 80\n      artillery: 75\n      'arrow-tower': 100\n      palisade: 10\n      peasant: 50\n      thrower: 9\n      scout: 18\n    powers = humans: 0, ogres: 0\n    for thang in @options.thangs when thang.health > 0 and thang.exists\n      powers[thang.team] += @costTable[thang.type] or 0 if powers[thang.team]?\n    for player in @players\n      utils.replaceText @$find(player.team, '.power-value'), powers[player.team]\n\n  $find: (team, selector) ->\n    @$el.find(\".player-container.team-#{team} \" + selector)\n\n  destroy: ->\n    avatar.destroy() for team, avatar of @avatars ? {}\n    super()\n\n  onGoldChanged: (e) ->\n    return unless @showsGold\n    return if @teamGold[e.team] is e.gold\n    @teamGold[e.team] = e.gold\n    utils.replaceText @$find(e.team, '.gold-value'), '' + e.gold\n"]}