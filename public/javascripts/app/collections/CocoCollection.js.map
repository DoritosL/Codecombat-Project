{"version":3,"sources":["app/collections/CocoCollection.coffee"],"names":[],"mappings":";AAAA;EAAA;;;AAAA,YAAY,QAAQ,kBAAR;;AAEZ,MAAM,CAAC,OAAP,GAAuB;;;;;;;2BACrB,SAAQ;;2BACR,QAAO;;2BAEP,aAAY,SAAC,MAAD,EAAS,OAAT;AACV;;MAAA,UAAW;;;MACX,IAAC,SAAS,OAAO,CAAC;;IAClB,IAAG,CAAI,IAAC,MAAR;MACE,OAAO,CAAC,KAAR,CAAc,IAAC,YAAW,CAAC,IAA3B,EAAiC,kDAAjC,EADF;;IAEA,+CAAM,MAAN,EAAc,OAAd;IACA,IAAC,cAAD,CAAe,OAAO,CAAC,OAAvB;IACA,IAAG,OAAO,CAAC,GAAX;MAAoB,IAAC,IAAD,GAAO,OAAO,CAAC,IAAnC;;IACA,IAAC,KAAD,CAAM,MAAN,EAAc;aAAA;AACZ;QAAA,KAAC,OAAD,GAAU;AACV;AAAA;aAAA;;uBAAA,KAAK,CAAC,MAAN,GAAe;AAAf;;MAFY;IAAA,QAAd;IAGA,4CAAqB,CAAE,gBAAvB;MACE,IAAC,aAAD,GAAgB;MAChB,IAAC,GAAD,CAAI,SAAJ,EAAe;eAAG,IAAC,aAAY,CAAC,IAAd,CAAmB,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAtB,EAAnB;MAAH,CAAf,EAFF;;IAGA,IAAG,OAAO,CAAC,WAAX;aACE,IAAC,GAAD,CAAI,MAAJ,EAAY;AACV;AAAA;AAAA;aAAA;;UACE,KAAK,CAAC,WAAN,GAAoB;uBACpB,KAAK,CAAC,cAAN;AAFF;;MADU,CAAZ,EADF;;EAdU;;2BAoBZ,SAAQ;IACC,IAAG,CAAC,CAAC,QAAF,CAAW,IAAC,IAAZ,CAAH;aAAwB,IAAC,KAAzB;KAAA;aAAkC,IAAC,IAAD,GAAlC;;EADD;;2BAGR,QAAO,SAAC,OAAD;;MACL,UAAW;;IACX,IAAG,IAAC,QAAJ;;QACE,OAAO,CAAC,OAAQ;;MAChB,OAAO,CAAC,IAAI,CAAC,OAAb,GAAuB,IAAC,QAAO,CAAC,IAAT,CAAc,GAAd,EAFzB;;IAGA,IAAC,MAAD,GAAS,0CAAM,OAAN;IACT,IAAC,QAAD,GAAW;WACX,IAAC;EAPI;;2BASP,gBAAe,SAAC,OAAD;IAAC,IAAC,WAAD;EAAD;;2BAEf,YAAW;AAAG,WAAO,IAAI,CAAC,SAAL,CAAe,IAAC,OAAD,EAAf;EAAV;;2BAEX,OAAM,SAAC,KAAD;WAAe,YAAQ;aAAA,SAAC,OAAD;eAAa,KAAC,KAAD,CAAM,KAAN,EAAa,OAAb;MAAb;IAAA,QAAR;EAAf;;;;GAxCsC,QAAQ,CAAC","file":"public/javascripts/app/collections/CocoCollection.js","sourcesContent":["CocoModel = require 'models/CocoModel'\n\nmodule.exports = class CocoCollection extends Backbone.Collection\n  loaded: false\n  model: null\n\n  initialize: (models, options) ->\n    options ?= {}\n    @model ?= options.model\n    if not @model\n      console.error @constructor.name, 'does not have a model defined. This will not do!'\n    super(models, options)\n    @setProjection options.project\n    if options.url then @url = options.url\n    @once 'sync', =>\n      @loaded = true\n      model.loaded = true for model in @models\n    if window.application?.testing\n      @fakeRequests = []\n      @on 'request', -> @fakeRequests.push jasmine.Ajax.requests.mostRecent()\n    if options.saveBackups\n      @on 'sync', ->\n        for model in @models\n          model.saveBackups = true\n          model.loadFromBackup()\n\n  getURL: ->\n    return if _.isString @url then @url else @url()\n\n  fetch: (options) ->\n    options ?= {}\n    if @project\n      options.data ?= {}\n      options.data.project = @project.join(',')\n    @jqxhr = super(options)\n    @loading = true\n    @jqxhr\n\n  setProjection: (@project) ->\n\n  stringify: -> return JSON.stringify(@toJSON())\n  \n  wait: (event) -> new Promise((resolve) => @once(event, resolve))\n"]}