{"version":3,"sources":["app/models/Classroom.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/models/Classroom.js","sourcesContent":["CocoModel = require './CocoModel'\nschema = require 'schemas/models/classroom.schema'\nutils = require '../core/utils'\nUser = require 'models/User'\n\nmodule.exports = class Classroom extends CocoModel\n  @className: 'Classroom'\n  @schema: schema\n  urlRoot: '/db/classroom'\n\n  initialize: () ->\n    @listenTo @, 'change:aceConfig', @capitalizeLanguageName\n    super(arguments...)\n\n  parse: (obj) ->\n    if obj._id\n      # It's just the classroom object\n      return obj\n    else\n      # It's a compound response with other stuff too\n      @owner = new User(obj.owner)\n      return obj.data\n\n  capitalizeLanguageName: ->\n    language = @get('aceConfig')?.language\n    @capitalLanguage = utils.capitalLanguages[language]\n\n  joinWithCode: (code, opts) ->\n    options = {\n      url: @urlRoot + '/~/members'\n      type: 'POST'\n      data: { code: code }\n      success: => @trigger 'join:success'\n      error: => @trigger 'join:error'\n    }\n    _.extend options, opts\n    @fetch(options)\n\n  fetchByCode: (code, opts) ->\n    options = {\n      url: _.result(@, 'url')\n      data: { code: code, \"with-owner\": true }\n    }\n    _.extend options, opts\n    @fetch(options)\n\n  getLevelNumber: (levelID, defaultNumber) ->\n    unless @levelNumberMap\n      @levelNumberMap = {}\n      language = @get('aceConfig')?.language\n      for course in @get('courses') ? []\n        levels = []\n        for level in course.levels when level.original\n          continue if language? and level.primerLanguage is language\n          levels.push({key: level.original, practice: level.practice ? false})\n        _.assign(@levelNumberMap, utils.createLevelNumberMap(levels))\n    @levelNumberMap[levelID] ? defaultNumber\n\n  removeMember: (userID, opts) ->\n    options = {\n      url: _.result(@, 'url') + '/members'\n      type: 'DELETE'\n      data: { userID: userID }\n    }\n    _.extend options, opts\n    @fetch(options)\n\n  setStudentPassword: (student, password, options) ->\n    classroomID = @.id\n    $.ajax {\n      url: \"/db/classroom/#{classroomID}/members/#{student.id}/reset-password\"\n      method: 'POST'\n      data: { password }\n      success: => @trigger 'save-password:success'\n      error: (response) => @trigger 'save-password:error', response.responseJSON\n    }\n\n  getLevels: (options={}) ->\n    # options: courseID, withoutLadderLevels, projectLevels\n    Levels = require 'collections/Levels'\n    courses = @get('courses')\n    return new Levels() unless courses\n    levelObjects = []\n    for course in courses\n      if options.courseID and options.courseID isnt course._id\n        continue\n      levelObjects.push(course.levels)\n    levels = new Levels(_.flatten(levelObjects))\n    language = @get('aceConfig')?.language\n    levels.remove(levels.filter((level) => level.get('primerLanguage') is language)) if language\n    if options.withoutLadderLevels\n      levels.remove(levels.filter((level) -> level.isLadder()))\n    if options.projectLevels\n      levels.remove(levels.filter((level) -> level.get('shareable') isnt 'project'))\n    return levels\n\n  getLadderLevel: (courseID) ->\n    Levels = require 'collections/Levels'\n    courses = @get('courses')\n    course = _.findWhere(courses, {_id: courseID})\n    return unless course\n    levels = new Levels(course.levels)\n    return levels.find (l) -> l.isLadder()\n\n  getProjectLevel: (courseID) ->\n    Levels = require 'collections/Levels'\n    courses = @get('courses')\n    course = _.findWhere(courses, {_id: courseID})\n    return unless course\n    levels = new Levels(course.levels)\n    return levels.find (l) -> l.isProject()\n\n  statsForSessions: (sessions, courseID) ->\n    return null unless sessions\n    sessions = sessions.models or sessions\n    arena = @getLadderLevel(courseID)\n    project = @getProjectLevel(courseID)\n    courseLevels = @getLevels({courseID: courseID, withoutLadderLevels: true})\n    levelSessionMap = {}\n    levelSessionMap[session.get('level').original] = session for session in sessions\n    currentIndex = -1\n    lastStarted = null\n    levelsTotal = 0\n    levelsLeft = 0\n    lastPlayed = null\n    playtime = 0\n    levels = []\n    for level, index in courseLevels.models\n      levelsTotal++ unless level.get('practice')\n      complete = false\n      if session = levelSessionMap[level.get('original')]\n        complete = session.get('state').complete ? false\n        playtime += session.get('playtime') ? 0\n        lastPlayed = level\n        lastPlayedNumber = index + 1\n        if complete\n          currentIndex = index\n        else\n          lastStarted = level\n          levelsLeft++ unless level.get('practice')\n      else if not level.get('practice')\n        levelsLeft++\n      levels.push\n        practice: level.get('practice') ? false\n        complete: complete\n    lastPlayed = lastStarted ? lastPlayed\n    needsPractice = false\n    nextIndex = 0\n    if currentIndex >= 0\n      currentLevel = courseLevels.models[currentIndex]\n      currentPlaytime = levelSessionMap[currentLevel.get('original')]?.get('playtime') ? 0\n      needsPractice = utils.needsPractice(currentPlaytime, currentLevel.get('practiceThresholdMinutes'))\n      nextIndex = utils.findNextLevel(levels, currentIndex, needsPractice)\n    nextLevel = courseLevels.models[nextIndex]\n    nextLevel ?= _.find courseLevels.models, (level) -> not levelSessionMap[level.get('original')]?.get('state')?.complete\n\n    lastPlayedNumber ?= 1\n    if courseLevels.length >= 1 and lastPlayedNumber < courseLevels.length\n      lastPlayedNumber = @getLevelNumber(courseLevels.models[lastPlayedNumber - 1].get('original'), lastPlayedNumber)\n    stats =\n      levels:\n        size: levelsTotal\n        left: levelsLeft\n        done: levelsLeft is 0\n        numDone: levelsTotal - levelsLeft\n        pctDone: (100 * (levelsTotal - levelsLeft) / levelsTotal).toFixed(1) + '%'\n        lastPlayed: lastPlayed\n        lastPlayedNumber: lastPlayedNumber\n        next: nextLevel\n        first: courseLevels.first()\n        arena: arena\n        project: project\n      playtime: playtime\n    stats\n\n  fetchForCourseInstance: (courseInstanceID, options={}) ->\n    return unless courseInstanceID\n    CourseInstance = require 'models/CourseInstance'\n    courseInstance = if _.isString(courseInstanceID) then new CourseInstance({_id:courseInstanceID}) else courseInstanceID\n    options = _.extend(options, {\n      url: _.result(courseInstance, 'url') + '/classroom'\n    })\n    @fetch(options)\n\n  inviteMembers: (emails, options={}) ->\n    options.data ?= {}\n    options.data.emails = emails\n    options.url = @url() + '/invite-members'\n    options.type = 'POST'\n    @fetch(options)\n\n  getSortedCourses: ->\n    utils.sortCourses(@get('courses') ? [])\n\n  updateCourses: (options={}) ->\n    options.url = @url() + '/update-courses'\n    options.type = 'POST'\n    @fetch(options)\n"]}