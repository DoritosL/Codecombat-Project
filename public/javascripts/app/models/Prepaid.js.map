{"version":3,"sources":["app/models/Prepaid.coffee"],"names":[],"mappings":";AAAA;EAAA;;;;AAAA,YAAY,QAAQ,aAAR;;AACZ,SAAS,QAAQ,+BAAR;;AAEP,6BAA+B,QAAQ,gBAAR,EAA/B;;AAEF,MAAM,CAAC,OAAP,GAAuB;;;;;;;EACrB,OAAC,UAAD,GAAY;;oBACZ,UAAS;;oBAET,YAAW;AACT;IAAA,IAA2D,6BAA3D;AAAA,aAAO,IAAC,IAAD,CAAK,cAAL,gDAAwC,CAAE,iBAAjD;;WACA,IAAC,IAAD,CAAK,cAAL;EAFS;;oBAIX,kBAAiB,SAAC,MAAD;AACf;AAAA;AAAA;;MACE,IAAwB,QAAQ,CAAC,MAAT,KAAmB,MAA3C;AAAA,eAAO,QAAQ,CAAC,KAAhB;;AADF;AAEA,WAAO;EAHQ;;oBAKjB,aAAY;IACV,IAAC,SAAD,CAAU,IAAV,EAAa,KAAb,EAAoB;AAClB;MAAA,eAAe,IAAC,IAAD,CAAK,cAAL;MACf,IAAG,CAAC,CAAC,QAAF,CAAW,YAAX,CAAH;eACE,IAAC,IAAD,CAAK,cAAL,EAAqB,SAAS,YAAT,CAArB,EADF;;IAFkB,CAApB;WAIA,yCAAM,SAAN;EALU;;oBAOZ,SAAQ;AACN;IAAA,UAAU,IAAC,IAAD,CAAK,SAAL;IACV,IAAG,WAAgB,SAAK,OAAL,CAAJ,GAAwB,UAAvC;AACE,aAAO,UADT;;IAGA,YAAY,IAAC,IAAD,CAAK,WAAL;IACZ,IAAG,aAAkB,SAAK,SAAL,CAAJ,GAA0B,UAA3C;AACE,aAAO,UADT;;IAGA,IAAG,IAAC,UAAD,MAAgB,CAAnB;AACE,aAAO,QADT;;AAGA,WAAO;EAZD;;oBAcR,SAAQ,SAAC,IAAD,EAAO,OAAP;;MAAO,UAAQ;;IACrB,OAAO,CAAC,GAAR,GAAc,CAAC,CAAC,MAAF,CAAS,IAAT,EAAY,KAAZ,IAAmB;IACjC,OAAO,CAAC,IAAR,GAAe;;MACf,OAAO,CAAC,OAAQ;;IAChB,OAAO,CAAC,IAAI,CAAC,MAAb,GAAsB,IAAI,CAAC,EAAL,IAAW;WACjC,IAAC,MAAD,CAAO,OAAP;EALM;;oBAOR,iBAAgB,SAAC,MAAD;AACd;IAAA,+CAAW,MAAM,CAAC,IAAK,iBAAZ,IAAuB;IAClC,IAAG,IAAC,IAAD,CAAK,MAAL,MAAgB,iBAAnB;AACE,aAAO,aAAY,IAAC,IAAD,CAAK,mBAAL,CAAZ,iBADT;KAAA;AAGE,aAAO,KAHT;;EAFc;;;;GAzCqB","file":"public/javascripts/app/models/Prepaid.js","sourcesContent":["CocoModel = require './CocoModel'\nschema = require 'schemas/models/prepaid.schema'\n\n{ STARTER_LICENSE_COURSE_IDS } = require 'core/constants'\n\nmodule.exports = class Prepaid extends CocoModel\n  @className: \"Prepaid\"\n  urlRoot: '/db/prepaid'\n\n  openSpots: ->\n    return @get('maxRedeemers') - @get('redeemers')?.length if @get('redeemers')?\n    @get('maxRedeemers')\n\n  userHasRedeemed: (userID) ->\n    for redeemer in @get('redeemers')\n      return redeemer.date if redeemer.userID is userID\n    return null\n\n  initialize: ->\n    @listenTo @, 'add', ->\n      maxRedeemers = @get('maxRedeemers')\n      if _.isString(maxRedeemers)\n        @set 'maxRedeemers', parseInt(maxRedeemers)\n    super(arguments...)\n        \n  status: ->\n    endDate = @get('endDate')\n    if endDate and new Date(endDate) < new Date()\n      return 'expired'\n\n    startDate = @get('startDate')\n    if startDate and new Date(startDate) > new Date()\n      return 'pending'\n      \n    if @openSpots() <= 0\n      return 'empty'\n      \n    return 'available'\n\n  redeem: (user, options={}) ->\n    options.url = _.result(@, 'url')+'/redeemers'\n    options.type = 'POST'\n    options.data ?= {}\n    options.data.userID = user.id or user\n    @fetch(options)\n\n  includesCourse: (course) ->\n    courseID = course.get?('name') or course\n    if @get('type') is 'starter_license'\n      return courseID in @get('includedCourseIDs')\n    else\n      return true\n"]}