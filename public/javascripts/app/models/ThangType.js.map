{"version":3,"sources":["app/models/ThangType.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/models/ThangType.js","sourcesContent":["CocoModel = require './CocoModel'\nSpriteBuilder = require 'lib/sprites/SpriteBuilder'\nLevelComponent = require './LevelComponent'\nCocoCollection = require 'collections/CocoCollection'\n\nutils = require 'core/utils'\n\nbuildQueue = []\n\nmodule.exports = class ThangType extends CocoModel\n  @className: 'ThangType'\n  @schema: require 'schemas/models/thang_type'\n  @heroes:\n    captain: '529ec584c423d4e83b000014'\n    knight: '529ffbf1cf1818f2be000001'\n    samurai: '53e12be0d042f23505c3023b'\n    raider: '55527eb0b8abf4ba1fe9a107'\n    goliath: '55e1a6e876cb0948c96af9f8'\n    guardian: '566a058620de41290036a745'\n    ninja: '52fc0ed77e01835453bd8f6c'\n    'forest-archer': '5466d4f2417c8b48a9811e87'\n    trapper: '5466d449417c8b48a9811e83'\n    pixie: ''\n    assassin: '566a2202e132c81f00f38c81'\n    librarian: '52fbf74b7e01835453bd8d8e'\n    'potion-master': '52e9adf7427172ae56002172'\n    sorcerer: '52fd1524c7e6cf99160e7bc9'\n    necromancer: '55652fb3b9effa46a1f775fd'\n    'master-wizard': ''\n    duelist: '57588f09046caf2e0012ed41'\n    champion: '575848b522179b2800efbfbf'\n    'code-ninja': '58192d484954d56144a7062f'\n  @heroClasses:\n    Warrior: ['champion', 'duelist', 'captain', 'knight', 'samurai', 'raider', 'goliath', 'guardian', 'code-ninja']\n    Ranger: ['ninja', 'forest-archer', 'trapper', 'pixie', 'assassin']\n    Wizard: ['librarian', 'potion-master', 'sorcerer', 'necromancer', 'master-wizard']\n  @items:\n    'simple-boots': '53e237bf53457600003e3f05'\n  urlRoot: '/db/thang.type'\n  building: {}\n  editableByArtisans: true\n  @defaultActions: ['idle', 'die', 'move', 'attack', 'trick', 'cast']\n  @heroConfigStats: {}  # Build a cache of these for quickly determining hero/item loadout aggregate stats\n\n  initialize: ->\n    super()\n    @building = {}\n    @spriteSheets = {}\n\n    ## Testing memory clearing\n    #f = =>\n    #  console.info 'resetting raw data'\n    #  @unset 'raw'\n    #  @_previousAttributes.raw = null\n    #setTimeout f, 40000\n\n  resetRawData: ->\n    @set('raw', {shapes: {}, containers: {}, animations: {}})\n\n  resetSpriteSheetCache: ->\n    @buildActions()\n    @spriteSheets = {}\n    @building = {}\n\n  isFullyLoaded: ->\n    # TODO: Come up with a better way to identify when the model doesn't have everything needed to build the sprite. ie when it's a projection without all the required data.\n    return @get('actions') or @get('raster') # needs one of these two things\n\n  loadRasterImage: ->\n    return if @loadingRaster or @loadedRaster\n    return unless raster = @get('raster')\n    @rasterImage = $(\"<img src='/file/#{raster}' />\")\n    @loadingRaster = true\n    @rasterImage.one('load', =>\n      @loadingRaster = false\n      @loadedRaster = true\n      @trigger('raster-image-loaded', @))\n    @rasterImage.one('error', =>\n      @loadingRaster = false\n      @trigger('raster-image-load-errored', @)\n    )\n\n  getActions: ->\n    return {} unless @isFullyLoaded()\n    return @actions or @buildActions()\n\n  getDefaultActions: ->\n    actions = []\n    for action in _.values(@getActions())\n      continue unless _.any ThangType.defaultActions, (prefix) ->\n        _.string.startsWith(action.name, prefix)\n      actions.push(action)\n    return actions\n\n  buildActions: ->\n    return null unless @isFullyLoaded()\n    @actions = $.extend(true, {}, @get('actions'))\n    for name, action of @actions\n      action.name = name\n      for relatedName, relatedAction of action.relatedActions ? {}\n        relatedAction.name = action.name + '_' + relatedName\n        @actions[relatedAction.name] = relatedAction\n    @actions\n\n  fillOptions: (options) ->\n    options ?= {}\n    options = _.clone options\n    options.resolutionFactor ?= SPRITE_RESOLUTION_FACTOR\n    options.async ?= false\n    options.thang = null  # Don't hold onto any bad Thang references.\n    options\n\n  buildSpriteSheet: (options) ->\n    return false unless @isFullyLoaded() and @get 'raw'\n    @options = @fillOptions options\n    key = @spriteSheetKey(@options)\n    if ss = @spriteSheets[key] then return ss\n    if @building[key]\n      @options = null\n      return key\n    @t0 = new Date().getTime()\n    @initBuild(options)\n    @addGeneralFrames() unless @options.portraitOnly\n    @addPortrait()\n    @building[key] = true\n    result = @finishBuild()\n    return result\n\n  initBuild: (options) ->\n    @buildActions() if not @actions\n    @vectorParser = new SpriteBuilder(@, options)\n    @builder = new createjs.SpriteSheetBuilder()\n    @builder.padding = 2\n    @frames = {}\n\n  addPortrait: ->\n    # The portrait is built very differently than the other animations, so it gets a separate function.\n    return unless @actions\n    portrait = @actions.portrait\n    return unless portrait\n    scale = portrait.scale or 1\n    pt = portrait.positions?.registration\n    rect = new createjs.Rectangle(pt?.x/scale or 0, pt?.y/scale or 0, 100/scale, 100/scale)\n    if portrait.animation\n      mc = @vectorParser.buildMovieClip portrait.animation\n      mc.nominalBounds = mc.frameBounds = null # override what the movie clip says on bounding\n      @builder.addMovieClip(mc, rect, scale)\n      frames = @builder._animations[portrait.animation].frames\n      frames = @mapFrames(portrait.frames, frames[0]) if portrait.frames?\n      @builder.addAnimation 'portrait', frames, true\n    else if portrait.container\n      s = @vectorParser.buildContainerFromStore(portrait.container)\n      frame = @builder.addFrame(s, rect, scale)\n      @builder.addAnimation 'portrait', [frame], false\n\n  addGeneralFrames: ->\n    framesMap = {}\n    for animation in @requiredRawAnimations()\n      name = animation.animation\n      mc = @vectorParser.buildMovieClip name\n      continue unless mc\n      @builder.addMovieClip mc, null, animation.scale * @options.resolutionFactor\n      framesMap[animation.scale + '_' + name] = @builder._animations[name].frames\n\n    for name, action of @actions when action.animation\n      continue if name is 'portrait'\n      scale = action.scale ? @get('scale') ? 1\n      frames = framesMap[scale + '_' + action.animation]\n      continue unless frames\n      frames = @mapFrames(action.frames, frames[0]) if action.frames?\n      next = true\n      next = action.goesTo if action.goesTo\n      next = false if action.loops is false\n      @builder.addAnimation name, frames, next\n\n    for name, action of @actions when action.container and not action.animation\n      continue if name is 'portrait'\n      scale = @options.resolutionFactor * (action.scale or @get('scale') or 1)\n      s = @vectorParser.buildContainerFromStore(action.container)\n      continue unless s\n      frame = @builder.addFrame(s, s.bounds, scale)\n      @builder.addAnimation name, [frame], false\n\n  requiredRawAnimations: ->\n    required = []\n    for name, action of @get('actions')\n      continue if name is 'portrait'\n      allActions = [action].concat(_.values (action.relatedActions ? {}))\n      for a in allActions when a.animation\n        scale = if name is 'portrait' then a.scale or 1 else a.scale or @get('scale') or 1\n        animation = {animation: a.animation, scale: scale}\n        animation.portrait = name is 'portrait'\n        unless _.find(required, (r) -> _.isEqual r, animation)\n          required.push animation\n    required\n\n  mapFrames: (frames, frameOffset) ->\n    return frames unless _.isString(frames) # don't accidentally do this again\n    (parseInt(f, 10) + frameOffset for f in frames.split(','))\n\n  finishBuild: ->\n    return if _.isEmpty(@builder._animations)\n    key = @spriteSheetKey(@options)\n    spriteSheet = null\n    if @options.async\n      buildQueue.push @builder\n      @builder.t0 = new Date().getTime()\n      @builder.buildAsync() unless buildQueue.length > 1\n      @builder.on 'complete', @onBuildSpriteSheetComplete, @, true, [@builder, key, @options]\n      @builder = null\n      return key\n    spriteSheet = @builder.build()\n    @logBuild @t0, false, @options.portraitOnly\n    @spriteSheets[key] = spriteSheet\n    @building[key] = false\n    @builder = null\n    @options = null\n    spriteSheet\n\n  onBuildSpriteSheetComplete: (e, data) ->\n    [builder, key, options] = data\n    @logBuild builder.t0, true, options.portraitOnly\n    buildQueue = buildQueue.slice(1)\n    buildQueue[0].t0 = new Date().getTime() if buildQueue[0]\n    buildQueue[0]?.buildAsync()\n    @spriteSheets[key] = e.target.spriteSheet\n    @building[key] = false\n    @trigger 'build-complete', {key: key, thangType: @}\n    @vectorParser = null\n\n  logBuild: (startTime, async, portrait) ->\n    kind = if async then 'Async' else 'Sync '\n    portrait = if portrait then '(Portrait)' else ''\n    name = _.string.rpad @get('name'), 20\n    time = _.string.lpad '' + new Date().getTime() - startTime, 6\n    console.debug \"Built sheet:  #{name} #{time}ms  #{kind}  #{portrait}\"\n\n  spriteSheetKey: (options) ->\n    colorConfigs = []\n    for groupName, config of options.colorConfig or {}\n      colorConfigs.push \"#{groupName}:#{config.hue}|#{config.saturation}|#{config.lightness}\"\n    colorConfigs = colorConfigs.join ','\n    portraitOnly = !!options.portraitOnly\n    \"#{@get('name')} - #{options.resolutionFactor} - #{colorConfigs} - #{portraitOnly}\"\n\n  getHeroShortName: ->\n    map = {\n      \"Assassin\": \"Ritic\"\n      \"Captain\": \"Anya\"\n      \"Champion\": \"Ida\"\n      \"Master Wizard\": \"Usara\"\n      \"Duelist\": \"Alejandro\"\n      \"Forest Archer\": \"Naria\"\n      \"Goliath\": \"Okar\"\n      \"Guardian\": \"Illia\"\n      \"Knight\": \"Tharin\"\n      \"Librarian\": \"Hushbaum\"\n      \"Necromancer\": \"Nalfar\"\n      \"Ninja\": \"Amara\"\n      \"Pixie\": \"Zana\"\n      \"Potion Master\": \"Omarn\"\n      \"Raider\": \"Arryn\"\n      \"Samurai\": \"Hattori\"\n      \"Ian Elliott\": \"Hattori\"\n      \"Sorcerer\": \"Pender\"\n      \"Trapper\": \"Senick\"\n      \"Code Ninja\": \"Code Ninja\"\n    }\n    map[@get('name')]\n\n  getPortraitImage: (spriteOptionsOrKey, size=100) ->\n    src = @getPortraitSource(spriteOptionsOrKey, size)\n    return null unless src\n    $('<img />').attr('src', src)\n\n  getPortraitSource: (spriteOptionsOrKey, size=100) ->\n    return @getPortraitURL() if @get('rasterIcon') or @get('raster')\n    stage = @getPortraitStage(spriteOptionsOrKey, size)\n    stage?.toDataURL()\n\n  getPortraitStage: (spriteOptionsOrKey, size=100) ->\n    canvas = $(\"<canvas width='#{size}' height='#{size}'></canvas>\")\n    try\n      stage = new createjs.Stage(canvas[0])\n    catch err\n      console.error \"Error trying to create #{@get('name')} avatar stage:\", err, \"with window as\", window\n      return null\n    return stage unless @isFullyLoaded()\n    key = spriteOptionsOrKey\n    key = if _.isString(key) then key else @spriteSheetKey(@fillOptions(key))\n    spriteSheet = @spriteSheets[key]\n    if not spriteSheet\n      options = if _.isPlainObject spriteOptionsOrKey then spriteOptionsOrKey else {}\n      options.portraitOnly = true\n      spriteSheet = @buildSpriteSheet(options)\n    return if _.isString spriteSheet\n    return unless spriteSheet\n    sprite = new createjs.Sprite(spriteSheet)\n    pt = @actions.portrait?.positions?.registration\n    sprite.regX = pt?.x or 0\n    sprite.regY = pt?.y or 0\n    sprite.framerate = @actions.portrait?.framerate ? 20\n    sprite.gotoAndStop 'portrait'\n    stage.addChild(sprite)\n    stage.update()\n    stage.startTalking = ->\n      sprite.gotoAndPlay 'portrait'\n      return  # TODO: causes infinite recursion in new EaselJS\n      return if @tick\n      @tick = (e) => @update(e)\n      createjs.Ticker.addEventListener 'tick', @tick\n    stage.stopTalking = ->\n      sprite.gotoAndStop 'portrait'\n      return  # TODO: just breaks in new EaselJS\n      @update()\n      createjs.Ticker.removeEventListener 'tick', @tick\n      @tick = null\n    stage\n\n  getVectorPortraitStage: (size=100) ->\n    return unless @actions\n    canvas = $(\"<canvas width='#{size}' height='#{size}'></canvas>\")\n    stage = new createjs.Stage(canvas[0])\n    portrait = @actions.portrait\n    return unless portrait and (portrait.animation or portrait.container)\n    scale = portrait.scale or 1\n\n    vectorParser = new SpriteBuilder(@, {})\n    if portrait.animation\n      sprite = vectorParser.buildMovieClip portrait.animation\n      sprite.gotoAndStop(0)\n    else if portrait.container\n      sprite = vectorParser.buildContainerFromStore(portrait.container)\n\n    pt = portrait.positions?.registration\n    sprite.regX = pt?.x / scale or 0\n    sprite.regY = pt?.y / scale or 0\n    sprite.scaleX = sprite.scaleY = scale * size / 100\n    stage.addChild(sprite)\n    stage.update()\n    stage\n\n  uploadGenericPortrait: (callback, src) ->\n    src ?= @getPortraitSource()\n    return callback?() unless src and _.string.startsWith src, 'data:'\n    src = src.replace('data:image/png;base64,', '').replace(/\\ /g, '+')\n    body =\n      filename: 'portrait.png'\n      mimetype: 'image/png'\n      path: \"db/thang.type/#{@get('original')}\"\n      b64png: src\n      force: 'true'\n    $.ajax('/file', {type: 'POST', data: body, success: callback or @onFileUploaded})\n\n  onFileUploaded: =>\n    console.log 'Image uploaded'\n\n  @loadUniversalWizard: ->\n    return @wizardType if @wizardType\n    wizOriginal = '52a00d55cf1818f2be00000b'\n    url = \"/db/thang.type/#{wizOriginal}/version\"\n    @wizardType = new module.exports()\n    @wizardType.url = -> url\n    @wizardType.fetch()\n    @wizardType\n\n  getPortraitURL: ->\n    if iconURL = @get('rasterIcon')\n      return \"/file/#{iconURL}\"\n    if rasterURL = @get('raster')\n      return \"/file/#{rasterURL}\"\n    \"/file/db/thang.type/#{@get('original')}/portrait.png\"\n\n  # Item functions\n\n  getAllowedSlots: ->\n    itemComponentRef = _.find(\n      @get('components') or [],\n      (compRef) -> compRef.original is LevelComponent.ItemID)\n    return itemComponentRef?.config?.slots or ['right-hand']  # ['right-hand'] is default\n\n  getAllowedHeroClasses: ->\n    return [heroClass] if heroClass = @get 'heroClass'\n    ['Warrior', 'Ranger', 'Wizard']\n\n  getHeroStats: ->\n    # Translate from raw hero properties into appropriate display values for the PlayHeroesModal.\n    # Adapted from https://docs.google.com/a/codecombat.com/spreadsheets/d/1BGI1bzT4xHvWA81aeyIaCKWWw9zxn7-MwDdydmB5vw4/edit#gid=809922675\n    return unless heroClass = @get('heroClass')\n    components = @get('components') or []\n    unless equipsConfig = _.find(components, original: LevelComponent.EquipsID)?.config\n      return console.warn @get('name'), 'is not an equipping hero, but you are asking for its hero stats. (Did you project away components?)'\n    unless movesConfig = _.find(components, original: LevelComponent.MovesID)?.config\n      return console.warn @get('name'), 'is not a moving hero, but you are asking for its hero stats.'\n    unless programmableConfig = _.find(components, original: LevelComponent.ProgrammableID)?.config\n      return console.warn @get('name'), 'is not a Programmable hero, but you are asking for its hero stats.'\n    @classStatAverages ?=\n      attack: {Warrior: 7.5, Ranger: 5, Wizard: 2.5}\n      health: {Warrior: 7.5, Ranger: 5, Wizard: 3.5}\n    stats = {}\n    rawNumbers = attack: equipsConfig.attackDamageFactor ? 1, health: equipsConfig.maxHealthFactor ? 1, speed: movesConfig.maxSpeed\n    for prop in ['attack', 'health']\n      stat = rawNumbers[prop]\n      if stat < 1\n        classSpecificScore = 10 - 5 / stat\n      else\n        classSpecificScore = stat * 5\n      classAverage = @classStatAverages[prop][@get('heroClass')]\n      stats[prop] =\n        relative: Math.round(2 * ((classAverage - 2.5) + classSpecificScore / 2)) / 2 / 10\n        absolute: stat\n      pieces = ($.i18n.t \"choose_hero.#{prop}_#{num}\" for num in [1 .. 3])\n      percent = Math.round(stat * 100) + '%'\n      className = $.i18n.t \"general.#{_.string.slugify @get('heroClass')}\"\n      stats[prop].description = [pieces[0], percent, pieces[1], className, pieces[2]].join ' '\n\n    minSpeed = 4\n    maxSpeed = 16\n    speedRange = maxSpeed - minSpeed\n    speedPoints = rawNumbers.speed - minSpeed\n    stats.speed =\n      relative: Math.round(20 * speedPoints / speedRange) / 2 / 10\n      absolute: rawNumbers.speed\n      description: \"#{$.i18n.t 'choose_hero.speed_1'} #{rawNumbers.speed} #{$.i18n.t 'choose_hero.speed_2'}\"\n\n    stats.skills = (_.string.titleize(_.string.humanize(skill)) for skill in programmableConfig.programmableProperties when skill isnt 'say' and not /(Range|Pos|Radius|Damage)$/.test(skill))\n\n    stats\n\n  getFrontFacingStats: ->\n    components = @get('components') or []\n    unless itemConfig = _.find(components, original: LevelComponent.ItemID)?.config\n      console.warn @get('name'), 'is not an item, but you are asking for its stats.'\n      return props: [], stats: {}\n    stats = {}\n    props = itemConfig.programmableProperties ? []\n    props = props.concat itemConfig.moreProgrammableProperties ? []\n    props = _.without props, 'canCast', 'spellNames', 'spells'\n    for stat, modifiers of itemConfig.stats ? {}\n      stats[stat] = @formatStatDisplay stat, modifiers\n    for stat in itemConfig.extraHUDProperties ? []\n      stats[stat] ?= null  # Find it in the other Components.\n    for component in components\n      continue unless config = component.config\n      for stat, value of stats when not value?\n        value = config[stat]\n        continue unless value?\n        stats[stat] = @formatStatDisplay stat, setTo: value\n        if stat is 'attackDamage'\n          dps = (value / (config.cooldown or 0.5)).toFixed(1)\n          stats[stat].display += \" (#{dps} DPS)\"\n      if config.programmableSnippets\n        props = props.concat config.programmableSnippets\n    for stat, value of stats when not value?\n      stats[stat] = name: stat, display: '???'\n    statKeys = _.keys(stats)\n    statKeys.sort()\n    props.sort()\n    sortedStats = {}\n    sortedStats[key] = stats[key] for key in statKeys\n    props: props, stats: sortedStats\n\n  formatStatDisplay: (name, modifiers) ->\n    i18nKey = {\n      maxHealth: 'health'\n      maxSpeed: 'speed'\n      healthReplenishRate: 'regeneration'\n      attackDamage: 'attack'\n      attackRange: 'range'\n      shieldDefenseFactor: 'blocks'\n      visualRange: 'range'\n      throwDamage: 'attack'\n      throwRange: 'range'\n      bashDamage: 'attack'\n      backstabDamage: 'backstab'\n    }[name]\n\n    if i18nKey\n      name = $.i18n.t 'choose_hero.' + i18nKey\n      matchedShortName = true\n    else\n      name = _.string.humanize name\n      matchedShortName = false\n\n    format = ''\n    format = 'm' if /(range|radius|distance|vision)$/i.test name\n    format ||= 's' if /cooldown$/i.test name\n    format ||= 'm/s' if /speed$/i.test name\n    format ||= '/s' if /(regeneration| rate)$/i.test name\n    value = modifiers.setTo\n    if /(blocks)$/i.test name\n      format ||= '%'\n      value = (value*100).toFixed(1)\n    value = value.join ', ' if _.isArray value\n    display = []\n    display.push \"#{value}#{format}\" if value?\n    display.push \"+#{modifiers.addend}#{format}\" if modifiers.addend > 0\n    display.push \"#{modifiers.addend}#{format}\" if modifiers.addend < 0\n    display.push \"x#{modifiers.factor}\" if modifiers.factor? and modifiers.factor isnt 1\n    display = display.join ', '\n    display = display.replace /9001m?/, 'Infinity'\n    name: name, display: display, matchedShortName: matchedShortName\n\n  isSilhouettedItem: ->\n    return console.error \"Trying to determine whether #{@get('name')} should be a silhouetted item, but it has no gem cost.\" unless @get('gems')? or @get('tier')?\n    console.info \"Add (or make sure you have fetched) a tier for #{@get('name')} to more accurately determine whether it is silhouetted.\" unless @get('tier')?\n    tier = @get 'tier'\n    if tier?\n      return @levelRequiredForItem() > me.level()\n    points = me.get('points')\n    expectedTotalGems = (points ? 0) * 1.5   # Not actually true, but roughly kinda close for tier 0, kinda tier 1\n    @get('gems') > (100 + expectedTotalGems) * 1.2\n\n  levelRequiredForItem: ->\n    return console.error \"Trying to determine what level is required for #{@get('name')}, but it has no tier.\" unless @get('tier')?\n    itemTier = @get 'tier'\n    playerTier = itemTier / 2.5\n    playerLevel = me.constructor.levelForTier playerTier\n    #console.log 'Level required for', @get('name'), 'is', playerLevel, 'player tier', playerTier, 'because it is itemTier', itemTier, 'which is normally level', me.constructor.levelForTier(itemTier)\n    playerLevel\n\n  getContainersForAnimation: (animation, action) ->\n    rawAnimation = @get('raw').animations[animation]\n    if not rawAnimation\n      console.error 'thang type', @get('name'), 'is missing animation', animation, 'from action', action\n    containers = rawAnimation.containers\n    for animation in @get('raw').animations[animation].animations\n      containers = containers.concat(@getContainersForAnimation(animation.gn, action))\n    return containers\n\n  getContainersForActions: (actionNames) ->\n    containersToRender = {}\n    actions = @getActions()\n    for actionName in actionNames\n      action = _.find(actions, {name: actionName})\n      if action.container\n        containersToRender[action.container] = true\n      else if action.animation\n        animationContainers = @getContainersForAnimation(action.animation, action)\n        containersToRender[container.gn] = true for container in animationContainers\n    return _.keys(containersToRender)\n\n  nextForAction: (action) ->\n    next = true\n    next = action.goesTo if action.goesTo\n    next = false if action.loops is false\n    return next\n\n  noRawData: -> not @get('raw')\n\n  initPrerenderedSpriteSheets: ->\n    return if @prerenderedSpriteSheets or not data = @get('prerenderedSpriteSheetData')\n    # creates a collection of prerendered sprite sheets\n    @prerenderedSpriteSheets = new PrerenderedSpriteSheets(data)\n\n  getPrerenderedSpriteSheet: (colorConfig, defaultSpriteType) ->\n    return unless @prerenderedSpriteSheets\n    if @noRawData()\n      return @prerenderedSpriteSheets.first() # there can only be one\n    spriteType = @get('spriteType') or defaultSpriteType\n    @prerenderedSpriteSheets.find (pss) ->\n      return false if pss.get('spriteType') isnt spriteType\n      otherColorConfig = pss.get('colorConfig')\n      return true if _.isEmpty(colorConfig) and _.isEmpty(otherColorConfig)\n      getHue = (config) -> _.result(_.result(config, 'team'), 'hue')\n      return getHue(colorConfig) is getHue(otherColorConfig)\n\n  getPrerenderedSpriteSheetToLoad: ->\n    return unless @prerenderedSpriteSheets\n    if @noRawData()\n      return @prerenderedSpriteSheets.first() # there can only be one\n    @prerenderedSpriteSheets.find (pss) -> pss.needToLoad and not pss.loadedImage\n\n  onLoaded: ->\n    super()\n    return if ThangType.heroConfigStats[@get('original')]\n    # Cache certain component properties for quickly determining hero/item loadout aggregate stats\n    components = @get('components') or []\n    return unless components.length\n    return if not @get('gems')? and (\n      (@project and not /gems/.test(@project)) or\n      (/project/.test(@getURL()) and not /gems/.test(@getURL())) or\n      (@collection?.project and not /gems/.test(@collection?.project)) or\n      (/project/.test(@collection?.getURL()) and not /gems/.test(@collection?.getURL()))\n    )\n    stats = gems: @get('gems') or 0\n    if itemConfig = _.find(components, original: LevelComponent.ItemID)?.config\n      stats.kind = 'item'\n      stats.speed = speed if speed = itemConfig.stats?.maxSpeed?.addend\n      stats.health = health if health = itemConfig.stats?.maxHealth?.addend\n      if attacksConfig = _.find(components, original: LevelComponent.AttacksID)?.config\n        stats.attack = (attacksConfig.attackDamage ? 3) / (attacksConfig.cooldown ? 1)\n      ThangType.heroConfigStats[@get('original')] = stats\n    else if equipsConfig = _.find(components, original: LevelComponent.EquipsID)?.config\n      stats.kind = 'hero'\n      stats.attackMultiplier = equipsConfig.attackDamageFactor ? 1\n      stats.healthMultiplier = equipsConfig.maxHealthFactor ? 1\n      if movesConfig = _.find(components, original: LevelComponent.MovesID)?.config\n        stats.speed = movesConfig.maxSpeed ? 3.6\n      if attackableConfig = _.find(components, original: LevelComponent.AttackableID)?.config\n        stats.baseHealth = attackableConfig.maxHealth ? 11\n      ThangType.heroConfigStats[@get('original')] = stats\n    null\n\n  @calculateStatsForHeroConfig: (heroConfig, callback) ->\n    # Load enough information from the ThangTypes involved in a hero configuration to show various stats the hero will have.\n    # We don't rely on any supermodel caches, because this ThangType projection is useless anywhere else.\n    thisHeroConfigStats = {}\n    heroOriginal = heroConfig.thangType ? ThangType.heroes.captain\n    for original in _.values(heroConfig.inventory).concat [heroOriginal]\n      thisHeroConfigStats[original] = ThangType.heroConfigStats[original] or 'loading'\n    for original, stats of thisHeroConfigStats when stats is 'loading'\n      url = \"/db/thang.type/#{original}/version?project=original,components,gems\"\n      tt = new ThangType().setURL url\n      do (tt) =>\n        tt.on 'sync', =>\n          thisHeroConfigStats[tt.get('original')] = ThangType.heroConfigStats[tt.get('original')]\n          tt.off 'sync'\n          tt.destroy()\n          @formatStatsForHeroConfig thisHeroConfigStats, callback\n      tt.fetch()\n    @formatStatsForHeroConfig thisHeroConfigStats, callback\n\n  @formatStatsForHeroConfig: (heroConfigStats, callback) ->\n    heroConfigStatValues = _.values heroConfigStats\n    return if 'loading' in heroConfigStatValues\n    heroStats = _.find heroConfigStatValues, kind: 'hero'\n    totals = {health: heroStats.baseHealth ? 11, speed: 0, gems: 0}\n    for stats in heroConfigStatValues\n      totals.gems += stats.gems if stats.gems\n      totals.health += stats.health * (heroStats.healthMultiplier or 1) if stats.health\n      totals.attack = stats.attack * (heroStats.attackMultiplier or 1) if stats.attack\n      totals.speed += stats.speed if stats.speed\n    callback totals\n\n\nclass PrerenderedSpriteSheet extends CocoModel\n  @className: 'PrerenderedSpriteSheet'\n\n  loadImage: ->\n    return true if @loadingImage\n    return false if @loadedImage\n    return false unless imageURL = @get('image')\n    @image = $(\"<img src='/file/#{imageURL}' />\")\n    @loadingImage = true\n    @image.one('load', =>\n      @loadingImage = false\n      @loadedImage = true\n      @buildSpriteSheet()\n      @trigger('image-loaded', @))\n    @image.one('error', =>\n      @loadingImage = false\n      @trigger('image-load-error', @)\n    )\n    return true\n\n  buildSpriteSheet: ->\n    @spriteSheet = new createjs.SpriteSheet({\n      images: [@image[0]],\n      frames: @get('frames')\n      animations: @get('animations')\n    })\n\n  markToLoad: -> @needToLoad = true\n\n  needToLoad: false\n  loadedImage: false\n  loadingImage: false\n\n\nclass PrerenderedSpriteSheets extends CocoCollection\n  model: PrerenderedSpriteSheet\n"]}