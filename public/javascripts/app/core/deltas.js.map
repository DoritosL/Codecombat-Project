{"version":3,"sources":["app/core/deltas.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/core/deltas.js","sourcesContent":["SystemNameLoader = require './../core/SystemNameLoader'\n###\n  Good-to-knows:\n    dataPath: an array of keys that walks you up a JSON object that's being patched\n      ex: ['scripts', 0, 'description']\n    deltaPath: an array of keys that walks you up a JSON Diff Patch object.\n      ex: ['scripts', '_0', 'description']\n###\n\nmodule.exports.expandDelta = (delta, left, schema) ->\n  if left?\n    right = jsondiffpatch.clone(left)\n    jsondiffpatch.patch right, delta\n\n  flattenedDeltas = flattenDelta(delta)\n  (expandFlattenedDelta(fd, left, right, schema) for fd in flattenedDeltas)\n\nmodule.exports.flattenDelta = flattenDelta = (delta, dataPath=null, deltaPath=null) ->\n  # takes a single jsondiffpatch delta and returns an array of objects with\n  return [] unless delta\n  dataPath ?= []\n  deltaPath ?= []\n  return [{dataPath: dataPath, deltaPath: deltaPath, o: delta}] if _.isArray delta\n\n  results = []\n  affectingArray = delta._t is 'a'\n  for deltaIndex, childDelta of delta\n    continue if deltaIndex is '_t'\n    dataIndex = if affectingArray then parseInt(deltaIndex.replace('_', '')) else deltaIndex\n    results = results.concat flattenDelta(\n      childDelta, dataPath.concat([dataIndex]), deltaPath.concat([deltaIndex]))\n  results\n\nexpandFlattenedDelta = (delta, left, right, schema) ->\n  # takes a single flattened delta and converts into an object that can be\n  # easily formatted into something human readable.\n\n  delta.action = '???'\n  o = delta.o # the raw jsondiffpatch delta\n\n  humanPath = []\n  parentLeft = left\n  parentRight = right\n  parentSchema = schema\n  for key, i in delta.dataPath\n    # TODO: Better schema/json walking\n    childSchema = parentSchema?.items or parentSchema?.properties?[key] or {}\n    childLeft = parentLeft?[key]\n    childRight = parentRight?[key]\n    humanKey = null\n    humanKey ?= childRight.name or childRight.id if childRight\n    humanKey ?= SystemNameLoader.getName(childRight?.original)\n    humanKey ?= \"#{childSchema.title}\" if childSchema.title\n    humanKey ?= _.string.titleize key\n    humanPath.push humanKey\n    parentLeft = childLeft\n    parentRight = childRight\n    parentSchema = childSchema\n\n  if not childLeft and childRight\n    childLeft = jsondiffpatch.patch(childRight, jsondiffpatch.reverse(o))\n\n  if _.isArray(o) and o.length is 1\n    delta.action = 'added'\n    delta.newValue = o[0]\n\n  if _.isArray(o) and o.length is 2\n    delta.action = 'modified'\n    delta.oldValue = o[0]\n    delta.newValue = o[1]\n\n  if _.isArray(o) and o.length is 3 and o[1] is 0 and o[2] is 0\n    delta.action = 'deleted'\n    delta.oldValue = o[0]\n\n  if _.isPlainObject(o) and o._t is 'a'\n    delta.action = 'modified-array'\n\n  if _.isPlainObject(o) and o._t isnt 'a'\n    delta.action = 'modified-object'\n\n  if _.isArray(o) and o.length is 3 and o[2] is 3\n    delta.action = 'moved-index'\n    delta.destinationIndex = o[1]\n    delta.originalIndex = delta.dataPath[delta.dataPath.length-1]\n    delta.hash = objectHash childRight\n\n  if _.isArray(o) and o.length is 3 and o[1] is 0 and o[2] is 2\n    delta.action = 'text-diff'\n    delta.unidiff = o[0]\n\n  delta.humanPath = humanPath.join(' :: ')\n  delta.schema = childSchema\n  delta.left = childLeft\n  delta.right = childRight\n\n  delta\n\nobjectHash = (obj) -> if obj? then (obj.name or obj.id or obj._id or JSON.stringify(_.keys(obj).sort())) else 'null'\n\n\nmodule.exports.makeJSONDiffer = ->\n  jsondiffpatch.create({objectHash})\n\nmodule.exports.getConflicts = (headDeltas, pendingDeltas) ->\n  # headDeltas and pendingDeltas should be lists of deltas returned by expandDelta\n  # Returns a list of conflict objects with properties:\n  #   headDelta\n  #   pendingDelta\n  # The deltas that have conflicts also have conflict properties pointing to one another.\n\n  headPathMap = groupDeltasByAffectingPaths(headDeltas)\n  pendingPathMap = groupDeltasByAffectingPaths(pendingDeltas)\n  paths = _.keys(headPathMap).concat(_.keys(pendingPathMap))\n\n  # Here's my thinking: conflicts happen when one delta path is a substring of another delta path\n  # So, sort paths from both deltas together, which will naturally make conflicts adjacent,\n  # and if one is identified AND one path is from the headDeltas AND the other is from pendingDeltas\n  # This is all to avoid an O(nm) brute force search.\n\n  conflicts = []\n  paths.sort()\n  for path, i in paths\n    offset = 1\n    while i + offset < paths.length\n      # Look at the neighbor\n      nextPath = paths[i+offset]\n      offset += 1\n\n      # these stop being substrings of each other? Then conflict DNE\n      if not (_.string.startsWith nextPath, path) then break\n\n      # check if these two are from the same group, but we still need to check for more beyond\n      unless headPathMap[path] or headPathMap[nextPath] then continue\n      unless pendingPathMap[path] or pendingPathMap[nextPath] then continue\n\n      # Okay, we found two deltas from different groups which conflict\n      for headMetaDelta in (headPathMap[path] or headPathMap[nextPath])\n        headDelta = headMetaDelta.delta\n        for pendingMetaDelta in (pendingPathMap[path] or pendingPathMap[nextPath])\n          pendingDelta = pendingMetaDelta.delta\n          conflicts.push({headDelta: headDelta, pendingDelta: pendingDelta})\n          pendingDelta.conflict = headDelta\n          headDelta.conflict = pendingDelta\n\n  return conflicts if conflicts.length\n\ngroupDeltasByAffectingPaths = (deltas) ->\n  metaDeltas = []\n  for delta in deltas\n    conflictPaths = []\n    # We're being fairly liberal with what's a conflict, because the alternative is worse\n    if delta.action is 'moved-index'\n      # If you moved items around in an array, mark the whole array as a gonner\n      conflictPaths.push delta.dataPath.slice(0, delta.dataPath.length-1)\n    else if delta.action in ['deleted', 'added'] and _.isNumber(delta.dataPath[delta.dataPath.length-1])\n      # If you remove or add items in an array, mark the whole thing as a gonner\n      conflictPaths.push delta.dataPath.slice(0, delta.dataPath.length-1)\n    else\n      conflictPaths.push delta.dataPath\n    for path in conflictPaths\n      metaDeltas.push {\n        delta: delta\n        path: (item.toString() for item in path).join('/')\n      }\n\n  map = _.groupBy metaDeltas, 'path'\n  return map\n\nmodule.exports.pruneConflictsFromDelta = (delta, conflicts) ->\n  expandedDeltas = (conflict.pendingDelta for conflict in conflicts)\n  module.exports.pruneExpandedDeltasFromDelta delta, expandedDeltas\n\nmodule.exports.pruneExpandedDeltasFromDelta = (delta, expandedDeltas) ->\n  # the jsondiffpatch delta mustn't include any dangling nodes,\n  # or else things will get removed which shouldn't be, or errors will occur\n  for expandedDelta in expandedDeltas\n    prunePath delta, expandedDelta.deltaPath\n  if _.isEmpty delta then undefined else delta\n\nprunePath = (delta, path) ->\n  if path.length is 1\n    delete delta[path] unless delta[path] is undefined\n  else\n    prunePath delta[path[0]], path.slice(1) unless delta[path[0]] is undefined\n    keys = (k for k in _.keys(delta[path[0]]) when k isnt '_t')\n    delete delta[path[0]] if keys.length is 0\n\nmodule.exports.DOC_SKIP_PATHS = [\n  '_id','version', 'commitMessage', 'parent', 'created',\n  'slug', 'index', '__v', 'patches', 'creator', 'js', 'watchers', 'levelsUpdated'\n]\n"]}