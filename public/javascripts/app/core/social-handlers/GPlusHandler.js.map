{"version":3,"sources":["app/core/social-handlers/GPlusHandler.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/core/social-handlers/GPlusHandler.js","sourcesContent":["CocoClass = require 'core/CocoClass'\n{me} = require 'core/auth'\n{backboneFailure} = require 'core/errors'\nstorage = require 'core/storage'\nGPLUS_TOKEN_KEY = 'gplusToken'\n\n# gplus user object props to\nuserPropsToSave =\n  'name.givenName': 'firstName'\n  'name.familyName': 'lastName'\n  'gender': 'gender'\n  'id': 'gplusID'\n\nfieldsToFetch = 'displayName,gender,image,name(familyName,givenName),id'\nplusURL = '/plus/v1/people/me?fields='+fieldsToFetch\nrevokeUrl = 'https://accounts.google.com/o/oauth2/revoke?token='\nclientID = '800329290710-j9sivplv2gpcdgkrsis9rff3o417mlfa.apps.googleusercontent.com'\nscope = 'https://www.googleapis.com/auth/plus.login email'\n\nmodule.exports = GPlusHandler = class GPlusHandler extends CocoClass\n  constructor: ->\n    @accessToken = storage.load GPLUS_TOKEN_KEY, false\n    super()\n\n  token: -> @accessToken?.access_token\n    \n  startedLoading: false\n  apiLoaded: false\n  connected: false\n  person: null\n\n  fakeAPI: ->\n    window.gapi =\n      client:\n        load: (api, version, cb) -> cb()\n        plus:\n          people:\n            get: -> {\n              execute: (cb) ->\n                cb({\n                  name: {\n                    givenName: 'Mr'\n                    familyName: 'Bean'\n                  }\n                  id: 'abcd'\n                  emails: [{value: 'some@email.com'}]\n                })\n            }\n              \n      auth:\n        authorize: (opts, cb) ->\n          cb({access_token: '1234'})\n          \n    @startedLoading = true\n    @apiLoaded = true\n    \n  fakeConnect: ->\n    @accessToken = {access_token: '1234'}\n    @trigger 'connect'\n\n  loadAPI: (options={}) ->\n    options.success ?= _.noop\n    options.context ?= options\n    if @apiLoaded\n      options.success.bind(options.context)()\n    else\n      @once 'load-api', options.success, options.context\n    \n    if not @startedLoading\n      po = document.createElement('script')\n      po.type = 'text/javascript'\n      po.async = true\n      po.src = 'https://apis.google.com/js/client:platform.js?onload=onGPlusLoaded'\n      s = document.getElementsByTagName('script')[0]\n      s.parentNode.insertBefore po, s\n      @startedLoading = true\n      window.onGPlusLoaded = =>\n        @apiLoaded = true\n        if @accessToken and me.get('gplusID')\n          # We need to check the current state, given our access token\n          gapi.auth.setToken 'token', @accessToken\n          session_state = @accessToken.session_state\n          gapi.auth.checkSessionState {client_id: clientID, session_state: session_state}, (connected) =>\n            @connected = connected\n            @trigger 'load-api'\n        else\n          @connected = false\n          @trigger 'load-api'\n    \n\n  connect: (options={}) ->\n    options.success ?= _.noop\n    options.context ?= options\n    authOptions = {\n      client_id: clientID\n      scope: 'https://www.googleapis.com/auth/plus.login email'\n    }\n    gapi.auth.authorize authOptions, (e) =>\n      return unless e.access_token\n      @connected = true\n      try\n      # Without removing this, we sometimes get a cross-domain error\n        d = _.omit(e, 'g-oauth-window')\n        storage.save(GPLUS_TOKEN_KEY, d, 0)\n      catch e\n        console.error 'Unable to save G+ token key', e\n      @accessToken = e\n      @trigger 'connect'\n      options.success.bind(options.context)()\n      \n\n  loadPerson: (options={}) ->\n    options.success ?= _.noop\n    options.context ?= options\n    # email and profile data loaded separately\n    gapi.client.load 'plus', 'v1', =>\n      gapi.client.plus.people.get({userId: 'me'}).execute (r) =>\n        attrs = {}\n        for gpProp, userProp of userPropsToSave\n          keys = gpProp.split('.')\n          value = r\n          for key in keys\n            value = value[key]\n          if value\n            attrs[userProp] = value\n    \n        if r.emails?.length\n          attrs.email = r.emails[0].value\n        @trigger 'load-person', attrs\n        options.success.bind(options.context)(attrs)\n\n\n  renderButtons: ->\n    return false unless gapi?.plusone?\n    gapi.plusone.go?()  # Handles +1 button\n  \n  # Friends logic, not in use\n    \n  loadFriends: (friendsCallback) ->\n    return friendsCallback() unless @loggedIn\n    expiresIn = if @accessToken then parseInt(@accessToken.expires_at) - new Date().getTime()/1000 else -1\n    onReauthorized = => gapi.client.request({path: '/plus/v1/people/me/people/visible', callback: friendsCallback})\n    if expiresIn < 0\n      # TODO: this tries to open a popup window, which might not ever finish or work, so the callback may never be called.\n      @reauthorize()\n      @listenToOnce(@, 'logged-in', onReauthorized)\n    else\n      onReauthorized()\n\n  reauthorize: ->\n    params =\n      'client_id' : clientID\n      'scope' : scope\n    gapi.auth.authorize params, @onGPlusLogin\n"]}