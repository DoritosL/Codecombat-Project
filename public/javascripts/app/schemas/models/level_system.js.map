{"version":3,"sources":["app/schemas/models/level_system.coffee"],"names":[],"mappings":";AAAA;;AAAA,IAAI,QAAQ,cAAR;;AACJ,aAAa,QAAQ,iBAAR;;AAEb,mBAAmB;;AAiBnB,mBAAmB,CAAC,CAAC,MAAF,CAAS;EAC1B,OAAO,mBADmB;EAE1B,aAAa,0CAFa;EAG1B,UAAU,CAAC,UAAD,EAAa,cAAb,CAHgB;EAI1B,QAAQ,0BAJkB;EAK1B,OAAO;IAAC;MAAC,KAAK,IAAN;MAAY,MAAM,wDAAlB;KAAD;GALmB;CAAT,EAOjB;EAAA,UAAU,CAAC,CAAC,QAAF,CAAW;IAAA,OAAO,UAAP;IAAmB,aAAa,+DAAhC;GAAX,CAAV;EACA,cACE;IAAA,OAAO,eAAP;IACA,aAAa,sDADb;IAEA,MAAM,SAFN;IAGA,SAAS,CAHT;GAFF;CAPiB;;AAcnB,oBAAoB,CAAC,CAAC,MAAF,CAAS;EAC3B,OAAO,QADoB;EAE3B,aAAa,2CAFc;EAG3B,UAAU,CAAC,MAAD,EAAS,MAAT,CAHiB;EAI3B,WACE;IAAA,MAAM,cAAN;IACA,aAAa,2DADb;IAEA,MAAM,gBAFN;IAGA,cAAc,cAHd;IAIA,cAAc,EAJd;IAKA,cAAc,EALd;GALyB;CAAT;;AAYpB,CAAC,CAAC,qBAAF,CAAwB,iBAAxB;;AACA,iBAAiB,CAAC,UAAU,CAAC,IAAI,CAAC,OAAlC,GAA4C,CAAC,CAAC;;AAC9C,CAAC,CAAC,MAAF,CAAS,iBAAiB,CAAC,UAA3B,EACE;EAAA,aACE;IAAA,OAAO,aAAP;IACA,aAAa,+CADb;IAEA,MAAM,QAFN;IAGA,WAAW,IAHX;GADF;EAKA,cACE;IAAA,MAAM,QAAN;IACA,OAAO,UADP;IAEA,aAAa,uDAFb;IAGA,QAAQ,CAAC,cAAD,CAHR;GANF;EAUA,MACE;IAAA,OAAO,MAAP;IACA,aAAa,4GADb;IAEA,MAAM,QAFN;IAGA,QAAQ,QAHR;GAXF;EAeA,IACE;IAAA,OAAO,YAAP;IACA,aAAa,gDADb;IAEA,MAAM,QAFN;IAGA,QAAQ,QAHR;GAhBF;EAoBA,cAAc,CAAC,CAAC,KAAF,CAAQ;IAAC,OAAO,cAAR;IAAwB,aAAa,qDAArC;IAA4F,aAAa,IAAzG;GAAR,EAAwH,gBAAxH,CApBd;EAqBA,cAAc,CAAC,CAAC,MAAF,CAAS,UAAT,EAAqB;IAAC,OAAO,sBAAR;IAAgC,aAAa,2FAA7C;IAA0I,WAAS;MAAC,MAAM,QAAP;MAAiB,sBAAsB,KAAvC;KAAnJ;GAArB,CArBd;EAsBA,UACE;IAAA,MAAM,SAAN;IACA,OAAO,UADP;IAEA,aAAa,gDAFb;GAvBF;CADF;;AA4BA,CAAC,CAAC,qBAAF,CAAwB,iBAAxB,EAA2C,cAA3C;;AACA,CAAC,CAAC,0BAAF,CAA6B,iBAA7B;;AACA,CAAC,CAAC,yBAAF,CAA4B,iBAA5B,EAA+C,cAA/C;;AACA,CAAC,CAAC,2BAAF,CAA8B,iBAA9B;;AACA,CAAC,CAAC,yBAAF,CAA4B,iBAA5B;;AAEA,MAAM,CAAC,OAAP,GAAiB","file":"public/javascripts/app/schemas/models/level_system.js","sourcesContent":["c = require './../schemas'\nmetaschema = require './../metaschema'\n\njitterSystemCode = \"\"\"\nclass Jitter extends System\n  constructor: (world, config) ->\n    super world, config\n    @idlers = @addRegistry (thang) -> thang.exists and thang.acts and thang.moves and thang.action is 'idle'\n\n  update: ->\n    # We return a simple numeric hash that will combine to a frame hash\n    # help us determine whether this frame has changed in resimulations.\n    hash = 0\n    for thang in @idlers\n      hash += thang.pos.x += 0.5 - Math.random()\n      hash += thang.pos.y += 0.5 - Math.random()\n      thang.hasMoved = true\n    return hash\n\"\"\"\n\nDependencySchema = c.object {\n  title: 'System Dependency'\n  description: 'A System upon which this System depends.'\n  required: ['original', 'majorVersion']\n  format: 'latest-version-reference'\n  links: [{rel: 'db', href: '/db/level.system/{(original)}/version/{(majorVersion)}'}]\n},\n  original: c.objectId(title: 'Original', description: 'A reference to another System upon which this System depends.')\n  majorVersion:\n    title: 'Major Version'\n    description: 'Which major version of the System this System needs.'\n    type: 'integer'\n    minimum: 0\n\nLevelSystemSchema = c.object {\n  title: 'System'\n  description: 'A System which can affect Level behavior.'\n  required: ['name', 'code']\n  default:\n    name: 'JitterSystem'\n    description: 'This System makes all idle, movable Thangs jitter around.'\n    code: jitterSystemCode\n    codeLanguage: 'coffeescript'\n    dependencies: []  # TODO: should depend on something by default\n    configSchema: {}\n}\nc.extendNamedProperties LevelSystemSchema  # let's have the name be the first property\nLevelSystemSchema.properties.name.pattern = c.classNamePattern\n_.extend LevelSystemSchema.properties,\n  description:\n    title: 'Description'\n    description: 'A short explanation of what this System does.'\n    type: 'string'\n    maxLength: 2000\n  codeLanguage:\n    type: 'string'\n    title: 'Language'\n    description: 'Which programming language this System is written in.'\n    'enum': ['coffeescript']\n  code:\n    title: 'Code'\n    description: 'The code for this System, as a CoffeeScript class. TODO: add link to documentation for how to write these.'\n    type: 'string'\n    format: 'coffee'\n  js:\n    title: 'JavaScript'\n    description: 'The transpiled JavaScript code for this System'\n    type: 'string'\n    format: 'hidden'\n  dependencies: c.array {title: 'Dependencies', description: 'An array of Systems upon which this System depends.', uniqueItems: true}, DependencySchema\n  configSchema: _.extend metaschema, {title: 'Configuration Schema', description: 'A schema for validating the arguments that can be passed to this System as configuration.', default: {type: 'object', additionalProperties: false}}\n  official:\n    type: 'boolean'\n    title: 'Official'\n    description: 'Whether this is an official CodeCombat System.'\n\nc.extendBasicProperties LevelSystemSchema, 'level.system'\nc.extendSearchableProperties LevelSystemSchema\nc.extendVersionedProperties LevelSystemSchema, 'level.system'\nc.extendPermissionsProperties LevelSystemSchema\nc.extendPatchableProperties LevelSystemSchema\n\nmodule.exports = LevelSystemSchema\n"]}