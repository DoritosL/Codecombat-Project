{"version":3,"sources":["app/schemas/i18n_schema.coffee"],"names":[],"mappings":";AACA;;AAAA,IAAI,QAAQ,WAAR;;AAEJ,yBAAyB,CAAC,CAAC,8BAAF;;AAEzB,gBAAgB;EACd,OAAO,gBADO;EAEd,aAAa,mBAFC;EAGd,MAAM,QAHQ;EAId,YAAY;IACV,MAAM;MACJ,OAAO,MADH;MAEJ,aAAa,iEAFT;MAGJ,MAAM,QAHF;MAIJ,WAAW,GAJP;KADI;IAOV,MAAM;MAAC,QAAQ,oBAAT;KAPI;GAJE;EAad,aAAa;IACX,MAAM;MACJ,OAAO,MADH;MAEJ,aAAa,iCAFT;MAGJ,MAAM,QAHF;MAIJ,mBAAmB;QACjB,wBAAwB;UACtB,sBAAsB,KADA;UAEtB,YAAY;YAIZ,YAAY;cAAC,QAAQ,cAAT;aAJA;WAFU;UAStB,WAAS;YACP,OAAO,cADA;YAEP,aAAa,qBAFN;WATa;SADP;OAJf;KADK;GAbC","file":"public/javascripts/app/schemas/i18n_schema.js","sourcesContent":["#this file will hold the experimental JSON schema for i18n\nc = require './schemas'\n\nlanguageCodeArrayRegex = c.generateLanguageCodeArrayRegex()\n\nExampleSchema = {\n  title: 'Example Schema',\n  description: 'An example schema',\n  type: 'object',\n  properties: {\n    text: {\n      title: 'Text',\n      description: 'A short message to display in the dialogue area. Markdown okay.',\n      type: 'string',\n      maxLength: 400\n    },\n    i18n: {'$ref': '#/definitions/i18n'}\n  },\n  definitions: {\n    i18n: {\n      title: 'i18n',\n      description: 'The internationalization object',\n      type: 'object',\n      patternProperties: {\n        languageCodeArrayRegex: {\n          additionalProperties: false,\n          properties: {\n          #put the translatable properties here\n          #if it is possible to not include i18n with a reference\n          # to #/properties, you could just do\n          properties: {'$ref': '#/properties'}\n           # text: {'$ref': '#/properties/text'}\n          }\n          default: {\n            title: 'LanguageCode',\n            description: 'LanguageDescription'\n          }\n        }\n      }\n    }\n  }\n}\n\n#define a i18n object type for each schema, then have the i18n have it's oneOf check against\n#translatable schemas of that object\n"]}