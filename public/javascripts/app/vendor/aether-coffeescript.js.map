{"version":3,"sources":["bower_components/aether/build/coffeescript.js"],"names":[],"mappingsfile":"public/javascripts/app/vendor/aether-coffeescript.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// Generated by CoffeeScript 2.0.0-beta9-dev\nvar any, assignment, beingDeclared, cache$, cache$1, collectIdentifiers, concat, concatMap, CS, declarationsNeeded, declarationsNeededRecursive, defaultRules, difference, divMod, dynamicMemberAccess, enabledHelpers, envEnrichments, exports, expr, fn, foldl, foldl1, forceBlock, generateMutatingWalker, generateSoak, genSym, h, hasSoak, helperNames, helpers, inlineHelpers, intersect, isIdentifierName, isScopeBoundary, JS, jsReserved, makeReturn, makeVarDeclaration, map, mapChildNodes, memberAccess, needsCaching, nub, owns, partition, span, stmt, union, usedAsExpression, variableDeclarations;\ncache$ = require('./functional-helpers');\nany = cache$.any;\nconcat = cache$.concat;\nconcatMap = cache$.concatMap;\ndifference = cache$.difference;\ndivMod = cache$.divMod;\nfoldl = cache$.foldl;\nfoldl1 = cache$.foldl1;\nintersect = cache$.intersect;\nmap = cache$.map;\nnub = cache$.nub;\nowns = cache$.owns;\npartition = cache$.partition;\nspan = cache$.span;\nunion = cache$.union;\ncache$1 = require('./helpers');\nbeingDeclared = cache$1.beingDeclared;\nusedAsExpression = cache$1.usedAsExpression;\nenvEnrichments = cache$1.envEnrichments;\nCS = require('./nodes');\nJS = require('./js-nodes');\nexports = null != ('undefined' !== typeof module && null != module ? module.exports : void 0) ? 'undefined' !== typeof module && null != module ? module.exports : void 0 : this;\njsReserved = [\n  'break',\n  'case',\n  'catch',\n  'class',\n  'const',\n  'continue',\n  'debugger',\n  'default',\n  'delete',\n  'do',\n  'else',\n  'enum',\n  'export',\n  'extends',\n  'false',\n  'finally',\n  'for',\n  'function',\n  'if',\n  'implements',\n  'import',\n  'in',\n  'instanceof',\n  'interface',\n  'let',\n  'native',\n  'new',\n  'null',\n  'package',\n  'private',\n  'protected',\n  'public',\n  'return',\n  'static',\n  'super',\n  'switch',\n  'this',\n  'throw',\n  'true',\n  'try',\n  'typeof',\n  'var',\n  'void',\n  'while',\n  'with',\n  'yield',\n  'arguments',\n  'eval'\n];\nmapChildNodes = function (node, mapper, reducer, identity, opts) {\n  var child, childName;\n  if (null == opts)\n    opts = {};\n  if (null != opts.listReducer)\n    opts.listReducer;\n  else\n    opts.listReducer = reducer;\n  if (null != opts.listIdentity)\n    opts.listIdentity;\n  else\n    opts.listIdentity = identity;\n  return foldl(identity, function (accum$) {\n    for (var i$ = 0, length$ = node.childNodes.length; i$ < length$; ++i$) {\n      childName = node.childNodes[i$];\n      if (!(null != node[childName]))\n        continue;\n      accum$.push(in$(childName, node.listMembers) ? foldl(opts.listIdentity, function (accum$1) {\n        for (var i$1 = 0, length$1 = node[childName].length; i$1 < length$1; ++i$1) {\n          child = node[childName][i$1];\n          if (!('undefined' !== typeof child && null != child))\n            continue;\n          accum$1.push(mapper(child, childName));\n        }\n        return accum$1;\n      }.call(this, []), opts.listReducer) : mapper(node[childName], childName));\n    }\n    return accum$;\n  }.call(this, []), reducer);\n};\ngenSym = function () {\n  var genSymCounter;\n  genSymCounter = 0;\n  return function (pre) {\n    return new JS.GenSym(pre, ++genSymCounter);\n  };\n}();\nstmt = function (e) {\n  var walk;\n  if (!(null != e))\n    return e;\n  if (e.isStatement) {\n    return e;\n  } else if (e['instanceof'](JS.SequenceExpression)) {\n    walk = function (seq) {\n      return concatMap(seq.expressions, function (e) {\n        if (e['instanceof'](JS.SequenceExpression)) {\n          return walk(e);\n        } else {\n          return [stmt(e)];\n        }\n      });\n    };\n    return new JS.BlockStatement(walk(e));\n  } else if (e['instanceof'](JS.ConditionalExpression)) {\n    return new JS.IfStatement(expr(e.test), stmt(e.consequent), stmt(e.alternate));\n  } else {\n    return new JS.ExpressionStatement(e);\n  }\n};\nexpr = function (s) {\n  var accum, alternate, block, consequent, iife, lastExpression, push;\n  if (!(null != s))\n    return s;\n  if (s.isExpression) {\n    return s;\n  } else if (s['instanceof'](JS.BlockStatement)) {\n    switch (s.body.length) {\n    case 0:\n      return helpers.undef();\n    case 1:\n      return expr(s.body[0]);\n    default:\n      return new JS.SequenceExpression(map(s.body, expr));\n    }\n  } else if (s['instanceof'](JS.ExpressionStatement)) {\n    return s.expression;\n  } else if (s['instanceof'](JS.ThrowStatement)) {\n    return new JS.CallExpression(new JS.FunctionExpression(null, [], forceBlock(s)), []);\n  } else if (s['instanceof'](JS.IfStatement)) {\n    consequent = expr(null != s.consequent ? s.consequent : helpers.undef());\n    alternate = expr(null != s.alternate ? s.alternate : helpers.undef());\n    return new JS.ConditionalExpression(s.test, consequent, alternate);\n  } else if (s['instanceof'](JS.ForInStatement, JS.ForStatement, JS.WhileStatement)) {\n    accum = genSym('accum');\n    push = function (x) {\n      return stmt(new JS.CallExpression(memberAccess(accum, 'push'), [x]));\n    };\n    s.body = forceBlock(s.body);\n    if (s.body.body.length) {\n      lastExpression = s.body.body.slice(-1)[0];\n      if (!lastExpression['instanceof'](JS.ThrowStatement))\n        s.body.body[s.body.body.length - 1] = push(expr(lastExpression));\n    } else {\n      s.body.body.push(push(helpers.undef()));\n    }\n    block = new JS.BlockStatement([\n      s,\n      new JS.ReturnStatement(accum)\n    ]);\n    iife = new JS.FunctionExpression(null, [accum], block);\n    return new JS.CallExpression(memberAccess(iife.g(), 'call'), [\n      new JS.ThisExpression,\n      new JS.ArrayExpression([])\n    ]);\n  } else if (s['instanceof'](JS.SwitchStatement, JS.TryStatement)) {\n    block = new JS.BlockStatement([makeReturn(s)]);\n    iife = new JS.FunctionExpression(null, [], block);\n    return new JS.CallExpression(memberAccess(iife.g(), 'call'), [new JS.ThisExpression]);\n  } else {\n    throw new Error('expr: Cannot use a ' + s.type + ' as a value');\n  }\n};\nisScopeBoundary = function (node) {\n  return node['instanceof'](JS.FunctionExpression, JS.FunctionDeclaration) && !node.generated;\n};\nmakeReturn = function (node) {\n  var stmts;\n  if (!(null != node))\n    return new JS.ReturnStatement;\n  if (node['instanceof'](JS.BlockStatement)) {\n    return new JS.BlockStatement([].slice.call(node.body.slice(0, -1)).concat([makeReturn(node.body.slice(-1)[0])]));\n  } else if (node['instanceof'](JS.SequenceExpression)) {\n    return new JS.SequenceExpression([].slice.call(node.expressions.slice(0, -1)).concat([makeReturn(node.expressions.slice(-1)[0])]));\n  } else if (node['instanceof'](JS.IfStatement)) {\n    return new JS.IfStatement(node.test, makeReturn(node.consequent), null != node.alternate ? makeReturn(node.alternate) : null);\n  } else if (node['instanceof'](JS.SwitchStatement)) {\n    return new JS.SwitchStatement(node.discriminant, map(node.cases, makeReturn));\n  } else if (node['instanceof'](JS.SwitchCase)) {\n    if (!node.consequent.length)\n      return node;\n    stmts = node.consequent.slice(-1)[0]['instanceof'](JS.BreakStatement) ? node.consequent.slice(0, -1) : node.consequent;\n    return new JS.SwitchCase(node.test, [].slice.call(stmts.slice(0, -1)).concat([makeReturn(stmts.slice(-1)[0])]));\n  } else if (node['instanceof'](JS.TryStatement)) {\n    return new JS.TryStatement(makeReturn(node.block), map(node.handlers, makeReturn), null != node.finalizer ? makeReturn(node.finalizer) : null);\n  } else if (node['instanceof'](JS.CatchClause)) {\n    return new JS.CatchClause(node.param, makeReturn(node.body));\n  } else if (node['instanceof'](JS.ThrowStatement, JS.ReturnStatement, JS.BreakStatement, JS.ContinueStatement, JS.DebuggerStatement)) {\n    return node;\n  } else if (node['instanceof'](JS.UnaryExpression) && node.operator === 'void') {\n    return new JS.ReturnStatement;\n  } else {\n    return new JS.ReturnStatement(expr(node));\n  }\n};\ngenerateMutatingWalker = function (fn) {\n  return function (node) {\n    var args, mapper, reducer;\n    args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n    mapper = function (child, nameInParent) {\n      return [\n        nameInParent,\n        fn.apply(child, args)\n      ];\n    };\n    reducer = function (parent, param$) {\n      var cache$2, name, newChild;\n      {\n        cache$2 = param$;\n        name = cache$2[0];\n        newChild = cache$2[1];\n      }\n      parent[name] = newChild;\n      return parent;\n    };\n    return mapChildNodes(node, mapper, reducer, node, {\n      listReducer: function (param$, param$1) {\n        var _, accum, cache$2, cache$3, name, newChild;\n        {\n          cache$2 = param$;\n          _ = cache$2[0];\n          accum = cache$2[1];\n        }\n        {\n          cache$3 = param$1;\n          name = cache$3[0];\n          newChild = cache$3[1];\n        }\n        return [\n          name,\n          accum.concat(newChild)\n        ];\n      },\n      listIdentity: [\n        null,\n        []\n      ]\n    });\n  };\n};\ndeclarationsNeeded = function (node) {\n  if (!(null != node))\n    return [];\n  if (node['instanceof'](JS.AssignmentExpression) && node.operator === '=' && node.left['instanceof'](JS.Identifier)) {\n    return [node.left.name];\n  } else if (node['instanceof'](JS.ForInStatement) && node.left['instanceof'](JS.Identifier)) {\n    return [node.left.name];\n  } else {\n    return [];\n  }\n};\ndeclarationsNeededRecursive = function (node) {\n  if (!(null != node))\n    return [];\n  if (isScopeBoundary(node)) {\n    return [];\n  } else {\n    return union(declarationsNeeded(node), mapChildNodes(node, declarationsNeededRecursive, function (a, b) {\n      return a.concat(b);\n    }, []));\n  }\n};\nvariableDeclarations = function (node) {\n  if (!(null != node))\n    return [];\n  if (node['instanceof'](JS.FunctionDeclaration)) {\n    return [node.id];\n  } else if (isScopeBoundary(node)) {\n    return [];\n  } else if (node['instanceof'](JS.VariableDeclarator)) {\n    return [node.id];\n  } else {\n    return mapChildNodes(node, variableDeclarations, function (a, b) {\n      return a.concat(b);\n    }, []);\n  }\n};\ncollectIdentifiers = function (node) {\n  return nub(function () {\n    switch (false) {\n    case !!(null != node):\n      return [];\n    case !node['instanceof'](JS.Identifier):\n      return [node.name];\n    case !(node['instanceof'](JS.MemberExpression) && !node.computed):\n      return collectIdentifiers(node.object);\n    default:\n      return mapChildNodes(node, collectIdentifiers, function (a, b) {\n        return a.concat(b);\n      }, []);\n    }\n  }.call(this));\n};\nneedsCaching = function (node) {\n  if (!(null != node))\n    return false;\n  return envEnrichments(node, []).length > 0 || node['instanceof'](CS.FunctionApplications, CS.DoOp, CS.NewOp, CS.ArrayInitialiser, CS.ObjectInitialiser, CS.RegExp, CS.HeregExp, CS.PreIncrementOp, CS.PostIncrementOp, CS.PreDecrementOp, CS.PostDecrementOp, CS.Range) || mapChildNodes(node, needsCaching, function (a, b) {\n    return a || b;\n  }, false);\n};\nforceBlock = function (node) {\n  if (!(null != node))\n    return new JS.BlockStatement([]);\n  node = stmt(node);\n  if (node['instanceof'](JS.BlockStatement)) {\n    return node;\n  } else {\n    return new JS.BlockStatement([node]);\n  }\n};\nmakeVarDeclaration = function (vars) {\n  var decls, v;\n  vars.sort(function (a, b) {\n    a = a.name.toLowerCase();\n    b = b.name.toLowerCase();\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  decls = function (accum$) {\n    for (var i$ = 0, length$ = vars.length; i$ < length$; ++i$) {\n      v = vars[i$];\n      accum$.push(new JS.VariableDeclarator(v));\n    }\n    return accum$;\n  }.call(this, []);\n  return new JS.VariableDeclaration('var', decls);\n};\nisIdentifierName = function (name) {\n  return !in$(name, jsReserved) && /^[$_a-z][$_a-z0-9]*$/i.test(name);\n};\nmemberAccess = function (e, member) {\n  if (isIdentifierName(member)) {\n    return new JS.MemberExpression(false, expr(e), new JS.Identifier(member));\n  } else {\n    return new JS.MemberExpression(true, expr(e), new JS.Literal(member));\n  }\n};\ndynamicMemberAccess = function (e, index) {\n  if (index['instanceof'](JS.Literal) && typeof index.value === 'string') {\n    return memberAccess(e, index.value);\n  } else {\n    return new JS.MemberExpression(true, expr(e), expr(index));\n  }\n};\nassignment = function (assignee, expression, valueUsed) {\n  var alternate, assignments, consequent, e, elements, i, index, m, numElements, p, propName, restName, size, test;\n  if (null == valueUsed)\n    valueUsed = false;\n  assignments = [];\n  expression = expr(expression);\n  switch (false) {\n  case !assignee.rest:\n  case !assignee['instanceof'](JS.ArrayExpression):\n    e = expression;\n    if (valueUsed || assignee.elements.length > 1) {\n      e = genSym('cache');\n      assignments.push(new JS.AssignmentExpression('=', e, expression));\n    }\n    elements = assignee.elements;\n    for (var i$ = 0, length$ = elements.length; i$ < length$; ++i$) {\n      m = elements[i$];\n      i = i$;\n      if (m.rest)\n        break;\n      assignments.push(assignment(m, dynamicMemberAccess(e, new JS.Literal(i)), valueUsed));\n    }\n    if (elements.length > 0) {\n      if (elements.slice(-1)[0].rest) {\n        numElements = elements.length;\n        restName = elements[numElements - 1] = elements[numElements - 1].expression;\n        test = new JS.BinaryExpression('<=', new JS.Literal(numElements), memberAccess(e, 'length'));\n        consequent = helpers.slice(e, new JS.Literal(numElements - 1));\n        alternate = new JS.ArrayExpression([]);\n        assignments.push(stmt(new JS.AssignmentExpression('=', restName, new JS.ConditionalExpression(test, consequent, alternate))));\n      } else if (any(elements, function (p) {\n          return p.rest;\n        })) {\n        restName = index = null;\n        for (var i$1 = 0, length$1 = elements.length; i$1 < length$1; ++i$1) {\n          p = elements[i$1];\n          i = i$1;\n          if (!p.rest)\n            continue;\n          restName = p.expression;\n          index = i;\n          break;\n        }\n        elements.splice(index, 1);\n        numElements = elements.length;\n        size = genSym('size');\n        assignments.push(new JS.AssignmentExpression('=', size, memberAccess(e, 'length')));\n        test = new JS.BinaryExpression('>', size, new JS.Literal(numElements));\n        consequent = helpers.slice(e, new JS.Literal(index), new JS.BinaryExpression('-', size, new JS.Literal(numElements - index)));\n        assignments.push(new JS.AssignmentExpression('=', restName, new JS.ConditionalExpression(test, consequent, new JS.ArrayExpression([]))));\n        for (var i$2 = 0, length$2 = elements.slice(index).length; i$2 < length$2; ++i$2) {\n          p = elements.slice(index)[i$2];\n          i = i$2;\n          assignments.push(stmt(new JS.AssignmentExpression('=', p, new JS.MemberExpression(true, e, new JS.BinaryExpression('-', size, new JS.Literal(numElements - index - i))))));\n        }\n      }\n      if (any(elements, function (p) {\n          return p.rest;\n        }))\n        throw new Error('Positional destructuring assignments may not have more than one rest operator');\n    }\n    break;\n  case !assignee['instanceof'](JS.ObjectExpression):\n    e = expression;\n    if (valueUsed || assignee.properties.length > 1) {\n      e = genSym('cache');\n      assignments.push(new JS.AssignmentExpression('=', e, expression));\n    }\n    for (var i$3 = 0, length$3 = assignee.properties.length; i$3 < length$3; ++i$3) {\n      m = assignee.properties[i$3];\n      propName = m.key['instanceof'](JS.Identifier) ? new JS.Literal(m.key.name) : m.key;\n      assignments.push(assignment(m.value, dynamicMemberAccess(e, propName), valueUsed));\n    }\n    break;\n  case !assignee['instanceof'](JS.Identifier, JS.GenSym, JS.MemberExpression):\n    assignments.push(new JS.AssignmentExpression('=', assignee, expr(expression)));\n    break;\n  default:\n    throw new Error('compile: assignment: unassignable assignee: ' + assignee.type);\n  }\n  switch (assignments.length) {\n  case 0:\n    if (e === expression) {\n      return helpers.undef();\n    } else {\n      return expression;\n    }\n  case 1:\n    return assignments[0];\n  default:\n    return new JS.SequenceExpression(valueUsed ? [].slice.call(assignments).concat([e]) : assignments);\n  }\n};\nhasSoak = function (node) {\n  switch (false) {\n  case !node['instanceof'](CS.SoakedFunctionApplication, CS.SoakedMemberAccessOp, CS.SoakedProtoMemberAccessOp, CS.SoakedDynamicMemberAccessOp, CS.SoakedDynamicProtoMemberAccessOp):\n    return true;\n  case !node['instanceof'](CS.FunctionApplication):\n    return hasSoak(node['function']);\n  case !node['instanceof'](CS.MemberAccessOps):\n    return hasSoak(node.expression);\n  default:\n    return false;\n  }\n};\ngenerateSoak = function () {\n  var fn;\n  fn = function (node) {\n    var cache$2, cache$3, cache$4, cache$5, cache$6, ctor, e, memberName, sym, tests, typeofTest;\n    switch (false) {\n    case !node['instanceof'](CS.MemberAccessOp, CS.ProtoMemberAccessOp):\n      cache$2 = fn(node.expression);\n      tests = cache$2[0];\n      e = cache$2[1];\n      return [\n        tests,\n        new node.constructor(e, node.memberName)\n      ];\n    case !node['instanceof'](CS.DynamicMemberAccessOp, CS.DynamicProtoMemberAccessOp):\n      cache$3 = fn(node.expression);\n      tests = cache$3[0];\n      e = cache$3[1];\n      return [\n        tests,\n        new node.constructor(e, node.indexingExpr)\n      ];\n    case !node['instanceof'](CS.FunctionApplication):\n      cache$4 = fn(node['function']);\n      tests = cache$4[0];\n      e = cache$4[1];\n      return [\n        tests,\n        new CS.FunctionApplication(e, node['arguments'])\n      ];\n    case !node['instanceof'](CS.SoakedFunctionApplication):\n      cache$5 = fn(node['function']);\n      tests = cache$5[0];\n      e = cache$5[1];\n      typeofTest = function (e) {\n        return new CS.EQOp(new CS.String('function'), new CS.TypeofOp(e));\n      };\n      if (needsCaching(e)) {\n        sym = new CS.GenSym('cache');\n        return [\n          [].slice.call(tests).concat([typeofTest(new CS.AssignOp(sym, e))]),\n          new CS.FunctionApplication(sym, node['arguments'])\n        ];\n      } else {\n        return [\n          [].slice.call(tests).concat([typeofTest(e)]),\n          new CS.FunctionApplication(e, node['arguments'])\n        ];\n      }\n    case !node['instanceof'](CS.SoakedMemberAccessOp, CS.SoakedProtoMemberAccessOp, CS.SoakedDynamicMemberAccessOp, CS.SoakedDynamicProtoMemberAccessOp):\n      memberName = function () {\n        switch (false) {\n        case !node['instanceof'](CS.SoakedMemberAccessOp, CS.SoakedProtoMemberAccessOp):\n          return 'memberName';\n        case !node['instanceof'](CS.SoakedDynamicMemberAccessOp, CS.SoakedDynamicProtoMemberAccessOp):\n          return 'indexingExpr';\n        }\n      }.call(this);\n      ctor = function () {\n        switch (false) {\n        case !node['instanceof'](CS.SoakedMemberAccessOp):\n          return CS.MemberAccessOp;\n        case !node['instanceof'](CS.SoakedProtoMemberAccessOp):\n          return CS.ProtoMemberAccessOp;\n        case !node['instanceof'](CS.SoakedDynamicMemberAccessOp):\n          return CS.DynamicMemberAccessOp;\n        case !node['instanceof'](CS.SoakedDynamicProtoMemberAccessOp):\n          return CS.DynamicProtoMemberAccessOp;\n        }\n      }.call(this);\n      cache$6 = fn(node.expression);\n      tests = cache$6[0];\n      e = cache$6[1];\n      if (needsCaching(e)) {\n        sym = new CS.GenSym('cache');\n        return [\n          [].slice.call(tests).concat([new CS.UnaryExistsOp(new CS.AssignOp(sym, e))]),\n          new ctor(sym, node[memberName])\n        ];\n      } else {\n        return [\n          [].slice.call(tests).concat([new CS.UnaryExistsOp(e)]),\n          new ctor(e, node[memberName])\n        ];\n      }\n    default:\n      return [\n        [],\n        node\n      ];\n    }\n  };\n  return function (node) {\n    var cache$2, e, tests;\n    cache$2 = fn(node);\n    tests = cache$2[0];\n    e = cache$2[1];\n    return new CS.Conditional(foldl1(tests, function (memo, t) {\n      return new CS.LogicalAndOp(memo, t);\n    }), e);\n  };\n}();\nhelperNames = {};\nhelpers = {\n  'extends': function () {\n    var block, child, ctor, f, key, parent, protoAccess;\n    protoAccess = function (e) {\n      return memberAccess(e, 'prototype');\n    };\n    child = new JS.Identifier('child');\n    parent = new JS.Identifier('parent');\n    ctor = new JS.Identifier('ctor');\n    key = new JS.Identifier('key');\n    block = [\n      new JS.ForInStatement(new JS.VariableDeclaration('var', [new JS.VariableDeclarator(key, null)]), parent, new JS.IfStatement(helpers.isOwn(parent, key), f = stmt(new JS.AssignmentExpression('=', new JS.MemberExpression(true, child, key), new JS.MemberExpression(true, parent, key))))),\n      new JS.FunctionDeclaration(ctor, [], new JS.BlockStatement([stmt(new JS.AssignmentExpression('=', memberAccess(new JS.ThisExpression, 'constructor'), child))])),\n      new JS.AssignmentExpression('=', protoAccess(ctor), protoAccess(parent)),\n      new JS.AssignmentExpression('=', protoAccess(child), new JS.NewExpression(ctor, [])),\n      new JS.AssignmentExpression('=', memberAccess(child, '__super__'), protoAccess(parent)),\n      new JS.ReturnStatement(child)\n    ];\n    return new JS.FunctionDeclaration(helperNames['extends'], [\n      child,\n      parent\n    ], new JS.BlockStatement(map(block, stmt)));\n  },\n  construct: function () {\n    var args, block, child, ctor, fn, result;\n    child = new JS.Identifier('child');\n    ctor = new JS.Identifier('ctor');\n    fn = new JS.Identifier('fn');\n    args = new JS.Identifier('args');\n    result = new JS.Identifier('result');\n    block = [\n      new JS.VariableDeclaration('var', [new JS.VariableDeclarator(fn, new JS.FunctionExpression(null, [], new JS.BlockStatement([])))]),\n      new JS.AssignmentExpression('=', memberAccess(fn, 'prototype'), memberAccess(ctor, 'prototype')),\n      new JS.VariableDeclaration('var', [\n        new JS.VariableDeclarator(child, new JS.NewExpression(fn, [])),\n        new JS.VariableDeclarator(result, new JS.CallExpression(memberAccess(ctor, 'apply'), [\n          child,\n          args\n        ]))\n      ]),\n      new JS.ReturnStatement(new JS.ConditionalExpression(new JS.BinaryExpression('===', result, new JS.CallExpression(new JS.Identifier('Object'), [result])), result, child))\n    ];\n    return new JS.FunctionDeclaration(helperNames.construct, [\n      ctor,\n      args\n    ], new JS.BlockStatement(map(block, stmt)));\n  },\n  isOwn: function () {\n    var args, functionBody, hop, params;\n    hop = memberAccess(new JS.ObjectExpression([]), 'hasOwnProperty');\n    params = args = [\n      new JS.Identifier('o'),\n      new JS.Identifier('p')\n    ];\n    functionBody = [new JS.CallExpression(memberAccess(hop, 'call'), args)];\n    return new JS.FunctionDeclaration(helperNames.isOwn, params, makeReturn(new JS.BlockStatement(map(functionBody, stmt))));\n  },\n  'in': function () {\n    var functionBody, i, length, list, loopBody, member, varDeclaration;\n    member = new JS.Identifier('member');\n    list = new JS.Identifier('list');\n    i = new JS.Identifier('i');\n    length = new JS.Identifier('length');\n    varDeclaration = new JS.VariableDeclaration('var', [\n      new JS.VariableDeclarator(i, new JS.Literal(0)),\n      new JS.VariableDeclarator(length, memberAccess(list, 'length'))\n    ]);\n    loopBody = new JS.IfStatement(new JS.LogicalExpression('&&', new JS.BinaryExpression('in', i, list), new JS.BinaryExpression('===', new JS.MemberExpression(true, list, i), member)), new JS.ReturnStatement(new JS.Literal(true)));\n    functionBody = [\n      new JS.ForStatement(varDeclaration, new JS.BinaryExpression('<', i, length), new JS.UpdateExpression('++', true, i), loopBody),\n      new JS.Literal(false)\n    ];\n    return new JS.FunctionDeclaration(helperNames['in'], [\n      member,\n      list\n    ], makeReturn(new JS.BlockStatement(map(functionBody, stmt))));\n  }\n};\nenabledHelpers = [];\nfor (h in helpers) {\n  if (!isOwn$(helpers, h))\n    continue;\n  fn = helpers[h];\n  helperNames[h] = genSym(h);\n  helpers[h] = function (h, fn) {\n    return function () {\n      enabledHelpers.push(fn());\n      return (helpers[h] = function () {\n        return new JS.CallExpression(helperNames[h], arguments);\n      }).apply(this, arguments);\n    };\n  }(h, fn);\n}\ninlineHelpers = {\n  exp: function () {\n    return new JS.CallExpression(memberAccess(new JS.Identifier('Math'), 'pow'), arguments);\n  },\n  undef: function () {\n    return new JS.UnaryExpression('void', new JS.Literal(0));\n  },\n  slice: function () {\n    return new JS.CallExpression(memberAccess(memberAccess(new JS.ArrayExpression([]), 'slice'), 'call'), arguments);\n  }\n};\nfor (h in inlineHelpers) {\n  if (!isOwn$(inlineHelpers, h))\n    continue;\n  fn = inlineHelpers[h];\n  helpers[h] = fn;\n}\nexports.Compiler = function () {\n  Compiler.compile = function (this$) {\n    return function () {\n      var cache$2;\n      return (cache$2 = new this$()).compile.apply(cache$2, [].slice.call(arguments));\n    };\n  }(Compiler);\n  defaultRules = [\n    [\n      CS.Program,\n      function (param$) {\n        var block, body, cache$2, cache$3, decls, fnDeclHelpers, inScope, options, otherHelpers, pkg, program;\n        {\n          cache$2 = param$;\n          body = cache$2.body;\n          inScope = cache$2.inScope;\n          options = cache$2.options;\n        }\n        if (!(null != body))\n          return new JS.Program([]);\n        block = stmt(body);\n        block = block['instanceof'](JS.BlockStatement) ? block.body : [block];\n        cache$3 = partition(enabledHelpers, function (helper) {\n          return helper['instanceof'](JS.FunctionDeclaration);\n        });\n        fnDeclHelpers = cache$3[0];\n        otherHelpers = cache$3[1];\n        [].push.apply(block, fnDeclHelpers);\n        [].unshift.apply(block, otherHelpers);\n        decls = nub(concatMap(block, declarationsNeededRecursive));\n        if (decls.length && !options.bare)\n          block = [stmt(new JS.UnaryExpression('void', new JS.CallExpression(memberAccess(new JS.FunctionExpression(null, [], new JS.BlockStatement(block)), 'call'), [new JS.ThisExpression])))];\n        pkg = require('./../package.json');\n        program = new JS.Program(block);\n        program.leadingComments = [{\n            type: 'Line',\n            value: ' Generated by CoffeeScript ' + pkg.version\n          }];\n        return program;\n      }\n    ],\n    [\n      CS.Block,\n      function (param$) {\n        var statements;\n        statements = param$.statements;\n        switch (statements.length) {\n        case 0:\n          return new JS.EmptyStatement;\n        case 1:\n          return new stmt(statements[0]);\n        default:\n          return new JS.BlockStatement(concatMap(statements, function (s) {\n            if (s['instanceof'](JS.BlockStatement)) {\n              return map(s.body, stmt);\n            } else if (s['instanceof'](JS.SequenceExpression)) {\n              return map(s.expressions, stmt);\n            } else {\n              return [stmt(s)];\n            }\n          }));\n        }\n      }\n    ],\n    [\n      CS.SeqOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.SequenceExpression([\n          left,\n          right\n        ]);\n      }\n    ],\n    [\n      CS.Conditional,\n      function (param$) {\n        var ancestry, cache$2, condition;\n        var alternate, consequent;\n        {\n          cache$2 = param$;\n          condition = cache$2.condition;\n          consequent = cache$2.consequent;\n          alternate = cache$2.alternate;\n          ancestry = cache$2.ancestry;\n        }\n        if (null != alternate) {\n          if (!(null != consequent))\n            throw new Error('Conditional with non-null alternate requires non-null consequent');\n          if (!alternate['instanceof'](JS.IfStatement))\n            alternate = forceBlock(alternate);\n        }\n        if (null != alternate || (null != ancestry[0] ? ancestry[0]['instanceof'](CS.Conditional) : void 0))\n          consequent = forceBlock(consequent);\n        return new JS.IfStatement(expr(condition), stmt(consequent), alternate);\n      }\n    ],\n    [\n      CS.ForIn,\n      function (param$) {\n        var block, body, cache$2, compile, e, filter, i, increment, k, keyAssignee, length, op, step, target, update, valAssignee, varDeclaration;\n        {\n          cache$2 = param$;\n          valAssignee = cache$2.valAssignee;\n          keyAssignee = cache$2.keyAssignee;\n          target = cache$2.target;\n          step = cache$2.step;\n          filter = cache$2.filter;\n          body = cache$2.body;\n          compile = cache$2.compile;\n        }\n        i = genSym('i');\n        length = genSym('length');\n        block = forceBlock(body);\n        if (!block.body.length)\n          block.body.push(stmt(helpers.undef()));\n        increment = null != this.step && !(this.step['instanceof'](CS.Int) && this.step.data === 1) ? function (x) {\n          return new JS.AssignmentExpression('+=', x, step);\n        } : function (x) {\n          return new JS.UpdateExpression('++', true, x);\n        };\n        if (this.target['instanceof'](CS.Range) && (this.target.left['instanceof'](CS.Int) || this.target.left['instanceof'](CS.UnaryNegateOp) && this.target.left.expression['instanceof'](CS.Int)) && (this.target.right['instanceof'](CS.Int) || this.target.right['instanceof'](CS.UnaryNegateOp) && this.target.right.expression['instanceof'](CS.Int))) {\n          varDeclaration = new JS.VariableDeclaration('var', [new JS.VariableDeclarator(i, compile(this.target.left))]);\n          update = increment(i);\n          if (null != this.filter)\n            block.body.unshift(stmt(new JS.IfStatement(new JS.UnaryExpression('!', filter), new JS.ContinueStatement)));\n          if (null != keyAssignee) {\n            k = genSym('k');\n            varDeclaration.declarations.unshift(new JS.VariableDeclarator(k, new JS.Literal(0)));\n            update = new JS.SequenceExpression([\n              increment(k),\n              update\n            ]);\n            block.body.unshift(stmt(new JS.AssignmentExpression('=', keyAssignee, k)));\n          }\n          if (null != valAssignee)\n            block.body.unshift(stmt(new JS.AssignmentExpression('=', valAssignee, i)));\n          op = this.target.isInclusive ? '<=' : '<';\n          return new JS.ForStatement(varDeclaration, new JS.BinaryExpression(op, i, compile(this.target.right)), update, block);\n        }\n        e = needsCaching(this.target) ? genSym('cache') : target;\n        varDeclaration = new JS.VariableDeclaration('var', [\n          new JS.VariableDeclarator(i, new JS.Literal(0)),\n          new JS.VariableDeclarator(length, memberAccess(e, 'length'))\n        ]);\n        if (!(e === target))\n          varDeclaration.declarations.unshift(new JS.VariableDeclarator(e, target));\n        if (null != this.filter)\n          block.body.unshift(stmt(new JS.IfStatement(new JS.UnaryExpression('!', filter), new JS.ContinueStatement)));\n        if (null != keyAssignee)\n          block.body.unshift(stmt(assignment(keyAssignee, i)));\n        if (null != valAssignee)\n          block.body.unshift(stmt(assignment(valAssignee, new JS.MemberExpression(true, e, i))));\n        return new JS.ForStatement(varDeclaration, new JS.BinaryExpression('<', i, length), increment(i), block);\n      }\n    ],\n    [\n      CS.ForOf,\n      function (param$) {\n        var block, body, cache$2, e, filter, keyAssignee, right, target, valAssignee;\n        {\n          cache$2 = param$;\n          keyAssignee = cache$2.keyAssignee;\n          valAssignee = cache$2.valAssignee;\n          target = cache$2.target;\n          filter = cache$2.filter;\n          body = cache$2.body;\n        }\n        block = forceBlock(body);\n        if (!block.body.length)\n          block.body.push(stmt(helpers.undef()));\n        e = this.isOwn && needsCaching(this.target) ? genSym('cache') : expr(target);\n        if (null != this.filter)\n          block.body.unshift(stmt(new JS.IfStatement(new JS.UnaryExpression('!', filter), new JS.ContinueStatement)));\n        if (null != valAssignee)\n          block.body.unshift(stmt(assignment(valAssignee, new JS.MemberExpression(true, e, keyAssignee))));\n        if (this.isOwn)\n          block.body.unshift(stmt(new JS.IfStatement(new JS.UnaryExpression('!', helpers.isOwn(e, keyAssignee)), new JS.ContinueStatement)));\n        right = e === target ? e : new JS.AssignmentExpression('=', e, target);\n        return new JS.ForInStatement(keyAssignee, right, block);\n      }\n    ],\n    [\n      CS.While,\n      function (param$) {\n        var body, cache$2, condition;\n        {\n          cache$2 = param$;\n          condition = cache$2.condition;\n          body = cache$2.body;\n        }\n        return new JS.WhileStatement(expr(condition), forceBlock(body));\n      }\n    ],\n    [\n      CS.Switch,\n      function (param$) {\n        var alternate, c, cache$2;\n        var cases, expression;\n        {\n          cache$2 = param$;\n          expression = cache$2.expression;\n          cases = cache$2.cases;\n          alternate = cache$2.alternate;\n        }\n        cases = concat(cases);\n        if (!(null != expression)) {\n          expression = new JS.Literal(false);\n          for (var i$ = 0, length$ = cases.length; i$ < length$; ++i$) {\n            c = cases[i$];\n            c.test = new JS.UnaryExpression('!', c.test);\n          }\n        }\n        if (null != alternate)\n          cases.push(new JS.SwitchCase(null, [stmt(alternate)]));\n        for (var i$1 = 0, length$1 = cases.slice(0, -1).length; i$1 < length$1; ++i$1) {\n          c = cases.slice(0, -1)[i$1];\n          if (!((null != c.consequent ? c.consequent.length : void 0) > 0))\n            continue;\n          c.consequent.push(new JS.BreakStatement);\n        }\n        return new JS.SwitchStatement(expression, cases);\n      }\n    ],\n    [\n      CS.SwitchCase,\n      function (param$) {\n        var block, cache$2, cases, conditions, consequent;\n        {\n          cache$2 = param$;\n          conditions = cache$2.conditions;\n          consequent = cache$2.consequent;\n        }\n        cases = map(conditions, function (c) {\n          return new JS.SwitchCase(c, []);\n        });\n        block = stmt(consequent);\n        block = null != block ? block['instanceof'](JS.BlockStatement) ? block.body : [block] : [];\n        cases[cases.length - 1].consequent = block;\n        return cases;\n      }\n    ],\n    [\n      CS.Try,\n      function (param$) {\n        var body, cache$2, catchAssignee, catchBlock, catchBody, e, finallyBlock, finallyBody, handlers;\n        {\n          cache$2 = param$;\n          body = cache$2.body;\n          catchAssignee = cache$2.catchAssignee;\n          catchBody = cache$2.catchBody;\n          finallyBody = cache$2.finallyBody;\n        }\n        finallyBlock = null != this.finallyBody ? forceBlock(finallyBody) : null;\n        if (null != this.catchBody || !(null != this.finallyBody)) {\n          e = genSym('e');\n          catchBlock = forceBlock(catchBody);\n          if (null != catchAssignee)\n            catchBlock.body.unshift(stmt(assignment(catchAssignee, e)));\n          handlers = [new JS.CatchClause(e, catchBlock)];\n        } else {\n          handlers = [];\n        }\n        return new JS.TryStatement(forceBlock(body), handlers, finallyBlock);\n      }\n    ],\n    [\n      CS.Throw,\n      function (param$) {\n        var expression;\n        expression = param$.expression;\n        return new JS.ThrowStatement(expression);\n      }\n    ],\n    [\n      CS.Range,\n      function (param$) {\n        var accum, ancestry, body, cache$2, condition, conditionAlternate, conditionConsequent, conditionTest, i, left, left_, range, rawLeft, rawRight, right, right_, update, vars;\n        {\n          cache$2 = param$;\n          left_ = cache$2.left;\n          right_ = cache$2.right;\n          ancestry = cache$2.ancestry;\n        }\n        if ((this.left['instanceof'](CS.Int) || this.left['instanceof'](CS.UnaryNegateOp) && this.left.expression['instanceof'](CS.Int)) && (this.right['instanceof'](CS.Int) || this.right['instanceof'](CS.UnaryNegateOp) && this.right.expression['instanceof'](CS.Int))) {\n          rawLeft = this.left['instanceof'](CS.UnaryNegateOp) ? -this.left.expression.data : this.left.data;\n          rawRight = this.right['instanceof'](CS.UnaryNegateOp) ? -this.right.expression.data : this.right.data;\n          if (Math.abs(rawLeft - rawRight) <= 20) {\n            range = this.isInclusive ? function () {\n              var accum$;\n              accum$ = [];\n              for (var i$ = rawLeft; rawLeft <= rawRight ? i$ <= rawRight : i$ >= rawRight; rawLeft <= rawRight ? ++i$ : --i$)\n                accum$.push(i$);\n              return accum$;\n            }.apply(this, arguments) : function () {\n              var accum$;\n              accum$ = [];\n              for (var i$ = rawLeft; rawLeft <= rawRight ? i$ < rawRight : i$ > rawRight; rawLeft <= rawRight ? ++i$ : --i$)\n                accum$.push(i$);\n              return accum$;\n            }.apply(this, arguments);\n            return new JS.ArrayExpression(map(range, function (n) {\n              if (n < 0) {\n                return new JS.UnaryExpression('-', new JS.Literal(-n));\n              } else {\n                return new JS.Literal(n);\n              }\n            }));\n          }\n        }\n        accum = genSym('accum');\n        body = [stmt(new JS.AssignmentExpression('=', accum, new JS.ArrayExpression([])))];\n        if (needsCaching(left_)) {\n          left = genSym('from');\n          body.push(stmt(new JS.AssignmentExpression('=', left, left_)));\n        } else {\n          left = left_;\n        }\n        if (needsCaching(right_)) {\n          right = genSym('to');\n          body.push(stmt(new JS.AssignmentExpression('=', right, right_)));\n        } else {\n          right = right_;\n        }\n        i = genSym('i');\n        vars = new JS.VariableDeclaration('var', [new JS.VariableDeclarator(i, left)]);\n        conditionTest = new JS.BinaryExpression('<=', left, right);\n        conditionConsequent = new JS.BinaryExpression(this.isInclusive ? '<=' : '<', i, right);\n        conditionAlternate = new JS.BinaryExpression(this.isInclusive ? '>=' : '>', i, right);\n        condition = new JS.ConditionalExpression(conditionTest, conditionConsequent, conditionAlternate);\n        update = new JS.ConditionalExpression(conditionTest, new JS.UpdateExpression('++', true, i), new JS.UpdateExpression('--', true, i));\n        body.push(new JS.ForStatement(vars, condition, update, stmt(new JS.CallExpression(memberAccess(accum, 'push'), [i]))));\n        body.push(new JS.ReturnStatement(accum));\n        if (any(ancestry, function (ancestor) {\n            return ancestor['instanceof'](CS.Functions);\n          })) {\n          return new JS.CallExpression(memberAccess(new JS.FunctionExpression(null, [], new JS.BlockStatement(body)), 'apply'), [\n            new JS.ThisExpression,\n            new JS.Identifier('arguments')\n          ]);\n        } else {\n          return new JS.CallExpression(memberAccess(new JS.FunctionExpression(null, [], new JS.BlockStatement(body)), 'call'), [new JS.ThisExpression]);\n        }\n      }\n    ],\n    [\n      CS.ArrayInitialiser,\n      function () {\n        var groupMembers;\n        groupMembers = function (members) {\n          var cache$2, cache$3, sliced, ys, zs;\n          if (members.length === 0) {\n            return [];\n          } else {\n            cache$2 = span(members, function (x) {\n              return !x.spread;\n            });\n            ys = cache$2[0];\n            zs = cache$2[1];\n            if (ys.length === 0) {\n              sliced = helpers.slice(zs[0].expression);\n              cache$3 = [\n                sliced,\n                zs.slice(1)\n              ];\n              ys = cache$3[0];\n              zs = cache$3[1];\n              cache$3;\n            } else {\n              ys = new JS.ArrayExpression(map(ys, expr));\n            }\n            return [ys].concat(groupMembers(zs));\n          }\n        };\n        return function (param$) {\n          var cache$2, compile, grouped, members;\n          {\n            cache$2 = param$;\n            members = cache$2.members;\n            compile = cache$2.compile;\n          }\n          if (any(members, function (m) {\n              return m.spread;\n            })) {\n            grouped = map(groupMembers(members), expr);\n            if (grouped.length <= 1) {\n              return grouped[0];\n            } else {\n              return new JS.CallExpression(memberAccess(grouped[0], 'concat'), grouped.slice(1));\n            }\n          } else {\n            return new JS.ArrayExpression(map(members, expr));\n          }\n        };\n      }()\n    ],\n    [\n      CS.Spread,\n      function (param$) {\n        var expression;\n        expression = param$.expression;\n        return {\n          spread: true,\n          expression: expr(expression)\n        };\n      }\n    ],\n    [\n      CS.ObjectInitialiser,\n      function (param$) {\n        var members;\n        members = param$.members;\n        return new JS.ObjectExpression(members);\n      }\n    ],\n    [\n      CS.ObjectInitialiserMember,\n      function (param$) {\n        var cache$2, expression, keyName;\n        var key;\n        {\n          cache$2 = param$;\n          key = cache$2.key;\n          expression = cache$2.expression;\n        }\n        keyName = this.key.data;\n        key = isIdentifierName(keyName) ? new JS.Identifier(keyName) : new JS.Literal(keyName);\n        return new JS.Property(key, expr(expression));\n      }\n    ],\n    [\n      CS.DefaultParam,\n      function (param$) {\n        var cache$2, d, param;\n        {\n          cache$2 = param$;\n          param = cache$2.param;\n          d = cache$2['default'];\n        }\n        return {\n          param: param,\n          'default': d\n        };\n      }\n    ],\n    [\n      CS.Function,\n      CS.BoundFunction,\n      function () {\n        var handleParam;\n        handleParam = function (param, original, block, inScope) {\n          var decls, p;\n          switch (false) {\n          case !original['instanceof'](CS.Rest):\n            return param;\n          case !original['instanceof'](CS.Identifier):\n            return param;\n          case !original['instanceof'](CS.MemberAccessOps, CS.ObjectInitialiser, CS.ArrayInitialiser):\n            p = genSym('param');\n            decls = map(intersect(inScope, beingDeclared(original)), function (i) {\n              return new JS.Identifier(i);\n            });\n            block.body.unshift(stmt(assignment(param, p)));\n            if (decls.length)\n              block.body.unshift(makeVarDeclaration(decls));\n            return p;\n          case !original['instanceof'](CS.DefaultParam):\n            p = handleParam.call(this, param.param, original.param, block, inScope);\n            block.body.unshift(new JS.IfStatement(new JS.BinaryExpression('==', new JS.Literal(null), p), stmt(assignment(p, param['default']))));\n            return p;\n          default:\n            throw new Error('Unsupported parameter type: ' + original.className);\n          }\n        };\n        return function (param$) {\n          var alternate, ancestry, block, cache$2, consequent, i, index, inScope, last, newThis, numArgs, numParams, p, parameters_, paramName, performedRewrite, pIndex, reassignments, rewriteThis, test;\n          var body, parameters;\n          {\n            cache$2 = param$;\n            parameters = cache$2.parameters;\n            body = cache$2.body;\n            ancestry = cache$2.ancestry;\n            inScope = cache$2.inScope;\n          }\n          if (!(null != ancestry[0] ? ancestry[0]['instanceof'](CS.Constructor) : void 0))\n            body = makeReturn(body);\n          block = forceBlock(body);\n          last = block.body.slice(-1)[0];\n          if ((null != last ? last['instanceof'](JS.ReturnStatement) : void 0) && !(null != last.argument))\n            block.body = block.body.slice(0, -1);\n          parameters_ = parameters.length === 0 ? [] : (pIndex = parameters.length, function (accum$) {\n            while (pIndex--) {\n              accum$.push(handleParam.call(this, parameters[pIndex], this.parameters[pIndex], block, inScope));\n            }\n            return accum$;\n          }.call(this, []));\n          parameters = parameters_.reverse();\n          if (parameters.length > 0) {\n            if (parameters.slice(-1)[0].rest) {\n              paramName = parameters.pop().expression;\n              numParams = parameters.length;\n              test = new JS.BinaryExpression('>', memberAccess(new JS.Identifier('arguments'), 'length'), new JS.Literal(numParams));\n              consequent = helpers.slice(new JS.Identifier('arguments'), new JS.Literal(numParams));\n              alternate = new JS.ArrayExpression([]);\n              if (paramName['instanceof'](JS.Identifier) && in$(paramName.name, inScope))\n                block.body.unshift(makeVarDeclaration([paramName]));\n              block.body.unshift(stmt(new JS.AssignmentExpression('=', paramName, new JS.ConditionalExpression(test, consequent, alternate))));\n            } else if (any(parameters, function (p) {\n                return p.rest;\n              })) {\n              paramName = index = null;\n              for (var i$ = 0, length$ = parameters.length; i$ < length$; ++i$) {\n                p = parameters[i$];\n                i = i$;\n                if (!p.rest)\n                  continue;\n                paramName = p.expression;\n                index = i;\n                break;\n              }\n              parameters.splice(index, 1);\n              numParams = parameters.length;\n              numArgs = genSym('numArgs');\n              reassignments = new JS.IfStatement(new JS.BinaryExpression('>', new JS.AssignmentExpression('=', numArgs, memberAccess(new JS.Identifier('arguments'), 'length')), new JS.Literal(numParams)), new JS.BlockStatement([stmt(new JS.AssignmentExpression('=', paramName, helpers.slice(new JS.Identifier('arguments'), new JS.Literal(index), new JS.BinaryExpression('-', numArgs, new JS.Literal(numParams - index)))))]), new JS.BlockStatement([stmt(new JS.AssignmentExpression('=', paramName, new JS.ArrayExpression([])))]));\n              for (var i$1 = 0, length$1 = parameters.slice(index).length; i$1 < length$1; ++i$1) {\n                p = parameters.slice(index)[i$1];\n                i = i$1;\n                reassignments.consequent.body.push(stmt(new JS.AssignmentExpression('=', p, new JS.MemberExpression(true, new JS.Identifier('arguments'), new JS.BinaryExpression('-', numArgs, new JS.Literal(numParams - index - i))))));\n              }\n              if (paramName['instanceof'](JS.Identifier) && in$(paramName.name, inScope))\n                block.body.unshift(makeVarDeclaration([paramName]));\n              block.body.unshift(reassignments);\n            }\n            if (any(parameters, function (p) {\n                return p.rest;\n              }))\n              throw new Error('Parameter lists may not have more than one rest operator');\n          }\n          performedRewrite = false;\n          if (this['instanceof'](CS.BoundFunction)) {\n            newThis = genSym('this');\n            rewriteThis = generateMutatingWalker(function () {\n              if (this['instanceof'](JS.ThisExpression)) {\n                performedRewrite = true;\n                return newThis;\n              } else if (this['instanceof'](JS.FunctionExpression, JS.FunctionDeclaration)) {\n                return this;\n              } else {\n                return rewriteThis(this);\n              }\n            });\n            rewriteThis(block);\n          }\n          fn = new JS.FunctionExpression(null, parameters, block);\n          if (performedRewrite) {\n            return new JS.CallExpression(new JS.FunctionExpression(null, [newThis], new JS.BlockStatement([new JS.ReturnStatement(fn)])), [new JS.ThisExpression]);\n          } else {\n            return fn;\n          }\n        };\n      }()\n    ],\n    [\n      CS.Rest,\n      function (param$) {\n        var expression;\n        expression = param$.expression;\n        return {\n          rest: true,\n          expression: expression,\n          isExpression: true,\n          isStatement: true\n        };\n      }\n    ],\n    [\n      CS.Class,\n      function (param$) {\n        var _, args, block, body, c, cache$2, compile, ctorBody, ctorIndex, ctorRef, i, iife, instance, member, memberName, nameAssignee, params, parent, parentRef, protoAssignOp, protoMember, ps, rewriteThis;\n        var ctor, name;\n        {\n          cache$2 = param$;\n          nameAssignee = cache$2.nameAssignee;\n          parent = cache$2.parent;\n          name = cache$2.name;\n          ctor = cache$2.ctor;\n          body = cache$2.body;\n          compile = cache$2.compile;\n        }\n        args = [];\n        params = [];\n        parentRef = genSym('super');\n        block = forceBlock(body);\n        if (name['instanceof'](JS.Identifier) && in$(name.name, jsReserved))\n          name = genSym(name.name);\n        if (null != ctor) {\n          for (var i$ = 0, length$ = block.body.length; i$ < length$; ++i$) {\n            c = block.body[i$];\n            i = i$;\n            if (!c['instanceof'](JS.FunctionDeclaration))\n              continue;\n            ctorIndex = i;\n            break;\n          }\n          block.body.splice(ctorIndex, 1, ctor);\n        } else {\n          ctorBody = new JS.BlockStatement([]);\n          if (null != parent)\n            ctorBody.body.push(stmt(new JS.CallExpression(memberAccess(parentRef, 'apply'), [\n              new JS.ThisExpression,\n              new JS.Identifier('arguments')\n            ])));\n          ctor = new JS.FunctionDeclaration(name, [], ctorBody);\n          ctorIndex = 0;\n          block.body.unshift(ctor);\n        }\n        ctor.id = name;\n        if (null != this.ctor && !this.ctor.expression['instanceof'](CS.Functions)) {\n          ctorRef = genSym('externalCtor');\n          ctor.body.body.push(makeReturn(new JS.CallExpression(memberAccess(ctorRef, 'apply'), [\n            new JS.ThisExpression,\n            new JS.Identifier('arguments')\n          ])));\n          block.body.splice(ctorIndex, 0, stmt(new JS.AssignmentExpression('=', ctorRef, expr(compile(this.ctor.expression)))));\n        }\n        if (this.boundMembers.length > 0) {\n          instance = genSym('instance');\n          for (var i$1 = 0, length$1 = this.boundMembers.length; i$1 < length$1; ++i$1) {\n            protoAssignOp = this.boundMembers[i$1];\n            memberName = protoAssignOp.assignee.data.toString();\n            ps = function (accum$) {\n              for (var i$2 = 0, length$2 = protoAssignOp.expression.parameters.length; i$2 < length$2; ++i$2) {\n                _ = protoAssignOp.expression.parameters[i$2];\n                accum$.push(genSym());\n              }\n              return accum$;\n            }.call(this, []);\n            member = memberAccess(new JS.ThisExpression, memberName);\n            protoMember = memberAccess(memberAccess(name, 'prototype'), memberName);\n            fn = new JS.FunctionExpression(null, ps, new JS.BlockStatement([makeReturn(new JS.CallExpression(memberAccess(protoMember, 'apply'), [\n                instance,\n                new JS.Identifier('arguments')\n              ]))]));\n            ctor.body.body.unshift(stmt(new JS.AssignmentExpression('=', member, fn)));\n          }\n          ctor.body.body.unshift(stmt(new JS.AssignmentExpression('=', instance, new JS.ThisExpression)));\n        }\n        if (null != parent) {\n          params.push(parentRef);\n          args.push(parent);\n          block.body.unshift(stmt(helpers['extends'](name, parentRef)));\n        }\n        block.body.push(new JS.ReturnStatement(new JS.ThisExpression));\n        rewriteThis = generateMutatingWalker(function () {\n          if (this['instanceof'](JS.ThisExpression)) {\n            return name;\n          } else if (this['instanceof'](JS.FunctionExpression, JS.FunctionDeclaration)) {\n            return this;\n          } else {\n            return rewriteThis(this);\n          }\n        });\n        rewriteThis(block);\n        iife = new JS.CallExpression(new JS.FunctionExpression(null, params, block).g(), args);\n        if (null != nameAssignee) {\n          return assignment(nameAssignee, iife);\n        } else {\n          return iife;\n        }\n      }\n    ],\n    [\n      CS.Constructor,\n      function (param$) {\n        var expression, tmpName;\n        expression = param$.expression;\n        tmpName = genSym('class');\n        if (this.expression['instanceof'](CS.Functions)) {\n          return new JS.FunctionDeclaration(tmpName, expression.params, forceBlock(expression.body));\n        } else {\n          return new JS.FunctionDeclaration(tmpName, [], new JS.BlockStatement([]));\n        }\n      }\n    ],\n    [\n      CS.ClassProtoAssignOp,\n      function (param$) {\n        var assignee, cache$2, compile, expression, protoMember;\n        {\n          cache$2 = param$;\n          assignee = cache$2.assignee;\n          expression = cache$2.expression;\n          compile = cache$2.compile;\n        }\n        if (this.expression['instanceof'](CS.BoundFunction)) {\n          return compile(new CS.ClassProtoAssignOp(this.assignee, new CS.Function(this.expression.parameters, this.expression.body)));\n        } else {\n          protoMember = memberAccess(memberAccess(new JS.ThisExpression, 'prototype'), this.assignee.data);\n          return new JS.AssignmentExpression('=', protoMember, expression);\n        }\n      }\n    ],\n    [\n      CS.AssignOp,\n      function (param$) {\n        var ancestry, assignee, cache$2, expression;\n        {\n          cache$2 = param$;\n          assignee = cache$2.assignee;\n          expression = cache$2.expression;\n          ancestry = cache$2.ancestry;\n        }\n        return assignment(assignee, expression, usedAsExpression(this, ancestry));\n      }\n    ],\n    [\n      CS.CompoundAssignOp,\n      function (param$) {\n        var assignee, cache$2, condition, expression, inScope, op;\n        {\n          cache$2 = param$;\n          assignee = cache$2.assignee;\n          expression = cache$2.expression;\n          inScope = cache$2.inScope;\n        }\n        op = function () {\n          switch (this.op) {\n          case CS.LogicalAndOp.prototype.className:\n            return '&&';\n          case CS.LogicalOrOp.prototype.className:\n            return '||';\n          case CS.ExistsOp.prototype.className:\n            return '?';\n          case CS.BitOrOp.prototype.className:\n            return '|';\n          case CS.BitXorOp.prototype.className:\n            return '^';\n          case CS.BitAndOp.prototype.className:\n            return '&';\n          case CS.LeftShiftOp.prototype.className:\n            return '<<';\n          case CS.SignedRightShiftOp.prototype.className:\n            return '>>';\n          case CS.UnsignedRightShiftOp.prototype.className:\n            return '>>>';\n          case CS.PlusOp.prototype.className:\n            return '+';\n          case CS.SubtractOp.prototype.className:\n            return '-';\n          case CS.MultiplyOp.prototype.className:\n            return '*';\n          case CS.DivideOp.prototype.className:\n            return '/';\n          case CS.RemOp.prototype.className:\n            return '%';\n          case CS.ExpOp.prototype.className:\n            return '**';\n          default:\n            throw new Error('Unrecognised compound assignment operator');\n          }\n        }.call(this);\n        if ((op === '&&' || op === '||' || op === '?') && assignee['instanceof'](JS.Identifier) && !in$(assignee.name, inScope))\n          throw new Error('the variable \"' + assignee.name + '\" can\\'t be assigned with ?= because it has not been defined.');\n        switch (op) {\n        case '&&':\n        case '||':\n          return new JS.LogicalExpression(op, assignee, new JS.AssignmentExpression('=', assignee, expr(expression)));\n        case '?':\n          condition = new JS.BinaryExpression('!=', new JS.Literal(null), assignee);\n          return new JS.ConditionalExpression(condition, assignee, new JS.AssignmentExpression('=', assignee, expr(expression)));\n        case '**':\n          return new JS.AssignmentExpression('=', assignee, helpers.exp(assignee, expr(expression)));\n        default:\n          return new JS.AssignmentExpression('' + op + '=', assignee, expr(expression));\n        }\n      }\n    ],\n    [\n      CS.ChainedComparisonOp,\n      function (param$) {\n        var cache$2, compile, expression, left, lhs;\n        {\n          cache$2 = param$;\n          expression = cache$2.expression;\n          compile = cache$2.compile;\n        }\n        if (!this.expression.left['instanceof'](CS.ComparisonOps))\n          return expression;\n        left = expression.left.right;\n        lhs = compile(new CS.ChainedComparisonOp(this.expression.left));\n        if (needsCaching(this.expression.left.right)) {\n          left = genSym('cache');\n          if (this.expression.left.left['instanceof'](CS.ComparisonOps)) {\n            lhs.right.right = new JS.AssignmentExpression('=', left, lhs.right.right);\n          } else {\n            lhs.right = new JS.AssignmentExpression('=', left, lhs.right);\n          }\n        }\n        return new JS.LogicalExpression('&&', lhs, new JS.BinaryExpression(expression.operator, left, expression.right));\n      }\n    ],\n    [\n      CS.FunctionApplication,\n      function (param$) {\n        var args, cache$2, compile, context, lhs;\n        var fn;\n        {\n          cache$2 = param$;\n          fn = cache$2['function'];\n          args = cache$2['arguments'];\n          compile = cache$2.compile;\n        }\n        if (any(args, function (m) {\n            return m.spread;\n          })) {\n          lhs = this['function'];\n          context = new CS.Null;\n          if (needsCaching(this['function'])) {\n            context = new CS.GenSym('cache');\n            lhs = this['function']['instanceof'](CS.StaticMemberAccessOps) ? new this['function'].constructor(new CS.AssignOp(context, lhs.expression), this['function'].memberName) : this['function']['instanceof'](CS.DynamicMemberAccessOps) ? new this['function'].constructor(new CS.AssignOp(context, lhs.expression), this['function'].indexingExpr) : new CS.AssignOp(context, lhs);\n          } else if (lhs['instanceof'](CS.MemberAccessOps)) {\n            context = lhs.expression;\n          }\n          if (this['function']['instanceof'](CS.ProtoMemberAccessOp, CS.DynamicProtoMemberAccessOp)) {\n            context = new CS.MemberAccessOp(context, 'prototype');\n          } else if (this['function']['instanceof'](CS.SoakedProtoMemberAccessOp, CS.SoakedDynamicProtoMemberAccessOp)) {\n            context = new CS.SoakedMemberAccessOp(context, 'prototype');\n          }\n          return compile(new CS.FunctionApplication(new CS.MemberAccessOp(lhs, 'apply'), [\n            context,\n            new CS.ArrayInitialiser(this['arguments'])\n          ]));\n        } else if (hasSoak(this)) {\n          return compile(generateSoak(this));\n        } else {\n          return new JS.CallExpression(expr(fn), map(args, expr));\n        }\n      }\n    ],\n    [\n      CS.SoakedFunctionApplication,\n      function (param$) {\n        var compile;\n        compile = param$.compile;\n        return compile(generateSoak(this));\n      }\n    ],\n    [\n      CS.NewOp,\n      function (param$) {\n        var args, cache$2, compile, ctor;\n        {\n          cache$2 = param$;\n          ctor = cache$2.ctor;\n          args = cache$2['arguments'];\n          compile = cache$2.compile;\n        }\n        if (any(args, function (m) {\n            return m.spread;\n          })) {\n          return helpers.construct(ctor, compile(new CS.ArrayInitialiser(this['arguments'])));\n        } else {\n          return new JS.NewExpression(ctor, map(args, expr));\n        }\n      }\n    ],\n    [\n      CS.HeregExp,\n      function (param$) {\n        var args, expression, flag, flags;\n        expression = param$.expression;\n        args = [expression];\n        if (flags = function (accum$) {\n            for (var cache$2 = [\n                  'g',\n                  'i',\n                  'm',\n                  'y'\n                ], i$ = 0, length$ = cache$2.length; i$ < length$; ++i$) {\n              flag = cache$2[i$];\n              if (!this.flags[flag])\n                continue;\n              accum$.push(flag);\n            }\n            return accum$;\n          }.call(this, []).join(''))\n          args.push(new JS.Literal(flags));\n        return new JS.NewExpression(new JS.Identifier('RegExp'), args);\n      }\n    ],\n    [\n      CS.RegExp,\n      function () {\n        var flag, flags, re;\n        flags = function (accum$) {\n          for (var cache$2 = [\n                'g',\n                'i',\n                'm',\n                'y'\n              ], i$ = 0, length$ = cache$2.length; i$ < length$; ++i$) {\n            flag = cache$2[i$];\n            if (!this.flags[flag])\n              continue;\n            accum$.push(flag);\n          }\n          return accum$;\n        }.call(this, []).join('');\n        re = new RegExp(this.data, flags);\n        return new JS.Literal(re);\n      }\n    ],\n    [\n      CS.ConcatOp,\n      function (param$) {\n        var ancestry, cache$2, left, leftmost, plusOp, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n          ancestry = cache$2.ancestry;\n        }\n        plusOp = new JS.BinaryExpression('+', expr(left), expr(right));\n        if (!ancestry[0]['instanceof'](CS.ConcatOp)) {\n          leftmost = plusOp;\n          while (null != (null != leftmost.left ? leftmost.left.left : void 0)) {\n            leftmost = leftmost.left;\n          }\n          if (!(leftmost.left['instanceof'](JS.Literal) && 'string' === typeof leftmost.left.value))\n            leftmost.left = new JS.BinaryExpression('+', new JS.Literal(''), leftmost.left);\n        }\n        return plusOp;\n      }\n    ],\n    [\n      CS.MemberAccessOp,\n      CS.SoakedMemberAccessOp,\n      function (param$) {\n        var access, cache$2, compile, expression, offset;\n        {\n          cache$2 = param$;\n          expression = cache$2.expression;\n          compile = cache$2.compile;\n        }\n        if (hasSoak(this)) {\n          return expr(compile(generateSoak(this)));\n        } else {\n          access = memberAccess(expression, this.memberName);\n          if (this.raw) {\n            access.property.raw = this.memberName;\n            access.property.line = this.line;\n            offset = this.raw.length - this.memberName.length;\n            access.property.column = this.column + offset - 1;\n            access.property.offset = this.offset + offset - 1;\n            this.column += this.expression.raw.length;\n            this.offset += this.expression.raw.length;\n          }\n          return access;\n        }\n      }\n    ],\n    [\n      CS.ProtoMemberAccessOp,\n      CS.SoakedProtoMemberAccessOp,\n      function (param$) {\n        var cache$2, compile, expression;\n        {\n          cache$2 = param$;\n          expression = cache$2.expression;\n          compile = cache$2.compile;\n        }\n        if (hasSoak(this)) {\n          return expr(compile(generateSoak(this)));\n        } else {\n          return memberAccess(memberAccess(expression, 'prototype'), this.memberName);\n        }\n      }\n    ],\n    [\n      CS.DynamicMemberAccessOp,\n      CS.SoakedDynamicMemberAccessOp,\n      function (param$) {\n        var cache$2, compile, expression, indexingExpr;\n        {\n          cache$2 = param$;\n          expression = cache$2.expression;\n          indexingExpr = cache$2.indexingExpr;\n          compile = cache$2.compile;\n        }\n        if (hasSoak(this)) {\n          return expr(compile(generateSoak(this)));\n        } else {\n          return dynamicMemberAccess(expression, indexingExpr);\n        }\n      }\n    ],\n    [\n      CS.DynamicProtoMemberAccessOp,\n      CS.SoakedDynamicProtoMemberAccessOp,\n      function (param$) {\n        var cache$2, compile, expression, indexingExpr;\n        {\n          cache$2 = param$;\n          expression = cache$2.expression;\n          indexingExpr = cache$2.indexingExpr;\n          compile = cache$2.compile;\n        }\n        if (hasSoak(this)) {\n          return expr(compile(generateSoak(this)));\n        } else {\n          return dynamicMemberAccess(memberAccess(expression, 'prototype'), indexingExpr);\n        }\n      }\n    ],\n    [\n      CS.Slice,\n      function (param$) {\n        var args, cache$2, expression, left, right;\n        {\n          cache$2 = param$;\n          expression = cache$2.expression;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        args = null != left ? [left] : null != right ? [new JS.Literal(0)] : [];\n        if (null != right)\n          args.push(this.isInclusive ? right['instanceof'](JS.Literal) && typeof right.data === 'number' ? new JS.Literal(right.data + 1) : new JS.LogicalExpression('||', new JS.BinaryExpression('+', new JS.UnaryExpression('+', right), new JS.Literal(1)), new JS.Literal(9e9)) : right);\n        return new JS.CallExpression(memberAccess(expression, 'slice'), args);\n      }\n    ],\n    [\n      CS.ExistsOp,\n      function (param$) {\n        var ancestry, cache$2, condition, e, inScope, node;\n        var left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n          ancestry = cache$2.ancestry;\n          inScope = cache$2.inScope;\n        }\n        left = expr(left);\n        right = expr(right);\n        e = needsCaching(this.left) ? genSym('cache') : left;\n        condition = new JS.BinaryExpression('!=', new JS.Literal(null), e);\n        if (e['instanceof'](JS.Identifier) && !in$(e.name, inScope))\n          condition = new JS.LogicalExpression('&&', new JS.BinaryExpression('!==', new JS.Literal('undefined'), new JS.UnaryExpression('typeof', e)), condition);\n        node = new JS.ConditionalExpression(condition, e, right);\n        if (e === left) {\n          return node;\n        } else {\n          return new JS.SequenceExpression([\n            new JS.AssignmentExpression('=', e, left),\n            node\n          ]);\n        }\n      }\n    ],\n    [\n      CS.UnaryExistsOp,\n      function (param$) {\n        var cache$2, expression, inScope, nullTest, typeofTest;\n        {\n          cache$2 = param$;\n          expression = cache$2.expression;\n          inScope = cache$2.inScope;\n        }\n        nullTest = new JS.BinaryExpression('!=', new JS.Literal(null), expression);\n        if (expression['instanceof'](JS.Identifier) && !in$(expression.name, inScope)) {\n          typeofTest = new JS.BinaryExpression('!==', new JS.Literal('undefined'), new JS.UnaryExpression('typeof', expression));\n          return new JS.LogicalExpression('&&', typeofTest, nullTest);\n        } else {\n          return nullTest;\n        }\n      }\n    ],\n    [\n      CS.DoOp,\n      function () {\n        var deriveArgsFromParams;\n        deriveArgsFromParams = function (params) {\n          var args, index, param;\n          return args = function (accum$) {\n            for (var i$ = 0, length$ = params.length; i$ < length$; ++i$) {\n              param = params[i$];\n              index = i$;\n              accum$.push(function () {\n                switch (false) {\n                case !param['instanceof'](CS.DefaultParam):\n                  params[index] = param.param;\n                  return param['default'];\n                case !param['instanceof'](CS.Identifier, CS.MemberAccessOp):\n                  return param;\n                default:\n                  return helpers.undef();\n                }\n              }.call(this));\n            }\n            return accum$;\n          }.call(this, []);\n        };\n        return function (param$) {\n          var args, cache$2, compile, expression;\n          {\n            cache$2 = param$;\n            expression = cache$2.expression;\n            compile = cache$2.compile;\n          }\n          args = [];\n          if (this.expression['instanceof'](CS.AssignOp) && this.expression.expression['instanceof'](CS.Functions)) {\n            args = deriveArgsFromParams(this.expression.expression.parameters);\n          } else if (this.expression['instanceof'](CS.Functions)) {\n            args = deriveArgsFromParams(this.expression.parameters);\n          }\n          return compile(new CS.FunctionApplication(this.expression, args));\n        };\n      }()\n    ],\n    [\n      CS.Return,\n      function (param$) {\n        var e;\n        e = param$.expression;\n        return new JS.ReturnStatement(expr(e));\n      }\n    ],\n    [\n      CS.Break,\n      function () {\n        return new JS.BreakStatement;\n      }\n    ],\n    [\n      CS.Continue,\n      function () {\n        return new JS.ContinueStatement;\n      }\n    ],\n    [\n      CS.Debugger,\n      function () {\n        return new JS.DebuggerStatement;\n      }\n    ],\n    [\n      CS.ExpOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return helpers.exp(expr(left), expr(right));\n      }\n    ],\n    [\n      CS.DivideOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('/', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.MultiplyOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('*', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.RemOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('%', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.PlusOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('+', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.SubtractOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('-', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.OfOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('in', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.InOp,\n      function (param$) {\n        var cache$2, comparisons, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        if (right['instanceof'](JS.ArrayExpression) && right.elements.length < 5) {\n          switch (right.elements.length) {\n          case 0:\n            if (needsCaching(this.left)) {\n              return new JS.SequenceExpression([\n                left,\n                new JS.Literal(false)\n              ]);\n            } else {\n              return new JS.Literal(false);\n            }\n          case 1:\n            return new JS.BinaryExpression('===', left, right.elements[0]);\n          default:\n            if (needsCaching(this.left)) {\n              return helpers['in'](expr(left), expr(right));\n            } else {\n              comparisons = map(right.elements, function (e) {\n                return new JS.BinaryExpression('===', left, e);\n              });\n              return foldl1(comparisons, function (l, r) {\n                return new JS.LogicalExpression('||', l, r);\n              });\n            }\n          }\n        } else {\n          return helpers['in'](expr(left), expr(right));\n        }\n      }\n    ],\n    [\n      CS.ExtendsOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return helpers['extends'](expr(left), expr(right));\n      }\n    ],\n    [\n      CS.InstanceofOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('instanceof', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.LogicalAndOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.LogicalExpression('&&', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.LogicalOrOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.LogicalExpression('||', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.EQOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('===', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.NEQOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('!==', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.GTEOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('>=', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.GTOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('>', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.LTEOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('<=', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.LTOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('<', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.BitAndOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('&', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.BitOrOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('|', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.BitXorOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('^', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.LeftShiftOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('<<', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.SignedRightShiftOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('>>', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.UnsignedRightShiftOp,\n      function (param$) {\n        var cache$2, left, right;\n        {\n          cache$2 = param$;\n          left = cache$2.left;\n          right = cache$2.right;\n        }\n        return new JS.BinaryExpression('>>>', expr(left), expr(right));\n      }\n    ],\n    [\n      CS.PreDecrementOp,\n      function (param$) {\n        var e;\n        e = param$.expression;\n        return new JS.UpdateExpression('--', true, expr(e));\n      }\n    ],\n    [\n      CS.PreIncrementOp,\n      function (param$) {\n        var e;\n        e = param$.expression;\n        return new JS.UpdateExpression('++', true, expr(e));\n      }\n    ],\n    [\n      CS.PostDecrementOp,\n      function (param$) {\n        var e;\n        e = param$.expression;\n        return new JS.UpdateExpression('--', false, expr(e));\n      }\n    ],\n    [\n      CS.PostIncrementOp,\n      function (param$) {\n        var e;\n        e = param$.expression;\n        return new JS.UpdateExpression('++', false, expr(e));\n      }\n    ],\n    [\n      CS.UnaryPlusOp,\n      function (param$) {\n        var e;\n        e = param$.expression;\n        return new JS.UnaryExpression('+', expr(e));\n      }\n    ],\n    [\n      CS.UnaryNegateOp,\n      function (param$) {\n        var e;\n        e = param$.expression;\n        return new JS.UnaryExpression('-', expr(e));\n      }\n    ],\n    [\n      CS.LogicalNotOp,\n      function (param$) {\n        var e;\n        e = param$.expression;\n        return new JS.UnaryExpression('!', expr(e));\n      }\n    ],\n    [\n      CS.BitNotOp,\n      function (param$) {\n        var e;\n        e = param$.expression;\n        return new JS.UnaryExpression('~', expr(e));\n      }\n    ],\n    [\n      CS.TypeofOp,\n      function (param$) {\n        var e;\n        e = param$.expression;\n        return new JS.UnaryExpression('typeof', expr(e));\n      }\n    ],\n    [\n      CS.DeleteOp,\n      function (param$) {\n        var e;\n        e = param$.expression;\n        return new JS.UnaryExpression('delete', expr(e));\n      }\n    ],\n    [\n      CS.Identifier,\n      function () {\n        return new JS.Identifier(this.data);\n      }\n    ],\n    [\n      CS.GenSym,\n      function () {\n        var memos, symbols;\n        symbols = [];\n        memos = [];\n        return function () {\n          var memo;\n          if (in$(this, symbols)) {\n            return memos[symbols.indexOf(this)];\n          } else {\n            symbols.push(this);\n            memos.push(memo = genSym(this.data));\n            return memo;\n          }\n        };\n      }()\n    ],\n    [\n      CS.Bool,\n      CS.Int,\n      CS.Float,\n      CS.String,\n      function () {\n        return new JS.Literal(this.data);\n      }\n    ],\n    [\n      CS.Null,\n      function () {\n        return new JS.Literal(null);\n      }\n    ],\n    [\n      CS.Undefined,\n      function () {\n        return helpers.undef();\n      }\n    ],\n    [\n      CS.This,\n      function () {\n        return new JS.ThisExpression;\n      }\n    ],\n    [\n      CS.JavaScript,\n      function () {\n        return new JS.CallExpression(new JS.Identifier('eval'), [new JS.Literal(this.data)]);\n      }\n    ]\n  ];\n  function Compiler() {\n    var cache$2, ctor, ctors, handler, size$;\n    this.rules = {};\n    for (var i$ = 0, length$ = defaultRules.length; i$ < length$; ++i$) {\n      {\n        cache$2 = defaultRules[i$];\n        size$ = cache$2.length;\n        ctors = size$ > 1 ? [].slice.call(cache$2, 0, size$ - 1) : [];\n        handler = cache$2[size$ - 1];\n      }\n      for (var i$1 = 0, length$1 = ctors.length; i$1 < length$1; ++i$1) {\n        ctor = ctors[i$1];\n        this.addRule(ctor, handler);\n      }\n    }\n  }\n  Compiler.prototype.addRule = function (ctor, handler) {\n    this.rules[ctor.prototype.className] = handler;\n    return this;\n  };\n  Compiler.prototype.compile = function () {\n    var defaultRule, generateSymbols, walk;\n    walk = function (fn, inScope, ancestry, options) {\n      var child, childName, children, jsNode, member;\n      if ((null != ancestry[0] ? ancestry[0]['instanceof'](CS.Function, CS.BoundFunction) : void 0) && this === ancestry[0].body)\n        inScope = union(inScope, concatMap(ancestry[0].parameters, beingDeclared));\n      ancestry.unshift(this);\n      children = {};\n      for (var i$ = 0, length$ = this.childNodes.length; i$ < length$; ++i$) {\n        childName = this.childNodes[i$];\n        if (!(null != this[childName]))\n          continue;\n        children[childName] = in$(childName, this.listMembers) ? function (accum$) {\n          for (var i$1 = 0, length$1 = this[childName].length; i$1 < length$1; ++i$1) {\n            member = this[childName][i$1];\n            jsNode = walk.call(member, fn, inScope, ancestry);\n            inScope = union(inScope, envEnrichments(member, inScope));\n            accum$.push(jsNode);\n          }\n          return accum$;\n        }.call(this, []) : (child = this[childName], jsNode = walk.call(child, fn, inScope, ancestry), inScope = union(inScope, envEnrichments(child, inScope)), jsNode);\n      }\n      children.inScope = inScope;\n      children.ancestry = ancestry;\n      children.options = options;\n      children.compile = function (node) {\n        return walk.call(node, fn, inScope, ancestry);\n      };\n      ancestry.shift();\n      jsNode = fn.call(this, children);\n      jsNode.raw = this.raw;\n      jsNode.line = this.line;\n      jsNode.column = this.column - 1;\n      jsNode.offset = this.offset;\n      return jsNode;\n    };\n    generateSymbols = function () {\n      var format, generateChildSymbols, generatedSymbols, generateName;\n      generatedSymbols = {};\n      format = function (pre, counter) {\n        var cache$2, div, mod;\n        if (pre) {\n          return '' + pre + '$' + (counter || '');\n        } else if (counter < 26) {\n          return String.fromCharCode(97 + counter);\n        } else {\n          cache$2 = divMod(counter, 26);\n          div = cache$2[0];\n          mod = cache$2[1];\n          return format(pre, div - 1) + format(pre, mod);\n        }\n      };\n      generateName = function (node, param$) {\n        var cache$2, formatted, nsCounters, usedSymbols;\n        {\n          cache$2 = param$;\n          usedSymbols = cache$2.usedSymbols;\n          nsCounters = cache$2.nsCounters;\n        }\n        if (owns(generatedSymbols, node.uniqueId)) {\n          return generatedSymbols[node.uniqueId];\n        } else {\n          nsCounters[node.ns] = owns(nsCounters, node.ns) ? 1 + nsCounters[node.ns] : 0;\n          while (in$(formatted = format(node.ns, nsCounters[node.ns]), usedSymbols)) {\n            ++nsCounters[node.ns];\n          }\n          return generatedSymbols[node.uniqueId] = formatted;\n        }\n      };\n      generateChildSymbols = generateMutatingWalker(function (state) {\n        var alreadyDeclared, cache$2, declaredSymbols, declNames, decls, k, newNode, nsCounters, nsCounters_, params, undeclared, usedSymbols, v;\n        state.declaredSymbols = union(state.declaredSymbols, declarationsNeeded(this));\n        cache$2 = state;\n        declaredSymbols = cache$2.declaredSymbols;\n        usedSymbols = cache$2.usedSymbols;\n        nsCounters = cache$2.nsCounters;\n        newNode = this['instanceof'](JS.GenSym) ? (newNode = new JS.Identifier(generateName(this, state)), usedSymbols.push(newNode.name), newNode) : isScopeBoundary(this) ? (params = concatMap(this.params, collectIdentifiers), nsCounters_ = {}, function (accum$) {\n          for (k in nsCounters) {\n            if (!isOwn$(nsCounters, k))\n              continue;\n            v = nsCounters[k];\n            accum$.push(nsCounters_[k] = v);\n          }\n          return accum$;\n        }.call(this, []), newNode = generateChildSymbols(this, {\n          declaredSymbols: union(declaredSymbols, params),\n          usedSymbols: union(usedSymbols, params),\n          nsCounters: nsCounters_\n        }), newNode.body = forceBlock(newNode.body), undeclared = declarationsNeededRecursive(this.body), undeclared = difference(undeclared, map(variableDeclarations(this.body), function (id) {\n          return id.name;\n        })), alreadyDeclared = union(declaredSymbols, concatMap(this.params, collectIdentifiers)), declNames = nub(difference(undeclared, alreadyDeclared)), decls = map(declNames, function (name) {\n          return new JS.Identifier(name);\n        }), decls.length > 0 ? newNode.body.body.unshift(makeVarDeclaration(decls)) : void 0, newNode) : generateChildSymbols(this, state);\n        state.declaredSymbols = union(declaredSymbols, declarationsNeededRecursive(newNode));\n        return newNode;\n      });\n      return function (jsAST, state) {\n        var inScope, needed, program;\n        inScope = (null != state.declaredSymbols ? state.declaredSymbols : []).slice();\n        program = generateChildSymbols(jsAST, state);\n        if (program['instanceof'](JS.Program)) {\n          needed = nub(difference(concatMap(program.body, declarationsNeededRecursive), inScope));\n          if (needed.length > 0)\n            program.body.unshift(makeVarDeclaration(needed.map(function (n) {\n              return new JS.Identifier(n);\n            })));\n        }\n        return program;\n      };\n    }();\n    defaultRule = function () {\n      throw new Error('compile: Non-exhaustive patterns in case: ' + this.className);\n    };\n    return function (ast, options) {\n      var inScope, jsAST, rules;\n      if (null == options)\n        options = {};\n      if (null != options.bare)\n        options.bare;\n      else\n        options.bare = false;\n      rules = this.rules;\n      inScope = null != options.inScope ? options.inScope : [];\n      jsAST = walk.call(ast, function () {\n        return (null != rules[this.className] ? rules[this.className] : defaultRule).apply(this, arguments);\n      }, inScope, [], options);\n      return generateSymbols(jsAST, {\n        declaredSymbols: inScope,\n        usedSymbols: union(jsReserved.slice(), collectIdentifiers(jsAST)),\n        nsCounters: {}\n      });\n    };\n  }();\n  return Compiler;\n}();\nfunction in$(member, list) {\n  for (var i = 0, length = list.length; i < length; ++i)\n    if (i in list && list[i] === member)\n      return true;\n  return false;\n}\nfunction isOwn$(o, p) {\n  return {}.hasOwnProperty.call(o, p);\n}\n\n},{\"./../package.json\":30,\"./functional-helpers\":2,\"./helpers\":3,\"./js-nodes\":4,\"./nodes\":6}],2:[function(require,module,exports){\n// Generated by CoffeeScript 2.0.0-beta9-dev\nvar concat, foldl, map, nub, span;\nthis.any = function (list, fn) {\n  var e;\n  for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {\n    e = list[i$];\n    if (fn(e))\n      return true;\n  }\n  return false;\n};\nthis.all = function (list, fn) {\n  var e;\n  for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {\n    e = list[i$];\n    if (!fn(e))\n      return false;\n  }\n  return true;\n};\nthis.foldl = foldl = function (memo, list, fn) {\n  var i;\n  for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {\n    i = list[i$];\n    memo = fn(memo, i);\n  }\n  return memo;\n};\nthis.foldl1 = function (list, fn) {\n  return foldl(list[0], list.slice(1), fn);\n};\nthis.map = map = function (list, fn) {\n  var e;\n  return function (accum$) {\n    for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {\n      e = list[i$];\n      accum$.push(fn(e));\n    }\n    return accum$;\n  }.call(this, []);\n};\nthis.concat = concat = function (list) {\n  var cache$;\n  return (cache$ = []).concat.apply(cache$, [].slice.call(list));\n};\nthis.concatMap = function (list, fn) {\n  return concat(map(list, fn));\n};\nthis.intersect = function (listA, listB) {\n  var a;\n  return function (accum$) {\n    for (var i$ = 0, length$ = listA.length; i$ < length$; ++i$) {\n      a = listA[i$];\n      if (!in$(a, listB))\n        continue;\n      accum$.push(a);\n    }\n    return accum$;\n  }.call(this, []);\n};\nthis.difference = function (listA, listB) {\n  var a;\n  return function (accum$) {\n    for (var i$ = 0, length$ = listA.length; i$ < length$; ++i$) {\n      a = listA[i$];\n      if (!!in$(a, listB))\n        continue;\n      accum$.push(a);\n    }\n    return accum$;\n  }.call(this, []);\n};\nthis.nub = nub = function (list) {\n  var i, result;\n  result = [];\n  for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {\n    i = list[i$];\n    if (!!in$(i, result))\n      continue;\n    result.push(i);\n  }\n  return result;\n};\nthis.union = function (listA, listB) {\n  var b;\n  return listA.concat(function (accum$) {\n    for (var cache$ = nub(listB), i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {\n      b = cache$[i$];\n      if (!!in$(b, listA))\n        continue;\n      accum$.push(b);\n    }\n    return accum$;\n  }.call(this, []));\n};\nthis.flip = function (fn) {\n  return function (b, a) {\n    return fn.call(this, a, b);\n  };\n};\nthis.owns = function (hop) {\n  return function (a, b) {\n    return hop.call(a, b);\n  };\n}({}.hasOwnProperty);\nthis.span = span = function (list, f) {\n  var cache$, ys, zs;\n  if (list.length === 0) {\n    return [\n      [],\n      []\n    ];\n  } else if (f(list[0])) {\n    cache$ = span(list.slice(1), f);\n    ys = cache$[0];\n    zs = cache$[1];\n    return [\n      [list[0]].concat([].slice.call(ys)),\n      zs\n    ];\n  } else {\n    return [\n      [],\n      list\n    ];\n  }\n};\nthis.divMod = function (a, b) {\n  var c, div, mod;\n  c = a % b;\n  mod = c < 0 ? c + b : c;\n  div = Math.floor(a / b);\n  return [\n    div,\n    mod\n  ];\n};\nthis.partition = function (list, fn) {\n  var item, result;\n  result = [\n    [],\n    []\n  ];\n  for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {\n    item = list[i$];\n    result[+!fn(item)].push(item);\n  }\n  return result;\n};\nfunction in$(member, list) {\n  for (var i = 0, length = list.length; i < length; ++i)\n    if (i in list && list[i] === member)\n      return true;\n  return false;\n}\n\n},{}],3:[function(require,module,exports){\n(function (process){\n// Generated by CoffeeScript 2.0.0-beta9-dev\nvar beingDeclared, cache$, cleanMarkers, colourise, COLOURS, concat, concatMap, CS, difference, envEnrichments, envEnrichments_, foldl, humanReadable, map, nub, numberLines, pointToErrorLocation, SUPPORTS_COLOUR, usedAsExpression, usedAsExpression_;\ncache$ = require('./functional-helpers');\nconcat = cache$.concat;\nconcatMap = cache$.concatMap;\ndifference = cache$.difference;\nfoldl = cache$.foldl;\nmap = cache$.map;\nnub = cache$.nub;\nCS = require('./nodes');\nCOLOURS = {\n  red: '\\x1B[31m',\n  green: '\\x1B[32m',\n  yellow: '\\x1B[33m',\n  blue: '\\x1B[34m',\n  magenta: '\\x1B[35m',\n  cyan: '\\x1B[36m'\n};\nSUPPORTS_COLOUR = ('undefined' !== typeof process && null != process && null != process.stderr ? process.stderr.isTTY : void 0) && !process.env.NODE_DISABLE_COLORS;\ncolourise = function (colour, str) {\n  if (SUPPORTS_COLOUR) {\n    return '' + COLOURS[colour] + str + '\\x1B[39m';\n  } else {\n    return str;\n  }\n};\nthis.numberLines = numberLines = function (input, startLine) {\n  var currLine, i, line, lines, numbered, pad, padSize;\n  if (null == startLine)\n    startLine = 1;\n  lines = input.split('\\n');\n  padSize = ('' + (lines.length + startLine - 1)).length;\n  numbered = function (accum$) {\n    for (var i$ = 0, length$ = lines.length; i$ < length$; ++i$) {\n      line = lines[i$];\n      i = i$;\n      currLine = '' + (i + startLine);\n      pad = Array(padSize + 1).join('0').slice(currLine.length);\n      accum$.push('' + pad + currLine + ' : ' + lines[i]);\n    }\n    return accum$;\n  }.call(this, []);\n  return numbered.join('\\n');\n};\ncleanMarkers = function (str) {\n  return str.replace(/[\\uEFEF\\uEFFE\\uEFFF]/g, '');\n};\nthis.humanReadable = humanReadable = function (str) {\n  return str.replace(/\\uEFEF/g, '(INDENT)').replace(/\\uEFFE/g, '(DEDENT)').replace(/\\uEFFF/g, '(TERM)');\n};\nthis.formatParserError = function (input, e) {\n  var found, message, realColumn, unicode;\n  realColumn = cleanMarkers(('' + input.split('\\n')[e.line - 1] + '\\n').slice(0, e.column)).length;\n  if (!(null != e.found))\n    return 'Syntax error on line ' + e.line + ', column ' + realColumn + ': unexpected end of input';\n  found = JSON.stringify(humanReadable(e.found));\n  found = found.replace(/^\"|\"$/g, '').replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"');\n  unicode = e.found.charCodeAt(0).toString(16).toUpperCase();\n  unicode = '\\\\u' + '0000'.slice(unicode.length) + unicode;\n  message = 'Syntax error on line ' + e.line + ', column ' + realColumn + \": unexpected '\" + found + \"' (\" + unicode + ')';\n  return '' + message + '\\n' + pointToErrorLocation(input, e.line, realColumn);\n};\nthis.pointToErrorLocation = pointToErrorLocation = function (source, line, column, numLinesOfContext) {\n  var currentLineOffset, lines, numberedLines, padSize, postLines, preLines, startLine;\n  if (null == numLinesOfContext)\n    numLinesOfContext = 3;\n  lines = source.split('\\n');\n  if (!lines[lines.length - 1])\n    lines.pop();\n  currentLineOffset = line - 1;\n  startLine = currentLineOffset - numLinesOfContext;\n  if (startLine < 0)\n    startLine = 0;\n  preLines = lines.slice(startLine, +currentLineOffset + 1 || 9e9);\n  preLines[preLines.length - 1] = colourise('yellow', preLines[preLines.length - 1]);\n  postLines = lines.slice(currentLineOffset + 1, +(currentLineOffset + numLinesOfContext) + 1 || 9e9);\n  numberedLines = numberLines(cleanMarkers([].slice.call(preLines).concat([].slice.call(postLines)).join('\\n')), startLine + 1).split('\\n');\n  preLines = numberedLines.slice(0, preLines.length);\n  postLines = numberedLines.slice(preLines.length);\n  column = cleanMarkers(('' + lines[currentLineOffset] + '\\n').slice(0, column)).length;\n  padSize = (currentLineOffset + 1 + postLines.length).toString(10).length;\n  return [].slice.call(preLines).concat(['' + colourise('red', Array(padSize + 1).join('^')) + ' : ' + Array(column).join(' ') + colourise('red', '^')], [].slice.call(postLines)).join('\\n');\n};\nthis.beingDeclared = beingDeclared = function (assignment) {\n  switch (false) {\n  case !!(null != assignment):\n    return [];\n  case !assignment['instanceof'](CS.Identifiers):\n    return [assignment.data];\n  case !assignment['instanceof'](CS.Rest):\n    return beingDeclared(assignment.expression);\n  case !assignment['instanceof'](CS.MemberAccessOps):\n    return [];\n  case !assignment['instanceof'](CS.DefaultParam):\n    return beingDeclared(assignment.param);\n  case !assignment['instanceof'](CS.ArrayInitialiser):\n    return concatMap(assignment.members, beingDeclared);\n  case !assignment['instanceof'](CS.ObjectInitialiser):\n    return concatMap(assignment.vals(), beingDeclared);\n  default:\n    throw new Error('beingDeclared: Non-exhaustive patterns in case: ' + assignment.className);\n  }\n};\nthis.declarationsFor = function (node, inScope) {\n  var vars;\n  vars = envEnrichments(node, inScope);\n  return foldl(new CS.Undefined().g(), vars, function (expr, v) {\n    return new CS.AssignOp(new CS.Identifier(v).g(), expr).g();\n  });\n};\nusedAsExpression_ = function (ancestors) {\n  var grandparent, parent;\n  parent = ancestors[0];\n  grandparent = ancestors[1];\n  switch (false) {\n  case !!(null != parent):\n    return true;\n  case !parent['instanceof'](CS.Program, CS.Class):\n    return false;\n  case !parent['instanceof'](CS.SeqOp):\n    return this === parent.right && usedAsExpression(parent, ancestors.slice(1));\n  case !(parent['instanceof'](CS.Block) && parent.statements.indexOf(this) !== parent.statements.length - 1):\n    return false;\n  case !(parent['instanceof'](CS.Functions) && parent.body === this && null != grandparent && grandparent['instanceof'](CS.Constructor)):\n    return false;\n  default:\n    return true;\n  }\n};\nthis.usedAsExpression = usedAsExpression = function (node, ancestors) {\n  return usedAsExpression_.call(node, ancestors);\n};\nenvEnrichments_ = function (inScope) {\n  var possibilities;\n  if (null == inScope)\n    inScope = [];\n  possibilities = nub(function () {\n    switch (false) {\n    case !this['instanceof'](CS.AssignOp):\n      return concat([\n        beingDeclared(this.assignee),\n        envEnrichments(this.expression)\n      ]);\n    case !this['instanceof'](CS.Class):\n      return concat([\n        beingDeclared(this.nameAssignee),\n        envEnrichments(this.parent)\n      ]);\n    case !this['instanceof'](CS.ForIn, CS.ForOf):\n      return concat([\n        beingDeclared(this.keyAssignee),\n        beingDeclared(this.valAssignee),\n        envEnrichments(this.target),\n        envEnrichments(this.step),\n        envEnrichments(this.filter),\n        envEnrichments(this.body)\n      ]);\n    case !this['instanceof'](CS.Try):\n      return concat([\n        beingDeclared(this.catchAssignee),\n        envEnrichments(this.body),\n        envEnrichments(this.catchBody),\n        envEnrichments(this.finallyBody)\n      ]);\n    case !this['instanceof'](CS.Functions):\n      return [];\n    default:\n      return concatMap(this.childNodes, function (this$) {\n        return function (child) {\n          if (in$(child, this$.listMembers)) {\n            return concatMap(this$[child], function (m) {\n              return envEnrichments(m, inScope);\n            });\n          } else {\n            return envEnrichments(this$[child], inScope);\n          }\n        };\n      }(this));\n    }\n  }.call(this));\n  return difference(possibilities, inScope);\n};\nthis.envEnrichments = envEnrichments = function (node) {\n  var args;\n  args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n  if (null != node) {\n    return envEnrichments_.apply(node, args);\n  } else {\n    return [];\n  }\n};\nfunction in$(member, list) {\n  for (var i = 0, length = list.length; i < length; ++i)\n    if (i in list && list[i] === member)\n      return true;\n  return false;\n}\n\n}).call(this,require(\"JkpR2F\"))\n},{\"./functional-helpers\":2,\"./nodes\":6,\"JkpR2F\":34}],4:[function(require,module,exports){\n// Generated by CoffeeScript 2.0.0-beta9-dev\nvar ArrayExpression, AssignmentExpression, BinaryExpression, BlockStatement, cache$, cache$1, CallExpression, createNode, ctor, difference, exports, FunctionDeclaration, FunctionExpression, GenSym, handleLists, handlePrimitives, Identifier, isStatement, Literal, LogicalExpression, MemberExpression, NewExpression, node, nodeData, Nodes, ObjectExpression, params, Program, SequenceExpression, SwitchCase, SwitchStatement, TryStatement, UnaryExpression, UpdateExpression, VariableDeclaration;\ndifference = require('./functional-helpers').difference;\nexports = null != ('undefined' !== typeof module && null != module ? module.exports : void 0) ? 'undefined' !== typeof module && null != module ? module.exports : void 0 : this;\ncreateNode = function (type, props) {\n  return function (super$) {\n    extends$(class$, super$);\n    function class$() {\n      var i, prop;\n      for (var i$ = 0, length$ = props.length; i$ < length$; ++i$) {\n        prop = props[i$];\n        i = i$;\n        this[prop] = arguments[i];\n      }\n    }\n    class$.prototype.type = type;\n    class$.prototype.childNodes = props;\n    return class$;\n  }(Nodes);\n};\nthis.Nodes = Nodes = function () {\n  function Nodes() {\n  }\n  Nodes.prototype.listMembers = [];\n  Nodes.prototype['instanceof'] = function () {\n    var ctor, ctors;\n    ctors = arguments.length > 0 ? [].slice.call(arguments, 0) : [];\n    for (var i$ = 0, length$ = ctors.length; i$ < length$; ++i$) {\n      ctor = ctors[i$];\n      if (!(this.type === ctor.prototype.type))\n        continue;\n      return true;\n    }\n    return false;\n  };\n  Nodes.prototype.toBasicObject = function () {\n    var child, obj, p;\n    obj = { type: this.type };\n    if (null != this.leadingComments)\n      obj.leadingComments = this.leadingComments;\n    for (var i$ = 0, length$ = this.childNodes.length; i$ < length$; ++i$) {\n      child = this.childNodes[i$];\n      if (in$(child, this.listMembers)) {\n        obj[child] = function (accum$) {\n          for (var i$1 = 0, length$1 = this[child].length; i$1 < length$1; ++i$1) {\n            p = this[child][i$1];\n            accum$.push('undefined' !== typeof p && null != p ? p.toBasicObject() : void 0);\n          }\n          return accum$;\n        }.call(this, []);\n      } else {\n        obj[child] = null != this[child] ? this[child].toBasicObject() : void 0;\n      }\n    }\n    if (null != this.line && null != this.column)\n      obj.loc = {\n        start: {\n          line: this.line,\n          column: this.column\n        }\n      };\n    if (null != this.offset)\n      obj.range = [\n        this.offset,\n        null != this.raw ? this.offset + this.raw.length : void 0\n      ];\n    if (null != this.raw)\n      obj.raw = this.raw;\n    return obj;\n  };\n  return Nodes;\n}();\nnodeData = [\n  [\n    'ArrayExpression',\n    false,\n    ['elements']\n  ],\n  [\n    'AssignmentExpression',\n    false,\n    [\n      'operator',\n      'left',\n      'right'\n    ]\n  ],\n  [\n    'BinaryExpression',\n    false,\n    [\n      'operator',\n      'left',\n      'right'\n    ]\n  ],\n  [\n    'BlockStatement',\n    true,\n    ['body']\n  ],\n  [\n    'BreakStatement',\n    true,\n    ['label']\n  ],\n  [\n    'CallExpression',\n    false,\n    [\n      'callee',\n      'arguments'\n    ]\n  ],\n  [\n    'CatchClause',\n    true,\n    [\n      'param',\n      'body'\n    ]\n  ],\n  [\n    'ConditionalExpression',\n    false,\n    [\n      'test',\n      'consequent',\n      'alternate'\n    ]\n  ],\n  [\n    'ContinueStatement',\n    true,\n    ['label']\n  ],\n  [\n    'DebuggerStatement',\n    true,\n    []\n  ],\n  [\n    'DoWhileStatement',\n    true,\n    [\n      'body',\n      'test'\n    ]\n  ],\n  [\n    'EmptyStatement',\n    true,\n    []\n  ],\n  [\n    'ExpressionStatement',\n    true,\n    ['expression']\n  ],\n  [\n    'ForInStatement',\n    true,\n    [\n      'left',\n      'right',\n      'body'\n    ]\n  ],\n  [\n    'ForStatement',\n    true,\n    [\n      'init',\n      'test',\n      'update',\n      'body'\n    ]\n  ],\n  [\n    'FunctionDeclaration',\n    true,\n    [\n      'id',\n      'params',\n      'body'\n    ]\n  ],\n  [\n    'FunctionExpression',\n    false,\n    [\n      'id',\n      'params',\n      'body'\n    ]\n  ],\n  [\n    'GenSym',\n    false,\n    [\n      'ns',\n      'uniqueId'\n    ]\n  ],\n  [\n    'Identifier',\n    false,\n    ['name']\n  ],\n  [\n    'IfStatement',\n    true,\n    [\n      'test',\n      'consequent',\n      'alternate'\n    ]\n  ],\n  [\n    'LabeledStatement',\n    true,\n    [\n      'label',\n      'body'\n    ]\n  ],\n  [\n    'Literal',\n    false,\n    ['value']\n  ],\n  [\n    'LogicalExpression',\n    false,\n    [\n      'operator',\n      'left',\n      'right'\n    ]\n  ],\n  [\n    'MemberExpression',\n    false,\n    [\n      'computed',\n      'object',\n      'property'\n    ]\n  ],\n  [\n    'NewExpression',\n    false,\n    [\n      'callee',\n      'arguments'\n    ]\n  ],\n  [\n    'ObjectExpression',\n    false,\n    ['properties']\n  ],\n  [\n    'Program',\n    true,\n    ['body']\n  ],\n  [\n    'Property',\n    true,\n    [\n      'key',\n      'value'\n    ]\n  ],\n  [\n    'ReturnStatement',\n    true,\n    ['argument']\n  ],\n  [\n    'SequenceExpression',\n    false,\n    ['expressions']\n  ],\n  [\n    'SwitchCase',\n    true,\n    [\n      'test',\n      'consequent'\n    ]\n  ],\n  [\n    'SwitchStatement',\n    true,\n    [\n      'discriminant',\n      'cases'\n    ]\n  ],\n  [\n    'ThisExpression',\n    false,\n    []\n  ],\n  [\n    'ThrowStatement',\n    true,\n    ['argument']\n  ],\n  [\n    'TryStatement',\n    true,\n    [\n      'block',\n      'handlers',\n      'finalizer'\n    ]\n  ],\n  [\n    'UnaryExpression',\n    false,\n    [\n      'operator',\n      'argument'\n    ]\n  ],\n  [\n    'UpdateExpression',\n    false,\n    [\n      'operator',\n      'prefix',\n      'argument'\n    ]\n  ],\n  [\n    'VariableDeclaration',\n    true,\n    [\n      'kind',\n      'declarations'\n    ]\n  ],\n  [\n    'VariableDeclarator',\n    true,\n    [\n      'id',\n      'init'\n    ]\n  ],\n  [\n    'WhileStatement',\n    true,\n    [\n      'test',\n      'body'\n    ]\n  ],\n  [\n    'WithStatement',\n    true,\n    [\n      'object',\n      'body'\n    ]\n  ]\n];\nfor (var i$ = 0, length$ = nodeData.length; i$ < length$; ++i$) {\n  {\n    cache$ = nodeData[i$];\n    node = cache$[0];\n    isStatement = cache$[1];\n    params = cache$[2];\n  }\n  exports[node] = ctor = createNode(node, params);\n  ctor.prototype.isStatement = isStatement;\n  ctor.prototype.isExpression = !isStatement;\n}\ncache$1 = exports;\nProgram = cache$1.Program;\nBlockStatement = cache$1.BlockStatement;\nLiteral = cache$1.Literal;\nIdentifier = cache$1.Identifier;\nFunctionExpression = cache$1.FunctionExpression;\nCallExpression = cache$1.CallExpression;\nSequenceExpression = cache$1.SequenceExpression;\nArrayExpression = cache$1.ArrayExpression;\nBinaryExpression = cache$1.BinaryExpression;\nUnaryExpression = cache$1.UnaryExpression;\nNewExpression = cache$1.NewExpression;\nVariableDeclaration = cache$1.VariableDeclaration;\nObjectExpression = cache$1.ObjectExpression;\nMemberExpression = cache$1.MemberExpression;\nUpdateExpression = cache$1.UpdateExpression;\nAssignmentExpression = cache$1.AssignmentExpression;\nLogicalExpression = cache$1.LogicalExpression;\nGenSym = cache$1.GenSym;\nFunctionDeclaration = cache$1.FunctionDeclaration;\nVariableDeclaration = cache$1.VariableDeclaration;\nSwitchStatement = cache$1.SwitchStatement;\nSwitchCase = cache$1.SwitchCase;\nTryStatement = cache$1.TryStatement;\nhandlePrimitives = function (ctor, primitives) {\n  ctor.prototype.childNodes = difference(ctor.prototype.childNodes, primitives);\n  return ctor.prototype.toBasicObject = function () {\n    var obj, primitive;\n    obj = Nodes.prototype.toBasicObject.call(this);\n    for (var i$1 = 0, length$1 = primitives.length; i$1 < length$1; ++i$1) {\n      primitive = primitives[i$1];\n      obj[primitive] = this[primitive];\n    }\n    return obj;\n  };\n};\nhandlePrimitives(AssignmentExpression, ['operator']);\nhandlePrimitives(BinaryExpression, ['operator']);\nhandlePrimitives(LogicalExpression, ['operator']);\nhandlePrimitives(GenSym, [\n  'ns',\n  'uniqueId'\n]);\nhandlePrimitives(Identifier, ['name']);\nhandlePrimitives(Literal, ['value']);\nhandlePrimitives(MemberExpression, ['computed']);\nhandlePrimitives(UnaryExpression, ['operator']);\nhandlePrimitives(UpdateExpression, [\n  'operator',\n  'prefix'\n]);\nhandlePrimitives(VariableDeclaration, ['kind']);\nhandleLists = function (ctor, listProps) {\n  return ctor.prototype.listMembers = listProps;\n};\nhandleLists(ArrayExpression, ['elements']);\nhandleLists(BlockStatement, ['body']);\nhandleLists(CallExpression, ['arguments']);\nhandleLists(FunctionDeclaration, ['params']);\nhandleLists(FunctionExpression, ['params']);\nhandleLists(NewExpression, ['arguments']);\nhandleLists(ObjectExpression, ['properties']);\nhandleLists(Program, ['body']);\nhandleLists(SequenceExpression, ['expressions']);\nhandleLists(SwitchCase, ['consequent']);\nhandleLists(SwitchStatement, ['cases']);\nhandleLists(TryStatement, ['handlers']);\nhandleLists(VariableDeclaration, ['declarations']);\nFunctionDeclaration.prototype.generated = FunctionExpression.prototype.generated = false;\nFunctionDeclaration.prototype.g = FunctionExpression.prototype.g = function () {\n  this.generated = true;\n  return this;\n};\nfunction isOwn$(o, p) {\n  return {}.hasOwnProperty.call(o, p);\n}\nfunction extends$(child, parent) {\n  for (var key in parent)\n    if (isOwn$(parent, key))\n      child[key] = parent[key];\n  function ctor() {\n    this.constructor = child;\n  }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor;\n  child.__super__ = parent.prototype;\n  return child;\n}\nfunction in$(member, list) {\n  for (var i = 0, length = list.length; i < length; ++i)\n    if (i in list && list[i] === member)\n      return true;\n  return false;\n}\n\n},{\"./functional-helpers\":2}],5:[function(require,module,exports){\n// Generated by CoffeeScript 2.0.0-beta9-dev\nvar CoffeeScript, Compiler, cscodegen, escodegen, escodegenFormat, ext, formatParserError, Nodes, Optimiser, Parser, pkg, Preprocessor;\nformatParserError = require('./helpers').formatParserError;\nNodes = require('./nodes');\nPreprocessor = require('./preprocessor').Preprocessor;\nParser = require('./parser');\nOptimiser = require('./optimiser').Optimiser;\nCompiler = require('./compiler').Compiler;\ncscodegen = function () {\n  try {\n    return require('cscodegen');\n  } catch (e$) {\n    return;\n  }\n}.call(this);\nescodegen = function () {\n  try {\n    return require('escodegen');\n  } catch (e$1) {\n    return;\n  }\n}.call(this);\npkg = require('./../package.json');\nescodegenFormat = {\n  indent: {\n    style: '  ',\n    base: 0\n  },\n  renumber: true,\n  hexadecimal: true,\n  quotes: 'auto',\n  parentheses: false\n};\nCoffeeScript = {\n  CoffeeScript: CoffeeScript,\n  Compiler: Compiler,\n  Optimiser: Optimiser,\n  Parser: Parser,\n  Preprocessor: Preprocessor,\n  Nodes: Nodes,\n  VERSION: pkg.version,\n  parse: function (coffee, options) {\n    var e, parsed, preprocessed;\n    if (null == options)\n      options = {};\n    try {\n      preprocessed = Preprocessor.process(coffee, { literate: options.literate });\n      parsed = Parser.parse(preprocessed, {\n        raw: options.raw,\n        inputSource: options.inputSource\n      });\n      if (options.optimise) {\n        return Optimiser.optimise(parsed);\n      } else {\n        return parsed;\n      }\n    } catch (e$2) {\n      e = e$2;\n      if (!(e instanceof Parser.SyntaxError))\n        throw e;\n      throw new Error(formatParserError(preprocessed, e));\n    }\n  },\n  compile: function (csAst, options) {\n    return Compiler.compile(csAst, options).toBasicObject();\n  },\n  cs: function (csAst, options) {\n  },\n  jsWithSourceMap: function (jsAst, name, options) {\n    var targetName;\n    if (null == name)\n      name = 'unknown';\n    if (null == options)\n      options = {};\n    if (!(null != escodegen))\n      throw new Error('escodegen not found: run `npm install escodegen`');\n    if (!{}.hasOwnProperty.call(jsAst, 'type'))\n      jsAst = jsAst.toBasicObject();\n    targetName = options.sourceMapFile || options.sourceMap && options.output.match(/^.*[\\\\\\/]([^\\\\\\/]+)$/)[1];\n    return escodegen.generate(jsAst, {\n      comment: !options.compact,\n      sourceMapWithCode: true,\n      sourceMap: name,\n      file: targetName || 'unknown',\n      format: options.compact ? escodegen.FORMAT_MINIFY : null != options.format ? options.format : escodegenFormat\n    });\n  },\n  js: function (jsAst, options) {\n    return this.jsWithSourceMap(jsAst, null, options).code;\n  },\n  sourceMap: function (jsAst, name, options) {\n    return this.jsWithSourceMap(jsAst, name, options).map;\n  },\n  cs2js: function (input, options) {\n    var csAST, jsAST;\n    if (null == options)\n      options = {};\n    if (null != options.optimise)\n      options.optimise;\n    else\n      options.optimise = true;\n    csAST = CoffeeScript.parse(input, options);\n    jsAST = CoffeeScript.compile(csAST, { bare: options.bare });\n    return CoffeeScript.js(jsAST, { compact: options.compact || options.minify });\n  }\n};\nmodule.exports = CoffeeScript;\nif (null != (null != require.extensions ? require.extensions['.node'] : void 0)) {\n  CoffeeScript.register = function () {\n    return require('./register');\n  };\n  for (var cache$ = [\n        '.coffee',\n        '.litcoffee'\n      ], i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {\n    ext = cache$[i$];\n    if (null != require.extensions[ext])\n      require.extensions[ext];\n    else\n      require.extensions[ext] = function () {\n        throw new Error('Use CoffeeScript.register() or require the coffee-script-redux/register module to require ' + ext + ' files.');\n      };\n  }\n}\n\n},{\"./../package.json\":30,\"./compiler\":1,\"./helpers\":3,\"./nodes\":6,\"./optimiser\":7,\"./parser\":8,\"./preprocessor\":9,\"./register\":10,\"cscodegen\":13,\"escodegen\":14}],6:[function(require,module,exports){\n// Generated by CoffeeScript 2.0.0-beta9-dev\nvar ArrayInitialiser, Block, Bool, cache$, cache$1, Class, CompoundAssignOp, concat, concatMap, Conditional, createNodes, difference, exports, ForOf, FunctionApplications, Functions, GenSym, handleLists, handlePrimitives, HeregExp, Identifier, Identifiers, map, NegatedConditional, NewOp, Nodes, nub, ObjectInitialiser, Primitives, Range, RegExp, RegExps, Slice, StaticMemberAccessOps, Super, Switch, SwitchCase, union, While;\ncache$ = require('./functional-helpers');\nmap = cache$.map;\nconcat = cache$.concat;\nconcatMap = cache$.concatMap;\ndifference = cache$.difference;\nnub = cache$.nub;\nunion = cache$.union;\nexports = null != ('undefined' !== typeof module && null != module ? module.exports : void 0) ? 'undefined' !== typeof module && null != module ? module.exports : void 0 : this;\ncreateNodes = function (subclasses, superclasses) {\n  var className, specs;\n  if (null == superclasses)\n    superclasses = [];\n  for (className in subclasses) {\n    if (!isOwn$(subclasses, className))\n      continue;\n    specs = subclasses[className];\n    (function (className) {\n      var externalCtor$, isCategory, klass, params, superclass;\n      superclass = null != superclasses[0] ? superclasses[0] : function () {\n      };\n      isCategory = 'undefined' !== typeof specs && null != specs && specs.length === 2;\n      params = 'undefined' !== typeof specs && null != specs ? function () {\n        switch (specs.length) {\n        case 0:\n          return [];\n        case 1:\n        case 2:\n          return specs[0];\n        }\n      }.call(this) : null;\n      if (null != params)\n        params;\n      else\n        params = null != superclass.prototype.childNodes ? superclass.prototype.childNodes : [];\n      klass = function (super$) {\n        extends$(class$, super$);\n        externalCtor$ = isCategory ? function () {\n        } : function () {\n          var i, param;\n          for (var i$ = 0, length$ = params.length; i$ < length$; ++i$) {\n            param = params[i$];\n            i = i$;\n            this[param] = arguments[i];\n          }\n          if (null != this.initialise)\n            this.initialise.apply(this, arguments);\n          return this;\n        };\n        function class$() {\n          return externalCtor$.apply(this, arguments);\n        }\n        class$.prototype.className = className;\n        class$.superclasses = superclasses;\n        return class$;\n      }(superclass);\n      if (null != ('undefined' !== typeof specs && null != specs ? specs[0] : void 0))\n        klass.prototype.childNodes = specs[0];\n      if (isCategory)\n        createNodes(specs[1], [klass].concat([].slice.call(superclasses)));\n      return exports[className] = klass;\n    }(className));\n  }\n};\ncreateNodes({\n  Nodes: [\n    [],\n    {\n      BinOps: [\n        [\n          'left',\n          'right'\n        ],\n        {\n          AssignOps: [\n            [\n              'assignee',\n              'expression'\n            ],\n            {\n              AssignOp: null,\n              ClassProtoAssignOp: null,\n              CompoundAssignOp: [[\n                  'op',\n                  'assignee',\n                  'expression'\n                ]]\n            }\n          ],\n          BitOps: [\n            null,\n            {\n              BitAndOp: null,\n              BitOrOp: null,\n              BitXorOp: null,\n              LeftShiftOp: null,\n              SignedRightShiftOp: null,\n              UnsignedRightShiftOp: null\n            }\n          ],\n          ComparisonOps: [\n            null,\n            {\n              EQOp: null,\n              GTEOp: null,\n              GTOp: null,\n              LTEOp: null,\n              LTOp: null,\n              NEQOp: null\n            }\n          ],\n          ConcatOp: null,\n          ExistsOp: null,\n          ExtendsOp: null,\n          InOp: null,\n          InstanceofOp: null,\n          LogicalOps: [\n            null,\n            {\n              LogicalAndOp: null,\n              LogicalOrOp: null\n            }\n          ],\n          MathsOps: [\n            null,\n            {\n              ExpOp: null,\n              DivideOp: null,\n              MultiplyOp: null,\n              RemOp: null,\n              SubtractOp: null\n            }\n          ],\n          OfOp: null,\n          PlusOp: null,\n          Range: [[\n              'isInclusive',\n              'left',\n              'right'\n            ]],\n          SeqOp: null\n        }\n      ],\n      Statements: [\n        [],\n        {\n          Break: null,\n          Continue: null,\n          Debugger: null,\n          Return: [['expression']],\n          Throw: [['expression']]\n        }\n      ],\n      UnaryOps: [\n        ['expression'],\n        {\n          BitNotOp: null,\n          DeleteOp: null,\n          DoOp: null,\n          LogicalNotOp: null,\n          NewOp: [[\n              'ctor',\n              'arguments'\n            ]],\n          PreDecrementOp: null,\n          PreIncrementOp: null,\n          PostDecrementOp: null,\n          PostIncrementOp: null,\n          TypeofOp: null,\n          UnaryExistsOp: null,\n          UnaryNegateOp: null,\n          UnaryPlusOp: null\n        }\n      ],\n      MemberAccessOps: [\n        null,\n        {\n          StaticMemberAccessOps: [\n            [\n              'expression',\n              'memberName'\n            ],\n            {\n              MemberAccessOp: null,\n              ProtoMemberAccessOp: null,\n              SoakedMemberAccessOp: null,\n              SoakedProtoMemberAccessOp: null\n            }\n          ],\n          DynamicMemberAccessOps: [\n            [\n              'expression',\n              'indexingExpr'\n            ],\n            {\n              DynamicMemberAccessOp: null,\n              DynamicProtoMemberAccessOp: null,\n              SoakedDynamicMemberAccessOp: null,\n              SoakedDynamicProtoMemberAccessOp: null\n            }\n          ]\n        }\n      ],\n      ChainedComparisonOp: [['expression']],\n      FunctionApplications: [\n        [\n          'function',\n          'arguments'\n        ],\n        {\n          FunctionApplication: null,\n          SoakedFunctionApplication: null\n        }\n      ],\n      Super: [['arguments']],\n      Program: [['body']],\n      Block: [['statements']],\n      Conditional: [[\n          'condition',\n          'consequent',\n          'alternate'\n        ]],\n      ForIn: [[\n          'valAssignee',\n          'keyAssignee',\n          'target',\n          'step',\n          'filter',\n          'body'\n        ]],\n      ForOf: [[\n          'isOwn',\n          'keyAssignee',\n          'valAssignee',\n          'target',\n          'filter',\n          'body'\n        ]],\n      Switch: [[\n          'expression',\n          'cases',\n          'alternate'\n        ]],\n      SwitchCase: [[\n          'conditions',\n          'consequent'\n        ]],\n      Try: [[\n          'body',\n          'catchAssignee',\n          'catchBody',\n          'finallyBody'\n        ]],\n      While: [[\n          'condition',\n          'body'\n        ]],\n      ArrayInitialiser: [['members']],\n      ObjectInitialiser: [['members']],\n      ObjectInitialiserMember: [[\n          'key',\n          'expression'\n        ]],\n      Class: [[\n          'nameAssignee',\n          'parent',\n          'ctor',\n          'body',\n          'boundMembers'\n        ]],\n      Constructor: [['expression']],\n      Functions: [\n        [\n          'parameters',\n          'body'\n        ],\n        {\n          Function: null,\n          BoundFunction: null\n        }\n      ],\n      DefaultParam: [[\n          'param',\n          'default'\n        ]],\n      Identifiers: [\n        ['data'],\n        {\n          Identifier: null,\n          GenSym: null\n        }\n      ],\n      Null: null,\n      Primitives: [\n        ['data'],\n        {\n          Bool: null,\n          JavaScript: null,\n          Numbers: [\n            null,\n            {\n              Int: null,\n              Float: null\n            }\n          ],\n          String: null\n        }\n      ],\n      RegExps: [\n        null,\n        {\n          RegExp: [[\n              'data',\n              'flags'\n            ]],\n          HeregExp: [[\n              'expression',\n              'flags'\n            ]]\n        }\n      ],\n      This: null,\n      Undefined: null,\n      Slice: [[\n          'expression',\n          'isInclusive',\n          'left',\n          'right'\n        ]],\n      Rest: [['expression']],\n      Spread: [['expression']]\n    }\n  ]\n});\ncache$1 = exports;\nNodes = cache$1.Nodes;\nPrimitives = cache$1.Primitives;\nCompoundAssignOp = cache$1.CompoundAssignOp;\nStaticMemberAccessOps = cache$1.StaticMemberAccessOps;\nRange = cache$1.Range;\nArrayInitialiser = cache$1.ArrayInitialiser;\nObjectInitialiser = cache$1.ObjectInitialiser;\nNegatedConditional = cache$1.NegatedConditional;\nConditional = cache$1.Conditional;\nIdentifier = cache$1.Identifier;\nForOf = cache$1.ForOf;\nFunctions = cache$1.Functions;\nWhile = cache$1.While;\nClass = cache$1.Class;\nBlock = cache$1.Block;\nNewOp = cache$1.NewOp;\nBool = cache$1.Bool;\nFunctionApplications = cache$1.FunctionApplications;\nRegExps = cache$1.RegExps;\nRegExp = cache$1.RegExp;\nHeregExp = cache$1.HeregExp;\nSuper = cache$1.Super;\nSlice = cache$1.Slice;\nSwitch = cache$1.Switch;\nIdentifiers = cache$1.Identifiers;\nSwitchCase = cache$1.SwitchCase;\nGenSym = cache$1.GenSym;\nNodes.fromBasicObject = function (obj) {\n  return exports[obj.type].fromBasicObject(obj);\n};\nNodes.prototype.listMembers = [];\nNodes.prototype.toBasicObject = function () {\n  var child, obj, p;\n  obj = { type: this.className };\n  if (null != this.line)\n    obj.line = this.line;\n  if (null != this.column)\n    obj.column = this.column;\n  if (null != this.raw) {\n    obj.raw = this.raw;\n    if (null != this.offset)\n      obj.range = [\n        this.offset,\n        this.offset + this.raw.length\n      ];\n  }\n  for (var i$ = 0, length$ = this.childNodes.length; i$ < length$; ++i$) {\n    child = this.childNodes[i$];\n    if (in$(child, this.listMembers)) {\n      obj[child] = function (accum$) {\n        for (var i$1 = 0, length$1 = this[child].length; i$1 < length$1; ++i$1) {\n          p = this[child][i$1];\n          accum$.push(p.toBasicObject());\n        }\n        return accum$;\n      }.call(this, []);\n    } else {\n      obj[child] = null != this[child] ? this[child].toBasicObject() : void 0;\n    }\n  }\n  return obj;\n};\nNodes.prototype.fold = function (memo, fn) {\n  var child, p;\n  for (var i$ = 0, length$ = this.childNodes.length; i$ < length$; ++i$) {\n    child = this.childNodes[i$];\n    if (in$(child, this.listMembers)) {\n      memo = function (accum$) {\n        for (var i$1 = 0, length$1 = this[child].length; i$1 < length$1; ++i$1) {\n          p = this[child][i$1];\n          accum$.push(p.fold(memo, fn));\n        }\n        return accum$;\n      }.call(this, []);\n    } else {\n      memo = this[child].fold(memo, fn);\n    }\n  }\n  return fn(memo, this);\n};\nNodes.prototype.clone = function () {\n  var ctor, k, n, v;\n  ctor = function () {\n  };\n  ctor.prototype = this.constructor.prototype;\n  n = new ctor;\n  for (k in this) {\n    if (!isOwn$(this, k))\n      continue;\n    v = this[k];\n    n[k] = v;\n  }\n  return n;\n};\nNodes.prototype['instanceof'] = function () {\n  var ctor, ctors, superclasses;\n  ctors = arguments.length > 0 ? [].slice.call(arguments, 0) : [];\n  superclasses = map(this.constructor.superclasses, function (c) {\n    return c.prototype.className;\n  });\n  for (var i$ = 0, length$ = ctors.length; i$ < length$; ++i$) {\n    ctor = ctors[i$];\n    if (!in$(ctor.prototype.className, [this.className].concat([].slice.call(superclasses))))\n      continue;\n    return true;\n  }\n  return false;\n};\nNodes.prototype.r = function (param$) {\n  this.raw = param$;\n  return this;\n};\nNodes.prototype.p = function (param$, param$1, param$2) {\n  this.line = param$;\n  this.column = param$1;\n  this.offset = param$2;\n  return this;\n};\nNodes.prototype.generated = false;\nNodes.prototype.g = function () {\n  this.generated = true;\n  return this;\n};\nhandlePrimitives = function (ctor) {\n  var primitives;\n  primitives = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n  ctor.prototype.childNodes = difference(ctor.prototype.childNodes, primitives);\n  return ctor.prototype.toBasicObject = function () {\n    var obj, primitive;\n    obj = Nodes.prototype.toBasicObject.call(this);\n    for (var i$ = 0, length$ = primitives.length; i$ < length$; ++i$) {\n      primitive = primitives[i$];\n      obj[primitive] = this[primitive];\n    }\n    return obj;\n  };\n};\nhandlePrimitives(Class, 'boundMembers');\nhandlePrimitives(CompoundAssignOp, 'op');\nhandlePrimitives(ForOf, 'isOwn');\nhandlePrimitives(HeregExp, 'flags');\nhandlePrimitives(Identifiers, 'data');\nhandlePrimitives(Primitives, 'data');\nhandlePrimitives(Range, 'isInclusive');\nhandlePrimitives(RegExp, 'data', 'flags');\nhandlePrimitives(Slice, 'isInclusive');\nhandlePrimitives(StaticMemberAccessOps, 'memberName');\nhandleLists = function (ctor) {\n  var listProps;\n  listProps = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n  return ctor.prototype.listMembers = listProps;\n};\nhandleLists(ArrayInitialiser, 'members');\nhandleLists(Block, 'statements');\nhandleLists(Functions, 'parameters');\nhandleLists(FunctionApplications, 'arguments');\nhandleLists(NewOp, 'arguments');\nhandleLists(ObjectInitialiser, 'members');\nhandleLists(Super, 'arguments');\nhandleLists(Switch, 'cases');\nhandleLists(SwitchCase, 'conditions');\nBlock.wrap = function (s) {\n  return new Block(null != s ? [s] : []).r(s.raw).p(s.line, s.column);\n};\nClass.prototype.initialise = function () {\n  if (null != this.boundMembers)\n    this.boundMembers;\n  else\n    this.boundMembers = [];\n  this.name = new GenSym('class');\n  if (null != this.nameAssignee)\n    return this.name = function () {\n      switch (false) {\n      case !this.nameAssignee['instanceof'](Identifier):\n        return new Identifier(this.nameAssignee.data);\n      case !this.nameAssignee['instanceof'](StaticMemberAccessOps):\n        return new Identifier(this.nameAssignee.memberName);\n      default:\n        return this.name;\n      }\n    }.call(this);\n};\nClass.prototype.childNodes.push('name');\nObjectInitialiser.prototype.keys = function () {\n  return map(this.members, function (m) {\n    return m.key;\n  });\n};\nObjectInitialiser.prototype.vals = function () {\n  return map(this.members, function (m) {\n    return m.expression;\n  });\n};\nRegExps.prototype.initialise = function (_, flags) {\n  var flag;\n  this.flags = {};\n  for (var cache$2 = [\n        'g',\n        'i',\n        'm',\n        'y'\n      ], i$ = 0, length$ = cache$2.length; i$ < length$; ++i$) {\n    flag = cache$2[i$];\n    this.flags[flag] = in$(flag, flags);\n  }\n};\nexports.NegatedConditional = function (super$) {\n  extends$(NegatedConditional, super$);\n  function NegatedConditional() {\n    Conditional.apply(this, arguments);\n  }\n  return NegatedConditional;\n}(Conditional);\nexports.NegatedWhile = function (super$1) {\n  extends$(NegatedWhile, super$1);\n  function NegatedWhile() {\n    While.apply(this, arguments);\n  }\n  return NegatedWhile;\n}(While);\nexports.Loop = function (super$2) {\n  extends$(Loop, super$2);\n  function Loop(body) {\n    While.call(this, new Bool(true).g(), body);\n  }\n  return Loop;\n}(While);\nfunction isOwn$(o, p) {\n  return {}.hasOwnProperty.call(o, p);\n}\nfunction extends$(child, parent) {\n  for (var key in parent)\n    if (isOwn$(parent, key))\n      child[key] = parent[key];\n  function ctor() {\n    this.constructor = child;\n  }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor;\n  child.__super__ = parent.prototype;\n  return child;\n}\nfunction in$(member, list) {\n  for (var i = 0, length = list.length; i < length; ++i)\n    if (i in list && list[i] === member)\n      return true;\n  return false;\n}\n\n},{\"./functional-helpers\":2}],7:[function(require,module,exports){\n(function (global){\n// Generated by CoffeeScript 2.0.0-beta9-dev\nvar all, any, beingDeclared, cache$, cache$1, concat, concatMap, CS, declarationsFor, defaultRules, difference, envEnrichments, exports, foldl, foldl1, isFalsey, isTruthy, makeDispatcher, mayHaveSideEffects, union, usedAsExpression;\ncache$ = require('./functional-helpers');\nall = cache$.all;\nany = cache$.any;\nconcat = cache$.concat;\nconcatMap = cache$.concatMap;\ndifference = cache$.difference;\nfoldl = cache$.foldl;\nfoldl1 = cache$.foldl1;\nunion = cache$.union;\ncache$1 = require('./helpers');\nbeingDeclared = cache$1.beingDeclared;\ndeclarationsFor = cache$1.declarationsFor;\nusedAsExpression = cache$1.usedAsExpression;\nenvEnrichments = cache$1.envEnrichments;\nCS = require('./nodes');\nexports = null != ('undefined' !== typeof module && null != module ? module.exports : void 0) ? 'undefined' !== typeof module && null != module ? module.exports : void 0 : this;\nmakeDispatcher = function (defaultValue, handlers, defaultHandler) {\n  var cache$2, ctor, ctors, handler, handlers_, size$;\n  if (null == defaultHandler)\n    defaultHandler = function () {\n    };\n  handlers_ = {};\n  for (var i$ = 0, length$ = handlers.length; i$ < length$; ++i$) {\n    {\n      cache$2 = handlers[i$];\n      size$ = cache$2.length;\n      ctors = size$ > 1 ? [].slice.call(cache$2, 0, size$ - 1) : [];\n      handler = cache$2[size$ - 1];\n    }\n    for (var i$1 = 0, length$1 = ctors.length; i$1 < length$1; ++i$1) {\n      ctor = ctors[i$1];\n      handlers_[ctor.prototype.className] = handler;\n    }\n  }\n  return function (node) {\n    var args;\n    args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n    if (!(null != node))\n      return defaultValue;\n    handler = Object.prototype.hasOwnProperty.call(handlers_, node.className) ? handlers_[node.className] : defaultHandler;\n    return handler.apply(node, args);\n  };\n};\nisTruthy = makeDispatcher(false, [\n  [\n    CS.ArrayInitialiser,\n    CS.Class,\n    CS.DeleteOp,\n    CS.ForIn,\n    CS.ForOf,\n    CS.Function,\n    CS.BoundFunction,\n    CS.HeregExp,\n    CS.ObjectInitialiser,\n    CS.Range,\n    CS.RegExp,\n    CS.Slice,\n    CS.TypeofOp,\n    CS.While,\n    function () {\n      return true;\n    }\n  ],\n  [\n    CS.AssignOp,\n    function () {\n      return isTruthy(this.expression);\n    }\n  ],\n  [\n    CS.Block,\n    function () {\n      if (this.statements.length === 0) {\n        return false;\n      } else {\n        return isTruthy(this.statements[this.statements.length - 1]);\n      }\n    }\n  ],\n  [\n    CS.Bool,\n    CS.Float,\n    CS.Int,\n    CS.String,\n    function () {\n      return !!this.data;\n    }\n  ],\n  [\n    CS.Conditional,\n    function () {\n      return isTruthy(this.condition) && isTruthy(this.consequent) || isFalsey(this.condition) && isTruthy(this.alternate);\n    }\n  ],\n  [\n    CS.LogicalAndOp,\n    function () {\n      return isTruthy(this.left) && isTruthy(this.right);\n    }\n  ],\n  [\n    CS.LogicalNotOp,\n    function () {\n      return isFalsey(this.expression);\n    }\n  ],\n  [\n    CS.LogicalOrOp,\n    function () {\n      return isTruthy(this.left) || isTruthy(this.right);\n    }\n  ],\n  [\n    CS.Program,\n    function () {\n      return isTruthy(this.body);\n    }\n  ],\n  [\n    CS.SeqOp,\n    function () {\n      return isTruthy(this.right);\n    }\n  ],\n  [\n    CS.Switch,\n    function () {\n      return all(this.cases, isTruthy) && (null != this.alternate ? isTruthy(this.alternate) : true);\n    }\n  ],\n  [\n    CS.SwitchCase,\n    function () {\n      return isTruthy(this.consequent);\n    }\n  ],\n  [\n    CS.UnaryExistsOp,\n    function () {\n      return isTruthy(this.expression) || this.expression['instanceof'](CS.Int, CS.Float, CS.String, CS.UnaryPlusOp, CS.UnaryNegateOp, CS.LogicalNotOp);\n    }\n  ]\n], function () {\n  return false;\n});\nisFalsey = makeDispatcher(false, [\n  [\n    CS.Null,\n    CS.Undefined,\n    function () {\n      return true;\n    }\n  ],\n  [\n    CS.AssignOp,\n    function () {\n      return isFalsey(this.expression);\n    }\n  ],\n  [\n    CS.Block,\n    function () {\n      if (this.statements.length === 0) {\n        return true;\n      } else {\n        return isFalsey(this.statements[this.statements.length - 1]);\n      }\n    }\n  ],\n  [\n    CS.Bool,\n    CS.Float,\n    CS.Int,\n    CS.String,\n    function () {\n      return !this.data;\n    }\n  ],\n  [\n    CS.Conditional,\n    function () {\n      return isTruthy(this.condition) && isFalsey(this.consequent) || isFalsey(this.condition) && isFalsey(this.alternate);\n    }\n  ],\n  [\n    CS.LogicalAndOp,\n    function () {\n      return isFalsey(this.left) || isFalsey(this.right);\n    }\n  ],\n  [\n    CS.LogicalNotOp,\n    function () {\n      return isTruthy(this.expression);\n    }\n  ],\n  [\n    CS.LogicalOrOp,\n    function () {\n      return isFalsey(this.left) && isFalsey(this.right);\n    }\n  ],\n  [\n    CS.Program,\n    function () {\n      return isFalsey(this.body);\n    }\n  ],\n  [\n    CS.SeqOp,\n    function () {\n      return isFalsey(this.right);\n    }\n  ],\n  [\n    CS.Switch,\n    function () {\n      return all(this.cases, isFalsey) && (null != this.alternate ? isFalsey(this.alternate) : true);\n    }\n  ],\n  [\n    CS.SwitchCase,\n    function () {\n      return isFalsey(this.block);\n    }\n  ],\n  [\n    CS.UnaryExistsOp,\n    function () {\n      return this.expression['instanceof'](CS.Null, CS.Undefined);\n    }\n  ]\n], function () {\n  return false;\n});\nmayHaveSideEffects = makeDispatcher(false, [\n  [\n    CS.Function,\n    CS.BoundFunction,\n    CS.Null,\n    CS.RegExp,\n    CS.This,\n    CS.Undefined,\n    function () {\n      return false;\n    }\n  ],\n  [\n    CS.Break,\n    CS.Continue,\n    CS.Debugger,\n    CS.DeleteOp,\n    CS.NewOp,\n    CS.Return,\n    CS.Super,\n    CS.PreDecrementOp,\n    CS.PreIncrementOp,\n    CS.PostDecrementOp,\n    CS.PostIncrementOp,\n    CS.ClassProtoAssignOp,\n    CS.Constructor,\n    CS.Throw,\n    CS.JavaScript,\n    CS.ExtendsOp,\n    function () {\n      return true;\n    }\n  ],\n  [\n    CS.Class,\n    function (inScope) {\n      return mayHaveSideEffects(this.parent, inScope) || null != this.nameAssignee && (this.name || beingDeclared(this.nameAssignee).length > 0);\n    }\n  ],\n  [\n    CS.Conditional,\n    function (inScope) {\n      return mayHaveSideEffects(this.condition, inScope) || !isFalsey(this.condition) && mayHaveSideEffects(this.consequent, inScope) || !isTruthy(this.condition) && mayHaveSideEffects(this.alternate, inScope);\n    }\n  ],\n  [\n    CS.DoOp,\n    function (inScope) {\n      var args, newScope, p;\n      if (!this.expression['instanceof'](CS.Functions))\n        return true;\n      newScope = difference(inScope, concatMap(this.expression.parameters, beingDeclared));\n      args = function (accum$) {\n        for (var i$ = 0, length$ = this.expression.parameters.length; i$ < length$; ++i$) {\n          p = this.expression.parameters[i$];\n          accum$.push(p['instanceof'](CS.AssignOp) ? p.expression : p);\n        }\n        return accum$;\n      }.call(this, []);\n      if (any(args, function (a) {\n          return mayHaveSideEffects(a, newScope);\n        }))\n        return true;\n      return mayHaveSideEffects(this.expression.body, newScope);\n    }\n  ],\n  [\n    CS.ExistsOp,\n    function (inScope) {\n      if (mayHaveSideEffects(this.left, inScope))\n        return true;\n      if (this.left['instanceof'](CS.Undefined, CS.Null))\n        return false;\n      return mayHaveSideEffects(this.right, inScope);\n    }\n  ],\n  [\n    CS.FunctionApplication,\n    CS.SoakedFunctionApplication,\n    function (inScope) {\n      var newScope;\n      if (!this['function']['instanceof'](CS.Function, CS.BoundFunction))\n        return true;\n      newScope = difference(inScope, concatMap(this['function'].parameters, beingDeclared));\n      if (any(this['arguments'], function (a) {\n          return mayHaveSideEffects(a, newScope);\n        }))\n        return true;\n      return mayHaveSideEffects(this['function'].body, newScope);\n    }\n  ],\n  [\n    CS.LogicalAndOp,\n    function (inScope) {\n      if (mayHaveSideEffects(this.left, inScope))\n        return true;\n      if (isFalsey(this.left))\n        return false;\n      return mayHaveSideEffects(this.right, inScope);\n    }\n  ],\n  [\n    CS.LogicalOrOp,\n    function (inScope) {\n      if (mayHaveSideEffects(this.left, inScope))\n        return true;\n      if (isTruthy(this.left))\n        return false;\n      return mayHaveSideEffects(this.right, inScope);\n    }\n  ],\n  [\n    CS.While,\n    function (inScope) {\n      return mayHaveSideEffects(this.condition, inScope) || !isFalsey(this.condition) && mayHaveSideEffects(this.body, inScope);\n    }\n  ],\n  [\n    CS.AssignOp,\n    CS.ClassProtoAssignOp,\n    CS.CompoundAssignOp,\n    function (inScope) {\n      return true;\n    }\n  ],\n  [\n    CS.Bool,\n    CS.Float,\n    CS.Identifier,\n    CS.Int,\n    CS.String,\n    function () {\n      return false;\n    }\n  ]\n], function (inScope) {\n  return any(this.childNodes, function (this$) {\n    return function (child) {\n      if (in$(child, this$.listMembers)) {\n        return any(this$[child], function (m) {\n          return mayHaveSideEffects(m, inScope);\n        });\n      } else {\n        return mayHaveSideEffects(this$[child], inScope);\n      }\n    };\n  }(this));\n});\nexports.Optimiser = function () {\n  Optimiser.optimise = function (this$) {\n    return function () {\n      var cache$2;\n      return (cache$2 = new this$()).optimise.apply(cache$2, [].slice.call(arguments));\n    };\n  }(Optimiser);\n  Optimiser.isTruthy = isTruthy;\n  Optimiser.isFalsey = isFalsey;\n  Optimiser.mayHaveSideEffects = mayHaveSideEffects;\n  defaultRules = [\n    [\n      CS.Program,\n      function () {\n        if (!(null != this.body) || mayHaveSideEffects(this.body, [])) {\n          return this;\n        } else {\n          return new CS.Program(null);\n        }\n      }\n    ],\n    [\n      CS.Block,\n      function (param$) {\n        var inScope;\n        inScope = param$.inScope;\n        switch (this.statements.length) {\n        case 0:\n          return new CS.Undefined().g();\n        case 1:\n          return this.statements[0];\n        default:\n          return foldl(this.statements[0], this.statements.slice(1), function (expr, s) {\n            return new CS.SeqOp(expr, s);\n          });\n        }\n      }\n    ],\n    [\n      CS.SeqOp,\n      function (param$) {\n        var ancestry, cache$2, canDropLast, inScope;\n        {\n          cache$2 = param$;\n          inScope = cache$2.inScope;\n          ancestry = cache$2.ancestry;\n        }\n        canDropLast = !usedAsExpression(this, ancestry);\n        if (this.left['instanceof'](CS.Undefined)) {\n          return this.right;\n        } else if (this.left['instanceof'](CS.Return, CS.Throw)) {\n          return this.left;\n        } else if (mayHaveSideEffects(this.left, inScope)) {\n          if (mayHaveSideEffects(this.right, inScope)) {\n            return this;\n          } else if (!canDropLast) {\n            return this;\n          } else if (this.right['instanceof'](CS.Undefined)) {\n            return this.left;\n          } else {\n            return new CS.SeqOp(this.left, declarationsFor(this.right, union(inScope, envEnrichments(this.left, inScope))));\n          }\n        } else if (this.right['instanceof'](CS.Identifier) && this.right.data === 'eval' && ((null != ancestry[0] ? ancestry[0]['instanceof'](CS.FunctionApplication) : void 0) && ancestry[0]['function'] === this || (null != ancestry[0] ? ancestry[0]['instanceof'](CS.DoOp) : void 0) && ancestry[0].expression === this)) {\n          if (this.left['instanceof'](CS.Int) && (0 <= this.left.data && this.left.data <= 9)) {\n            return this;\n          } else if (mayHaveSideEffects(this.left, inScope)) {\n            return this;\n          } else {\n            return new CS.SeqOp(new CS.Int(0).g(), this.right);\n          }\n        } else if (mayHaveSideEffects(this.right, inScope)) {\n          return new CS.SeqOp(declarationsFor(this.left, inScope), this.right);\n        } else if (canDropLast) {\n          return declarationsFor(this, inScope);\n        } else {\n          return this.right;\n        }\n      }\n    ],\n    [\n      CS.AssignOp,\n      function () {\n        if (!this.expression['instanceof'](CS.SeqOp))\n          return this;\n        return new CS.SeqOp(this.expression.left, new CS.AssignOp(this.assignee, this.expression.right));\n      }\n    ],\n    [\n      CS.While,\n      function (param$) {\n        var inScope;\n        inScope = param$.inScope;\n        if (isFalsey(this.condition)) {\n          return new CS.Block([\n            mayHaveSideEffects(this.condition, inScope) ? new CS.SeqOp(this.condition, declarationsFor(this.body)) : null != this.body ? declarationsFor(this.body, inScope) : new CS.Undefined,\n            new CS.ArrayInitialiser([])\n          ]);\n        } else if (isTruthy(this.condition)) {\n          if (mayHaveSideEffects(this.condition, inScope)) {\n            return this;\n          } else if (null != this.body) {\n            if (this instanceof CS.Loop) {\n              return this;\n            } else {\n              return new CS.Loop(this.body).g();\n            }\n          } else {\n            return new CS.ArrayInitialiser([]);\n          }\n        } else {\n          return this;\n        }\n      }\n    ],\n    [\n      CS.Conditional,\n      function (param$) {\n        var block, cache$2, cache$3, decls, inScope, removedBlock;\n        inScope = param$.inScope;\n        if (isFalsey(this.condition)) {\n          cache$2 = [\n            this.consequent,\n            this.alternate\n          ];\n          removedBlock = cache$2[0];\n          block = cache$2[1];\n          cache$2;\n        } else if (isTruthy(this.condition)) {\n          cache$3 = [\n            this.consequent,\n            this.alternate\n          ];\n          block = cache$3[0];\n          removedBlock = cache$3[1];\n          cache$3;\n        } else {\n          return this;\n        }\n        decls = declarationsFor(removedBlock, inScope);\n        block = null != block ? new CS.SeqOp(decls, block) : decls;\n        if (mayHaveSideEffects(this.condition, inScope))\n          block = new CS.SeqOp(this.condition, block);\n        return block;\n      }\n    ],\n    [\n      CS.ForIn,\n      function (param$) {\n        var inScope;\n        inScope = param$.inScope;\n        if (!(this.target['instanceof'](CS.ArrayInitialiser) && this.target.members.length === 0))\n          return this;\n        return new CS.SeqOp(declarationsFor(this, inScope), new CS.ArrayInitialiser([]).g());\n      }\n    ],\n    [\n      CS.ForOf,\n      function (param$) {\n        var inScope;\n        inScope = param$.inScope;\n        if (!(this.isOwn && this.target['instanceof'](CS.ObjectInitialiser) && this.target.members.length === 0))\n          return this;\n        return new CS.SeqOp(declarationsFor(this, inScope), new CS.ArrayInitialiser([]).g());\n      }\n    ],\n    [\n      CS.ForIn,\n      CS.ForOf,\n      function (param$) {\n        var inScope;\n        inScope = param$.inScope;\n        if (!isFalsey(this.filter))\n          return this;\n        return new CS.SeqOp(declarationsFor(this, inScope), new CS.ArrayInitialiser([]).g());\n      }\n    ],\n    [\n      CS.ForIn,\n      function () {\n        if (!isTruthy(this.filter))\n          return this;\n        return new CS.ForIn(this.valAssignee, this.keyAssignee, this.target, this.step, null, this.body);\n      }\n    ],\n    [\n      CS.ForOf,\n      function () {\n        if (!isTruthy(this.filter))\n          return this;\n        return new CS.ForOf(this.isOwn, this.keyAssignee, this.valAssignee, this.target, null, this.body);\n      }\n    ],\n    [\n      CS.ArrayInitialiser,\n      function (param$) {\n        var ancestry, cache$2, inScope;\n        {\n          cache$2 = param$;\n          inScope = cache$2.inScope;\n          ancestry = cache$2.ancestry;\n        }\n        if (usedAsExpression(this, ancestry)) {\n          return this;\n        } else {\n          return foldl(new CS.Undefined().g(), this.members, function (expr, m) {\n            return new CS.SeqOp(expr, m);\n          });\n        }\n      }\n    ],\n    [\n      CS.ExistsOp,\n      function () {\n        if (this.left['instanceof'](CS.Null, CS.Undefined)) {\n          return this.right;\n        } else {\n          return this;\n        }\n      }\n    ],\n    [\n      CS.UnaryExistsOp,\n      function () {\n        if (this.expression['instanceof'](CS.Null, CS.Undefined)) {\n          return new CS.Bool(false).g();\n        } else {\n          return this;\n        }\n      }\n    ],\n    [\n      CS.LogicalNotOp,\n      function (param$) {\n        var inScope;\n        inScope = param$.inScope;\n        switch (false) {\n        case !this.expression['instanceof'](CS.Int, CS.Float, CS.String, CS.Bool):\n          return new CS.Bool(!this.expression.data).g();\n        case !this.expression['instanceof'](CS.Functions):\n          return new CS.Bool(false).g();\n        case !this.expression['instanceof'](CS.Null, CS.Undefined):\n          return new CS.Bool(true).g();\n        case !this.expression['instanceof'](CS.ArrayInitialiser, CS.ObjectInitialiser):\n          if (mayHaveSideEffects(this.expression, inScope)) {\n            return this;\n          } else {\n            return new CS.SeqOp(declarationsFor(this.expression, inScope), new CS.Bool(false).g());\n          }\n        case !this.expression['instanceof'](CS.LogicalNotOp):\n          if (this.expression.expression['instanceof'](CS.LogicalNotOp)) {\n            return this.expression.expression;\n          } else {\n            return this;\n          }\n        default:\n          return this;\n        }\n      }\n    ],\n    [\n      CS.TypeofOp,\n      function () {\n        switch (false) {\n        case !this.expression['instanceof'](CS.Int, CS.Float, CS.UnaryNegateOp, CS.UnaryPlusOp):\n          return new CS.String('number').g();\n        case !this.expression['instanceof'](CS.String):\n          return new CS.String('string').g();\n        case !this.expression['instanceof'](CS.Functions):\n          return new CS.String('function').g();\n        case !this.expression['instanceof'](CS.Undefined):\n          return new CS.String('undefined').g();\n        default:\n          return this;\n        }\n      }\n    ],\n    [\n      CS.SeqOp,\n      function (param$) {\n        var ancestry;\n        ancestry = param$.ancestry;\n        if (!((null != ancestry[0] ? ancestry[0]['instanceof'](CS.Functions) : void 0) && ancestry[0].body === this))\n          return this;\n        if (this.right['instanceof'](CS.Return) && null != this.right.expression) {\n          return new CS.SeqOp(this.left, this.right.expression);\n        } else if (this.right['instanceof'](CS.Undefined)) {\n          return new CS.SeqOp(this.left, new CS.Return);\n        } else {\n          return this;\n        }\n      }\n    ],\n    [\n      CS.Function,\n      CS.BoundFunction,\n      function () {\n        if (!(null != this.block && (this.block['instanceof'](CS.Undefined) || this.block['instanceof'](CS.Return) && !(null != this.block.expression))))\n          return this;\n        return new this.constructor(this.parameters, null);\n      }\n    ],\n    [\n      CS.Return,\n      function () {\n        if (null != this.expression ? this.expression['instanceof'](CS.Undefined) : void 0) {\n          return new CS.Return;\n        } else {\n          return this;\n        }\n      }\n    ],\n    [\n      CS.Slice,\n      function () {\n        if ((null != this.left ? this.left['instanceof'](CS.Int, CS.String) : void 0) && +this.left.data === 0) {\n          return new CS.Slice(this.expression, this.isInclusive, null, this.right);\n        } else if (this.isInclusive && (null != this.right ? this.right['instanceof'](CS.UnaryNegateOp) : void 0) && this.right.expression['instanceof'](CS.Int) && this.right.expression.data === 1) {\n          return new CS.Slice(this.expression, true, this.left, null);\n        } else {\n          return this;\n        }\n      }\n    ]\n  ];\n  function Optimiser() {\n    var cache$2, ctor, ctors, handler, size$;\n    this.rules = {};\n    for (var i$ = 0, length$ = defaultRules.length; i$ < length$; ++i$) {\n      {\n        cache$2 = defaultRules[i$];\n        size$ = cache$2.length;\n        ctors = size$ > 1 ? [].slice.call(cache$2, 0, size$ - 1) : [];\n        handler = cache$2[size$ - 1];\n      }\n      for (var i$1 = 0, length$1 = ctors.length; i$1 < length$1; ++i$1) {\n        ctor = ctors[i$1];\n        this.addRule(ctor.prototype.className, handler);\n      }\n    }\n  }\n  Optimiser.prototype.addRule = function (ctor, handler) {\n    (null != this.rules[ctor] ? this.rules[ctor] : this.rules[ctor] = []).push(handler);\n    return this;\n  };\n  Optimiser.prototype.optimise = function () {\n    var walk;\n    walk = function (fn, inScope, ancestry) {\n      var childName, member, n, p, replacementNode;\n      if (null == inScope)\n        inScope = [];\n      if (null == ancestry)\n        ancestry = [];\n      ancestry.unshift(this);\n      for (var i$ = 0, length$ = this.childNodes.length; i$ < length$; ++i$) {\n        childName = this.childNodes[i$];\n        if (!(null != this[childName]))\n          continue;\n        if (in$(childName, this.listMembers)) {\n          for (var i$1 = 0, length$1 = this[childName].length; i$1 < length$1; ++i$1) {\n            member = this[childName][i$1];\n            n = i$1;\n            while (this[childName][n] !== walk.call(this[childName][n] = fn.call(this[childName][n], {\n                inScope: inScope,\n                ancestry: ancestry\n              }), fn, inScope, ancestry)) {\n            }\n            inScope = union(inScope, envEnrichments(this[childName][n], inScope));\n          }\n        } else {\n          while (this[childName] !== walk.call(this[childName] = fn.call(this[childName], {\n              inScope: inScope,\n              ancestry: ancestry\n            }), fn, inScope, ancestry)) {\n          }\n          inScope = union(inScope, envEnrichments(this[childName], inScope));\n        }\n      }\n      ancestry.shift();\n      replacementNode = fn.call(this, {\n        inScope: inScope,\n        ancestry: ancestry\n      });\n      if (this !== replacementNode) {\n        while (replacementNode !== walk.call(replacementNode = fn.call(replacementNode, {\n            inScope: inScope,\n            ancestry: ancestry\n          }), fn, inScope, ancestry)) {\n        }\n        for (var cache$2 = [\n              'raw',\n              'line',\n              'column',\n              'offset'\n            ], i$2 = 0, length$2 = cache$2.length; i$2 < length$2; ++i$2) {\n          p = cache$2[i$2];\n          replacementNode[p] = this[p];\n        }\n      }\n      return replacementNode;\n    };\n    return function (ast) {\n      var rules;\n      rules = this.rules;\n      return walk.call(ast, function (param$) {\n        var ancestry, memo, rule;\n        ancestry = param$.ancestry;\n        if (!(null != this) || this === global)\n          throw new Error('Optimiser rules must produce a node. `null` is not a node.');\n        if (in$(this, ancestry))\n          return this;\n        memo = this;\n        for (var cache$2 = null != rules[memo.className] ? rules[memo.className] : [], i$ = 0, length$ = cache$2.length; i$ < length$; ++i$) {\n          rule = cache$2[i$];\n          memo = rule.apply(memo, arguments);\n          if (memo !== this)\n            break;\n        }\n        return memo;\n      });\n    };\n  }();\n  return Optimiser;\n}();\nfunction in$(member, list) {\n  for (var i = 0, length = list.length; i < length; ++i)\n    if (i in list && list[i] === member)\n      return true;\n  return false;\n}\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./functional-helpers\":2,\"./helpers\":3,\"./nodes\":6}],8:[function(require,module,exports){\nmodule.exports = (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { program: peg$parseprogram },\n        peg$startRuleFunction  = peg$parseprogram,\n\n        peg$c0 = peg$FAILED,\n        peg$c1 = null,\n        peg$c2 = function(leader, b) {return rp(new CS.Program(b));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c3 = [],\n        peg$c4 = function(s) {return s;\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c5 = function(s, ss) {return rp(new CS.Block([s].concat([].slice.call(ss))));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c6 = void 0,\n        peg$c7 = \";\",\n        peg$c8 = { type: \"literal\", value: \";\", description: \"\\\";\\\"\" },\n        peg$c9 = function(e) {return e;\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c10 = function(left, right) {if (!right)\n          return left;\n        return rp(new CS.SeqOp(left, right));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c11 = function(expr, postfixes) {return foldl(function (expr, postfixContainer) {\n          var indicator, postfix;\n          postfix = postfixContainer[1];\n          indicator = postfix.type;\n          switch (indicator) {\n          case 'if':\n            return rp(new CS.Conditional(postfix.cond, expr, null));\n          case 'unless':\n            return rp(new CS.NegatedConditional(new CS.LogicalNotOp(postfix.cond).g(), expr, null));\n          case 'while':\n            return rp(new CS.While(postfix.cond, expr));\n          case 'until':\n            return rp(new CS.NegatedWhile(new CS.LogicalNotOp(postfix.cond).g(), expr));\n          case 'for-in':\n            return rp(new CS.ForIn(postfix.val, postfix.key, postfix.list, postfix.step, postfix.filter, expr));\n          case 'for-of':\n            return rp(new CS.ForOf(postfix.own, postfix.key, postfix.val, postfix.obj, postfix.filter, expr));\n          }\n        }, expr, postfixes);\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c12 = function(kw, e) {return {\n          type: kw,\n          cond: e\n        };\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c13 = \",\",\n        peg$c14 = { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n        peg$c15 = function(a) {return a;\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c16 = function(val, key) {return [\n          val,\n          key\n        ];\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c17 = function(valKey, list, step, filter) {var cache$, key, val;\n        cache$ = null != valKey ? valKey : [\n          null,\n          null\n        ];\n        val = cache$[0];\n        key = cache$[1];\n        if (null != step)\n          step;\n        else\n          step = new CS.Int(1).r('1').g();\n        return {\n          type: 'for-in',\n          val: val,\n          key: key,\n          list: list,\n          step: step,\n          filter: filter\n        };\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c18 = function(own, key, val, obj, filter) {return {\n          type: 'for-of',\n          own: Boolean(own),\n          key: key,\n          val: val,\n          obj: obj,\n          filter: filter\n        };\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c19 = \"=\",\n        peg$c20 = { type: \"literal\", value: \"=\", description: \"\\\"=\\\"\" },\n        peg$c21 = function(left, right) {return rp(new CS.AssignOp(left, right));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c22 = \"?\",\n        peg$c23 = { type: \"literal\", value: \"?\", description: \"\\\"?\\\"\" },\n        peg$c24 = function(left, op, right) {return rp(new CS.CompoundAssignOp(constructorLookup[op].prototype.className, left, right));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c25 = \"&&\",\n        peg$c26 = { type: \"literal\", value: \"&&\", description: \"\\\"&&\\\"\" },\n        peg$c27 = \"||\",\n        peg$c28 = { type: \"literal\", value: \"||\", description: \"\\\"||\\\"\" },\n        peg$c29 = \"**\",\n        peg$c30 = { type: \"literal\", value: \"**\", description: \"\\\"**\\\"\" },\n        peg$c31 = /^[?&\\^|*\\/%]/,\n        peg$c32 = { type: \"class\", value: \"[?&\\\\^|*\\\\/%]\", description: \"[?&\\\\^|*\\\\/%]\" },\n        peg$c33 = \"+\",\n        peg$c34 = { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n        peg$c35 = \"-\",\n        peg$c36 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n        peg$c37 = \"<<\",\n        peg$c38 = { type: \"literal\", value: \"<<\", description: \"\\\"<<\\\"\" },\n        peg$c39 = \">>>\",\n        peg$c40 = { type: \"literal\", value: \">>>\", description: \"\\\">>>\\\"\" },\n        peg$c41 = \">>\",\n        peg$c42 = { type: \"literal\", value: \">>\", description: \"\\\">>\\\"\" },\n        peg$c43 = \"?=\",\n        peg$c44 = { type: \"literal\", value: \"?=\", description: \"\\\"?=\\\"\" },\n        peg$c45 = function(left, right) {return rp(new CS.CompoundAssignOp(constructorLookup['?'].prototype.className, left, right));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c46 = function(o, e) {return [\n          o,\n          e\n        ];\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c47 = function(left, rights) {var cache$, cache$1, expr, op;\n        switch (rights.length) {\n        case 0:\n          return left;\n        case 1:\n          cache$ = rights[0];\n          op = cache$[0];\n          expr = cache$[1];\n          return rp(new constructorLookup[op](left, expr));\n        default:\n          return rp(foldBinaryExpr((cache$1 = [left]).concat.apply(cache$1, [].slice.call(rights))));\n        }\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c48 = \"<=\",\n        peg$c49 = { type: \"literal\", value: \"<=\", description: \"\\\"<=\\\"\" },\n        peg$c50 = \">=\",\n        peg$c51 = { type: \"literal\", value: \">=\", description: \"\\\">=\\\"\" },\n        peg$c52 = \"<\",\n        peg$c53 = { type: \"literal\", value: \"<\", description: \"\\\"<\\\"\" },\n        peg$c54 = \">\",\n        peg$c55 = { type: \"literal\", value: \">\", description: \"\\\">\\\"\" },\n        peg$c56 = \"==\",\n        peg$c57 = { type: \"literal\", value: \"==\", description: \"\\\"==\\\"\" },\n        peg$c58 = \"!=\",\n        peg$c59 = { type: \"literal\", value: \"!=\", description: \"\\\"!=\\\"\" },\n        peg$c60 = function(op) {return 'not ' + op;\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c61 = function(e) {return rp(new CS.DoOp(e));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c62 = function(o) {return o;\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c63 = function(ops, e) {return rp(foldr(function (e, op) {\n          return new prefixConstructorLookup[op](e);\n        }, e, ops));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c64 = \"++\",\n        peg$c65 = { type: \"literal\", value: \"++\", description: \"\\\"++\\\"\" },\n        peg$c66 = \"--\",\n        peg$c67 = { type: \"literal\", value: \"--\", description: \"\\\"--\\\"\" },\n        peg$c68 = \"!\",\n        peg$c69 = { type: \"literal\", value: \"!\", description: \"\\\"!\\\"\" },\n        peg$c70 = \"~\",\n        peg$c71 = { type: \"literal\", value: \"~\", description: \"\\\"~\\\"\" },\n        peg$c72 = function(a, f) {return rp(new CS.AssignOp(a, f));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c73 = function(e, ops) {return rp(foldl(function (e, op) {\n          return new postfixConstructorLookup[op](e);\n        }, e, ops));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c74 = \"[..]\",\n        peg$c75 = { type: \"literal\", value: \"[..]\", description: \"\\\"[..]\\\"\" },\n        peg$c76 = \"(\",\n        peg$c77 = { type: \"literal\", value: \"(\", description: \"\\\"(\\\"\" },\n        peg$c78 = \")\",\n        peg$c79 = { type: \"literal\", value: \")\", description: \"\\\")\\\"\" },\n        peg$c80 = function(soaked, a) {return rp({\n          op: soaked ? CS.SoakedFunctionApplication : CS.FunctionApplication,\n          operands: [null != a ? a : []]\n        });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c81 = function(e, es) {return [e].concat([].slice.call(es));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c82 = /^[+-\\/]/,\n        peg$c83 = { type: \"class\", value: \"[+-\\\\/]\", description: \"[+-\\\\/]\" },\n        peg$c84 = function(e, es, obj) {es.unshift(e);\n        if (null != obj)\n          es.push(obj);\n        return es;\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c85 = function(o) {return [o];\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c86 = function(fn, accesses, secondaryArgs) {var cache$, list, secondaryCtor, soaked;\n        if (null != accesses)\n          fn = createMemberExpression(fn, accesses);\n        if (null != secondaryArgs) {\n          cache$ = secondaryArgs;\n          soaked = cache$[0];\n          list = cache$[1];\n          secondaryCtor = soaked ? CS.SoakedFunctionApplication : CS.FunctionApplication;\n          fn = rp(new secondaryCtor(fn, list));\n        }\n        return fn;\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c87 = function(as) {return as;\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c88 = function(as, bs) {return [].slice.call(as).concat([].slice.call(null != bs ? bs : []));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c89 = function(e) {return rp(new CS.NewOp(e, []));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c90 = function(e, args) {return rp(new CS.NewOp(e, args.operands[0]));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c91 = function(e, accesses) {return createMemberExpression(e, accesses);\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c92 = function(e, args) {return rp(new CS.NewOp(e, args));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c93 = function(e, accesses) {var acc;\n        acc = foldl(function (memo, a) {\n          return memo.concat(a);\n        }, [], accesses);\n        return createMemberExpression(e, acc);\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c94 = \".\",\n        peg$c95 = { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\n        peg$c96 = function(e) {return rp({\n          op: CS.MemberAccessOp,\n          operands: [e]\n        });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c97 = \"?.\",\n        peg$c98 = { type: \"literal\", value: \"?.\", description: \"\\\"?.\\\"\" },\n        peg$c99 = function(e) {return rp({\n          op: CS.SoakedMemberAccessOp,\n          operands: [e]\n        });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c100 = \"[\",\n        peg$c101 = { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\n        peg$c102 = \"]\",\n        peg$c103 = { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\n        peg$c104 = function(e) {return rp({\n          op: CS.DynamicMemberAccessOp,\n          operands: [e]\n        });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c105 = \"?[\",\n        peg$c106 = { type: \"literal\", value: \"?[\", description: \"\\\"?[\\\"\" },\n        peg$c107 = function(e) {return rp({\n          op: CS.SoakedDynamicMemberAccessOp,\n          operands: [e]\n        });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c108 = \"::\",\n        peg$c109 = { type: \"literal\", value: \"::\", description: \"\\\"::\\\"\" },\n        peg$c110 = function(e) {return rp({\n          op: CS.ProtoMemberAccessOp,\n          operands: [e]\n        });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c111 = \"::[\",\n        peg$c112 = { type: \"literal\", value: \"::[\", description: \"\\\"::[\\\"\" },\n        peg$c113 = function(e) {return rp({\n          op: CS.DynamicProtoMemberAccessOp,\n          operands: [e]\n        });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c114 = \"?::\",\n        peg$c115 = { type: \"literal\", value: \"?::\", description: \"\\\"?::\\\"\" },\n        peg$c116 = function(e) {return rp({\n          op: CS.SoakedProtoMemberAccessOp,\n          operands: [e]\n        });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c117 = \"?::[\",\n        peg$c118 = { type: \"literal\", value: \"?::[\", description: \"\\\"?::[\\\"\" },\n        peg$c119 = function(e) {return rp({\n          op: CS.SoakedDynamicProtoMemberAccessOp,\n          operands: [e]\n        });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c120 = \"..\",\n        peg$c121 = { type: \"literal\", value: \"..\", description: \"\\\"..\\\"\" },\n        peg$c122 = function(left, exclusive, right) {return rp({\n          op: CS.Slice,\n          operands: [\n            !exclusive,\n            left,\n            right\n          ]\n        });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c123 = \"@\",\n        peg$c124 = { type: \"literal\", value: \"@\", description: \"\\\"@\\\"\" },\n        peg$c125 = function() {return rp(new CS.This);\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c126 = function(e) {return r(e.clone());\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c127 = function(a, m) {return rp(new CS.MemberAccessOp(a, m));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c128 = \"`\",\n        peg$c129 = { type: \"literal\", value: \"`\", description: \"\\\"`\\\"\" },\n        peg$c130 = /^[^`]/,\n        peg$c131 = { type: \"class\", value: \"[^`]\", description: \"[^`]\" },\n        peg$c132 = function(d) {return rp(new CS.JavaScript(d));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c133 = \"...\",\n        peg$c134 = { type: \"literal\", value: \"...\", description: \"\\\"...\\\"\" },\n        peg$c135 = function(e) {return rp(new CS.Spread(e));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c136 = function(kw, cond, body, elseClause) {switch (kw) {\n        case 'if':\n          return rp(new CS.Conditional(cond, body.block, elseClause));\n        case 'unless':\n          return rp(new CS.NegatedConditional(new CS.LogicalNotOp(cond).g(), body.block, elseClause));\n        }\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c137 = function(b) {return { block: b };\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c138 = function(s) {return { block: s };\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c139 = function() {return { block: null };\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c140 = function(b) {return b;\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c141 = function(kw, cond, body) {switch (kw) {\n        case 'while':\n          return rp(new CS.While(cond, body.block));\n        case 'until':\n          return rp(new CS.NegatedWhile(new CS.LogicalNotOp(cond).g(), body.block));\n        }\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c142 = function(body) {return rp(new CS.Loop(body.block));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c143 = function(body, c, f) {return rp(new CS.Try(body.block, null != (null != c ? c.assignee : void 0) ? null != c ? c.assignee : void 0 : null, null != (null != c ? c.block : void 0) ? null != c ? c.block : void 0 : null, null != (null != f ? f.block : void 0) ? null != f ? f.block : void 0 : null));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c144 = function(e, body) {return r({\n          block: null != body ? body.block : new CS.Block([]),\n          assignee: e\n        });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c145 = function(body) {return r({ block: null != (null != body ? body.block : void 0) ? null != body ? body.block : void 0 : null });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c146 = function(name, parent, body) {var boundMembers, ctor, m, stmts;\n        ctor = null;\n        boundMembers = [];\n        stmts = null != body ? null != body.statements ? body.statements : [body] : [];\n        for (var i$ = 0, length$ = stmts.length; i$ < length$; ++i$) {\n          m = stmts[i$];\n          if (m['instanceof'](CS.Constructor)) {\n            ctor = m;\n          } else if (m['instanceof'](CS.ClassProtoAssignOp) && m.expression['instanceof'](CS.BoundFunction)) {\n            boundMembers.push(m);\n          }\n        }\n        return rp(new CS.Class(name, parent, ctor, body, boundMembers));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c147 = function(key) {return key['instanceof'](CS.String, CS.Identifier) && key.data === 'constructor';\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c148 = \":\",\n        peg$c149 = { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n        peg$c150 = function(key, fn) {if (fn['instanceof'](CS.BoundFunction))\n          fn = c(new CS.Function(fn.parameters, fn.body).r(fn.raw), fn);\n        return rp(new CS.Constructor(fn));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c151 = function(e) {return r({ expr: e });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c152 = function(key, e) {return rp(new CS.AssignOp(key, e.expr));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c153 = function(key, e) {return rp(new CS.ClassProtoAssignOp(key, e.expr));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c154 = function(own, key, val, obj, filter, body) {return rp(new CS.ForOf(Boolean(own), key, val, obj, filter, body.block));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c155 = function(valKey, list, step, filter, body) {var cache$, key, val;\n        cache$ = null != valKey ? valKey : [\n          null,\n          null\n        ];\n        val = cache$[0];\n        key = cache$[1];\n        if (null != step)\n          step;\n        else\n          step = new CS.Int(1).r('1').g();\n        return rp(new CS.ForIn(val, key, list, step, filter, body.block));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c156 = function(e, body) {return rp(new CS.Switch(e, body.cases, null != body['else'] ? body['else'] : null));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c157 = function(b) {return r({\n          cases: b.cases,\n          'else': b['else']\n        });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c158 = function(c) {return r({ cases: [c] });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c159 = function() {return r({ cases: [] });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c160 = function(c) {return c;\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c161 = function(c, cs, elseClause) {return r({\n          cases: [c].concat([].slice.call(cs)),\n          'else': elseClause\n        });\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c162 = function(conditions, body) {return rp(new CS.SwitchCase(conditions, body.block));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c163 = function(c, cs) {return [c].concat([].slice.call(cs));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c164 = function(p) {return p;\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c165 = \"->\",\n        peg$c166 = { type: \"literal\", value: \"->\", description: \"\\\"->\\\"\" },\n        peg$c167 = \"=>\",\n        peg$c168 = { type: \"literal\", value: \"=>\", description: \"\\\"=>\\\"\" },\n        peg$c169 = function(params, arrow, body) {var constructor;\n        constructor = function () {\n          switch (arrow) {\n          case '->':\n            return CS.Function;\n          case '=>':\n            return CS.BoundFunction;\n          }\n        }.call(this);\n        return rp(new constructor(null != params ? params : [], body));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c170 = function(param, default_) {return rp(new CS.DefaultParam(param, default_));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c171 = function(a, rest) {return rp(null != rest ? new CS.Rest(a) : a);\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c172 = function(left, exclusiveDot, right) {var inclusive;\n        inclusive = !exclusiveDot;\n        return rp(new CS.Range(inclusive, left, right));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c173 = function(members) {return rp(new CS.ArrayInitialiser(members));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c174 = function(members) {return members;\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c175 = function(members) {return null != members ? members : [];\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c176 = \"{\",\n        peg$c177 = { type: \"literal\", value: \"{\", description: \"\\\"{\\\"\" },\n        peg$c178 = \"}\",\n        peg$c179 = { type: \"literal\", value: \"}\", description: \"\\\"}\\\"\" },\n        peg$c180 = function(members) {return rp(new CS.ObjectInitialiser(members));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c181 = function(v) {var key;\n        key = p(new CS.String(v.memberName).g());\n        return rp(new CS.ObjectInitialiserMember(key, v));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c182 = function(v) {return rp(new CS.ObjectInitialiserMember(v, v));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c183 = function(i) {return rp(new CS.Identifier(i));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c184 = function(key, val) {return rp(new CS.ObjectInitialiserMember(key, val));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c185 = \"__LINE__\",\n        peg$c186 = { type: \"literal\", value: \"__LINE__\", description: \"\\\"__LINE__\\\"\" },\n        peg$c187 = function() {return rp(new CS.Int(line()));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c188 = \"__FILENAME__\",\n        peg$c189 = { type: \"literal\", value: \"__FILENAME__\", description: \"\\\"__FILENAME__\\\"\" },\n        peg$c190 = function() {return rp(new CS.String(null != options.inputSource ? options.inputSource : ''));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c191 = \"__DATE__\",\n        peg$c192 = { type: \"literal\", value: \"__DATE__\", description: \"\\\"__DATE__\\\"\" },\n        peg$c193 = function() {return rp(new CS.String(new Date().toDateString().slice(4)));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c194 = \"__TIME__\",\n        peg$c195 = { type: \"literal\", value: \"__TIME__\", description: \"\\\"__TIME__\\\"\" },\n        peg$c196 = function() {return rp(new CS.String(new Date().toTimeString().slice(0, 8)));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c197 = \"__DATETIMEMS__\",\n        peg$c198 = { type: \"literal\", value: \"__DATETIMEMS__\", description: \"\\\"__DATETIMEMS__\\\"\" },\n        peg$c199 = function() {return rp(new CS.Int(+new Date));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c200 = \"__COFFEE_VERSION__\",\n        peg$c201 = { type: \"literal\", value: \"__COFFEE_VERSION__\", description: \"\\\"__COFFEE_VERSION__\\\"\" },\n        peg$c202 = function() {return rp(new CS.String(require('../package.json').version));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c203 = function() {return rp(new CS.Bool(true));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c204 = function() {return rp(new CS.Bool(false));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c205 = \"0b\",\n        peg$c206 = { type: \"literal\", value: \"0b\", description: \"\\\"0b\\\"\" },\n        peg$c207 = function(bs) {return rp(new CS.Int(parseInt(bs, 2)));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c208 = \"0o\",\n        peg$c209 = { type: \"literal\", value: \"0o\", description: \"\\\"0o\\\"\" },\n        peg$c210 = function(os) {return rp(new CS.Int(parseInt(os, 8)));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c211 = \"0x\",\n        peg$c212 = { type: \"literal\", value: \"0x\", description: \"\\\"0x\\\"\" },\n        peg$c213 = function(hs) {return rp(new CS.Int(parseInt(hs, 16)));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c214 = /^[eE]/,\n        peg$c215 = { type: \"class\", value: \"[eE]\", description: \"[eE]\" },\n        peg$c216 = /^[+\\-]/,\n        peg$c217 = { type: \"class\", value: \"[+\\\\-]\", description: \"[+\\\\-]\" },\n        peg$c218 = function(base, e, sign, exponent) {return rp(new CS.Float(parseFloat('' + base.data + e + (null != sign ? sign : '') + exponent.data)));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c219 = function(integral, fractional) {if (fractional) {\n          return rp(new CS.Float(parseFloat(integral + fractional)));\n        } else {\n          return rp(new CS.Int(+integral));\n        }\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c220 = \"0\",\n        peg$c221 = { type: \"literal\", value: \"0\", description: \"\\\"0\\\"\" },\n        peg$c222 = /^[1-9]/,\n        peg$c223 = { type: \"class\", value: \"[1-9]\", description: \"[1-9]\" },\n        peg$c224 = /^[0-9]/,\n        peg$c225 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c226 = /^[0-9a-fA-F]/,\n        peg$c227 = { type: \"class\", value: \"[0-9a-fA-F]\", description: \"[0-9a-fA-F]\" },\n        peg$c228 = /^[0-7]/,\n        peg$c229 = { type: \"class\", value: \"[0-7]\", description: \"[0-7]\" },\n        peg$c230 = /^[01]/,\n        peg$c231 = { type: \"class\", value: \"[01]\", description: \"[01]\" },\n        peg$c232 = \"\\\"\\\"\\\"\",\n        peg$c233 = { type: \"literal\", value: \"\\\"\\\"\\\"\", description: \"\\\"\\\\\\\"\\\\\\\"\\\\\\\"\\\"\" },\n        peg$c234 = \"'\",\n        peg$c235 = { type: \"literal\", value: \"'\", description: \"\\\"'\\\"\" },\n        peg$c236 = \"\\\"\",\n        peg$c237 = { type: \"literal\", value: \"\\\"\", description: \"\\\"\\\\\\\"\\\"\" },\n        peg$c238 = function(d) {return rp(new CS.String(stripLeadingWhitespace(d.join(''))));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c239 = \"'''\",\n        peg$c240 = { type: \"literal\", value: \"'''\", description: \"\\\"'''\\\"\" },\n        peg$c241 = \"#\",\n        peg$c242 = { type: \"literal\", value: \"#\", description: \"\\\"#\\\"\" },\n        peg$c243 = function(d) {return rp(new CS.String(d.join('')));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c244 = /^[^\"'\\\\#]/,\n        peg$c245 = { type: \"class\", value: \"[^\\\"'\\\\\\\\#]\", description: \"[^\\\"'\\\\\\\\#]\" },\n        peg$c246 = \"\\\\x\",\n        peg$c247 = { type: \"literal\", value: \"\\\\x\", description: \"\\\"\\\\\\\\x\\\"\" },\n        peg$c248 = function(h) {return String.fromCharCode(parseInt(h, 16));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c249 = \"\\\\0\",\n        peg$c250 = { type: \"literal\", value: \"\\\\0\", description: \"\\\"\\\\\\\\0\\\"\" },\n        peg$c251 = function() {return '\\0';\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c252 = function() {throw new SyntaxError(['string data'], 'octal escape sequence', offset(), line(), column());\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c253 = \"\\\\b\",\n        peg$c254 = { type: \"literal\", value: \"\\\\b\", description: \"\\\"\\\\\\\\b\\\"\" },\n        peg$c255 = function() {return '\\b';\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c256 = \"\\\\t\",\n        peg$c257 = { type: \"literal\", value: \"\\\\t\", description: \"\\\"\\\\\\\\t\\\"\" },\n        peg$c258 = function() {return '\\t';\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c259 = \"\\\\n\",\n        peg$c260 = { type: \"literal\", value: \"\\\\n\", description: \"\\\"\\\\\\\\n\\\"\" },\n        peg$c261 = function() {return '\\n';\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c262 = \"\\\\v\",\n        peg$c263 = { type: \"literal\", value: \"\\\\v\", description: \"\\\"\\\\\\\\v\\\"\" },\n        peg$c264 = function() {return '\\x0B';\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c265 = \"\\\\f\",\n        peg$c266 = { type: \"literal\", value: \"\\\\f\", description: \"\\\"\\\\\\\\f\\\"\" },\n        peg$c267 = function() {return '\\f';\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c268 = \"\\\\r\",\n        peg$c269 = { type: \"literal\", value: \"\\\\r\", description: \"\\\"\\\\\\\\r\\\"\" },\n        peg$c270 = function() {return '\\r';\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c271 = \"\\\\\",\n        peg$c272 = { type: \"literal\", value: \"\\\\\", description: \"\\\"\\\\\\\\\\\"\" },\n        peg$c273 = { type: \"any\", description: \"any character\" },\n        peg$c274 = \"#{\",\n        peg$c275 = { type: \"literal\", value: \"#{\", description: \"\\\"#{\\\"\" },\n        peg$c276 = function(es) {return rp(createInterpolation(stripLeadingWhitespaceInterpolation(es)));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c277 = function(es) {return rp(createInterpolation(es));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c278 = \"///\",\n        peg$c279 = { type: \"literal\", value: \"///\", description: \"\\\"///\\\"\" },\n        peg$c280 = /^[ \\r\\n]/,\n        peg$c281 = { type: \"class\", value: \"[ \\\\r\\\\n]\", description: \"[ \\\\r\\\\n]\" },\n        peg$c282 = function() {return [rp(new CS.String('').g())];\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c283 = /^[^\\\\\\/#[ \\r\\n]/,\n        peg$c284 = { type: \"class\", value: \"[^\\\\\\\\\\\\/#[ \\\\r\\\\n]\", description: \"[^\\\\\\\\\\\\/#[ \\\\r\\\\n]\" },\n        peg$c285 = function(s) {return [rp(new CS.String(s).g())];\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c286 = /^[gimy]/,\n        peg$c287 = { type: \"class\", value: \"[gimy]\", description: \"[gimy]\" },\n        peg$c288 = function(es, flags) {var interp;\n        if (!isValidRegExpFlags(flags))\n          throw new SyntaxError(['regular expression flags'], 'regular expression flags', offset(), line(), column());\n        interp = createInterpolation(foldl(function (memo, e) {\n          return memo.concat(e);\n        }, [], es));\n        if (interp instanceof CS.String)\n          return p(new CS.RegExp(interp.data, flags));\n        return rp(new CS.HeregExp(interp, flags));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c289 = \"/\",\n        peg$c290 = { type: \"literal\", value: \"/\", description: \"\\\"/\\\"\" },\n        peg$c291 = /^[^\\/\\\\[\\n]/,\n        peg$c292 = { type: \"class\", value: \"[^\\\\/\\\\\\\\[\\\\n]\", description: \"[^\\\\/\\\\\\\\[\\\\n]\" },\n        peg$c293 = function(d, flags) {if (!isValidRegExpFlags(flags))\n          throw new SyntaxError(['regular expression flags'], 'regular expression flags', offset(), line(), column());\n        return rp(new CS.RegExp(d, flags));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c294 = /^[^\\\\\\]\\n]/,\n        peg$c295 = { type: \"class\", value: \"[^\\\\\\\\\\\\]\\\\n]\", description: \"[^\\\\\\\\\\\\]\\\\n]\" },\n        peg$c296 = function(h) {return h[0];\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c297 = /^[^\\\\\\/\\]]/,\n        peg$c298 = { type: \"class\", value: \"[^\\\\\\\\\\\\/\\\\]]\", description: \"[^\\\\\\\\\\\\/\\\\]]\" },\n        peg$c299 = function(s) {return p(new CS.String(s));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c300 = function(d) {return [p(new CS.String('['))].concat([].slice.call(d), [p(new CS.String(']'))]);\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c301 = function(d) {return [rp(new CS.String(d))];\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c302 = function(s) {return [rp(new CS.String(s))];\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c303 = function(c) {return [rp(new CS.String(c))];\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c304 = function(e) {return [e];\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c305 = function(e) {return rp(new CS.Throw(e));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c306 = function(e) {return rp(new CS.Return(e));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c307 = function() {return rp(new CS.Continue);\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c308 = function() {return rp(new CS.Break);\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c309 = function() {return rp(new CS.Debugger);\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c310 = function() {return rp(new CS.Undefined);\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c311 = function() {return rp(new CS.Null);\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c312 = \"arguments\",\n        peg$c313 = { type: \"literal\", value: \"arguments\", description: \"\\\"arguments\\\"\" },\n        peg$c314 = \"eval\",\n        peg$c315 = { type: \"literal\", value: \"eval\", description: \"\\\"eval\\\"\" },\n        peg$c316 = function(i) {return i;\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c317 = function(v) {var key;\n        key = rp(new CS.String(v.memberName));\n        return rp(new CS.ObjectInitialiserMember(key, v));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c318 = function(i) {return rp(new CS.ObjectInitialiserMember(i, i));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c319 = /^[$_]/,\n        peg$c320 = { type: \"class\", value: \"[$_]\", description: \"[$_]\" },\n        peg$c321 = \"###\",\n        peg$c322 = { type: \"literal\", value: \"###\", description: \"\\\"###\\\"\" },\n        peg$c323 = /^[^#]/,\n        peg$c324 = { type: \"class\", value: \"[^#]\", description: \"[^#]\" },\n        peg$c325 = /^[\\t\\x0B\\f \\xA0\\uFEFF\\u1680\\u180E\\u2000-\\u200A\\u202F\\u205F\\u3000]/,\n        peg$c326 = { type: \"class\", value: \"[\\\\t\\\\x0B\\\\f \\\\xA0\\\\uFEFF\\\\u1680\\\\u180E\\\\u2000-\\\\u200A\\\\u202F\\\\u205F\\\\u3000]\", description: \"[\\\\t\\\\x0B\\\\f \\\\xA0\\\\uFEFF\\\\u1680\\\\u180E\\\\u2000-\\\\u200A\\\\u202F\\\\u205F\\\\u3000]\" },\n        peg$c327 = \"\\r\",\n        peg$c328 = { type: \"literal\", value: \"\\r\", description: \"\\\"\\\\r\\\"\" },\n        peg$c329 = \"\\n\",\n        peg$c330 = { type: \"literal\", value: \"\\n\", description: \"\\\"\\\\n\\\"\" },\n        peg$c331 = \"\\uEFEF\",\n        peg$c332 = { type: \"literal\", value: \"\\uEFEF\", description: \"\\\"\\\\uEFEF\\\"\" },\n        peg$c333 = function(ws) {return ws;\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c334 = \"\\uEFFE\",\n        peg$c335 = { type: \"literal\", value: \"\\uEFFE\", description: \"\\\"\\\\uEFFE\\\"\" },\n        peg$c336 = \"\\uEFFF\",\n        peg$c337 = { type: \"literal\", value: \"\\uEFFF\", description: \"\\\"\\\\uEFFF\\\"\" },\n        peg$c338 = function() {return '';\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c339 = \"and\",\n        peg$c340 = { type: \"literal\", value: \"and\", description: \"\\\"and\\\"\" },\n        peg$c341 = \"break\",\n        peg$c342 = { type: \"literal\", value: \"break\", description: \"\\\"break\\\"\" },\n        peg$c343 = \"by\",\n        peg$c344 = { type: \"literal\", value: \"by\", description: \"\\\"by\\\"\" },\n        peg$c345 = \"catch\",\n        peg$c346 = { type: \"literal\", value: \"catch\", description: \"\\\"catch\\\"\" },\n        peg$c347 = \"continue\",\n        peg$c348 = { type: \"literal\", value: \"continue\", description: \"\\\"continue\\\"\" },\n        peg$c349 = \"class\",\n        peg$c350 = { type: \"literal\", value: \"class\", description: \"\\\"class\\\"\" },\n        peg$c351 = \"delete\",\n        peg$c352 = { type: \"literal\", value: \"delete\", description: \"\\\"delete\\\"\" },\n        peg$c353 = \"debugger\",\n        peg$c354 = { type: \"literal\", value: \"debugger\", description: \"\\\"debugger\\\"\" },\n        peg$c355 = \"do\",\n        peg$c356 = { type: \"literal\", value: \"do\", description: \"\\\"do\\\"\" },\n        peg$c357 = \"else\",\n        peg$c358 = { type: \"literal\", value: \"else\", description: \"\\\"else\\\"\" },\n        peg$c359 = \"extends\",\n        peg$c360 = { type: \"literal\", value: \"extends\", description: \"\\\"extends\\\"\" },\n        peg$c361 = \"false\",\n        peg$c362 = { type: \"literal\", value: \"false\", description: \"\\\"false\\\"\" },\n        peg$c363 = \"finally\",\n        peg$c364 = { type: \"literal\", value: \"finally\", description: \"\\\"finally\\\"\" },\n        peg$c365 = \"for\",\n        peg$c366 = { type: \"literal\", value: \"for\", description: \"\\\"for\\\"\" },\n        peg$c367 = \"if\",\n        peg$c368 = { type: \"literal\", value: \"if\", description: \"\\\"if\\\"\" },\n        peg$c369 = \"in\",\n        peg$c370 = { type: \"literal\", value: \"in\", description: \"\\\"in\\\"\" },\n        peg$c371 = \"instanceof\",\n        peg$c372 = { type: \"literal\", value: \"instanceof\", description: \"\\\"instanceof\\\"\" },\n        peg$c373 = \"is\",\n        peg$c374 = { type: \"literal\", value: \"is\", description: \"\\\"is\\\"\" },\n        peg$c375 = \"isnt\",\n        peg$c376 = { type: \"literal\", value: \"isnt\", description: \"\\\"isnt\\\"\" },\n        peg$c377 = \"loop\",\n        peg$c378 = { type: \"literal\", value: \"loop\", description: \"\\\"loop\\\"\" },\n        peg$c379 = \"new\",\n        peg$c380 = { type: \"literal\", value: \"new\", description: \"\\\"new\\\"\" },\n        peg$c381 = \"no\",\n        peg$c382 = { type: \"literal\", value: \"no\", description: \"\\\"no\\\"\" },\n        peg$c383 = \"not\",\n        peg$c384 = { type: \"literal\", value: \"not\", description: \"\\\"not\\\"\" },\n        peg$c385 = \"null\",\n        peg$c386 = { type: \"literal\", value: \"null\", description: \"\\\"null\\\"\" },\n        peg$c387 = \"of\",\n        peg$c388 = { type: \"literal\", value: \"of\", description: \"\\\"of\\\"\" },\n        peg$c389 = \"off\",\n        peg$c390 = { type: \"literal\", value: \"off\", description: \"\\\"off\\\"\" },\n        peg$c391 = \"on\",\n        peg$c392 = { type: \"literal\", value: \"on\", description: \"\\\"on\\\"\" },\n        peg$c393 = \"or\",\n        peg$c394 = { type: \"literal\", value: \"or\", description: \"\\\"or\\\"\" },\n        peg$c395 = \"own\",\n        peg$c396 = { type: \"literal\", value: \"own\", description: \"\\\"own\\\"\" },\n        peg$c397 = \"return\",\n        peg$c398 = { type: \"literal\", value: \"return\", description: \"\\\"return\\\"\" },\n        peg$c399 = \"switch\",\n        peg$c400 = { type: \"literal\", value: \"switch\", description: \"\\\"switch\\\"\" },\n        peg$c401 = \"then\",\n        peg$c402 = { type: \"literal\", value: \"then\", description: \"\\\"then\\\"\" },\n        peg$c403 = \"this\",\n        peg$c404 = { type: \"literal\", value: \"this\", description: \"\\\"this\\\"\" },\n        peg$c405 = \"throw\",\n        peg$c406 = { type: \"literal\", value: \"throw\", description: \"\\\"throw\\\"\" },\n        peg$c407 = \"true\",\n        peg$c408 = { type: \"literal\", value: \"true\", description: \"\\\"true\\\"\" },\n        peg$c409 = \"try\",\n        peg$c410 = { type: \"literal\", value: \"try\", description: \"\\\"try\\\"\" },\n        peg$c411 = \"typeof\",\n        peg$c412 = { type: \"literal\", value: \"typeof\", description: \"\\\"typeof\\\"\" },\n        peg$c413 = \"undefined\",\n        peg$c414 = { type: \"literal\", value: \"undefined\", description: \"\\\"undefined\\\"\" },\n        peg$c415 = \"unless\",\n        peg$c416 = { type: \"literal\", value: \"unless\", description: \"\\\"unless\\\"\" },\n        peg$c417 = \"until\",\n        peg$c418 = { type: \"literal\", value: \"until\", description: \"\\\"until\\\"\" },\n        peg$c419 = \"when\",\n        peg$c420 = { type: \"literal\", value: \"when\", description: \"\\\"when\\\"\" },\n        peg$c421 = \"while\",\n        peg$c422 = { type: \"literal\", value: \"while\", description: \"\\\"while\\\"\" },\n        peg$c423 = \"yes\",\n        peg$c424 = { type: \"literal\", value: \"yes\", description: \"\\\"yes\\\"\" },\n        peg$c425 = \"super\",\n        peg$c426 = { type: \"literal\", value: \"super\", description: \"\\\"super\\\"\" },\n        peg$c427 = \"case\",\n        peg$c428 = { type: \"literal\", value: \"case\", description: \"\\\"case\\\"\" },\n        peg$c429 = \"default\",\n        peg$c430 = { type: \"literal\", value: \"default\", description: \"\\\"default\\\"\" },\n        peg$c431 = \"function\",\n        peg$c432 = { type: \"literal\", value: \"function\", description: \"\\\"function\\\"\" },\n        peg$c433 = \"var\",\n        peg$c434 = { type: \"literal\", value: \"var\", description: \"\\\"var\\\"\" },\n        peg$c435 = \"void\",\n        peg$c436 = { type: \"literal\", value: \"void\", description: \"\\\"void\\\"\" },\n        peg$c437 = \"with\",\n        peg$c438 = { type: \"literal\", value: \"with\", description: \"\\\"with\\\"\" },\n        peg$c439 = \"const\",\n        peg$c440 = { type: \"literal\", value: \"const\", description: \"\\\"const\\\"\" },\n        peg$c441 = \"let\",\n        peg$c442 = { type: \"literal\", value: \"let\", description: \"\\\"let\\\"\" },\n        peg$c443 = \"enum\",\n        peg$c444 = { type: \"literal\", value: \"enum\", description: \"\\\"enum\\\"\" },\n        peg$c445 = \"export\",\n        peg$c446 = { type: \"literal\", value: \"export\", description: \"\\\"export\\\"\" },\n        peg$c447 = \"import\",\n        peg$c448 = { type: \"literal\", value: \"import\", description: \"\\\"import\\\"\" },\n        peg$c449 = \"native\",\n        peg$c450 = { type: \"literal\", value: \"native\", description: \"\\\"native\\\"\" },\n        peg$c451 = \"implements\",\n        peg$c452 = { type: \"literal\", value: \"implements\", description: \"\\\"implements\\\"\" },\n        peg$c453 = \"interface\",\n        peg$c454 = { type: \"literal\", value: \"interface\", description: \"\\\"interface\\\"\" },\n        peg$c455 = \"package\",\n        peg$c456 = { type: \"literal\", value: \"package\", description: \"\\\"package\\\"\" },\n        peg$c457 = \"private\",\n        peg$c458 = { type: \"literal\", value: \"private\", description: \"\\\"private\\\"\" },\n        peg$c459 = \"protected\",\n        peg$c460 = { type: \"literal\", value: \"protected\", description: \"\\\"protected\\\"\" },\n        peg$c461 = \"public\",\n        peg$c462 = { type: \"literal\", value: \"public\", description: \"\\\"public\\\"\" },\n        peg$c463 = \"static\",\n        peg$c464 = { type: \"literal\", value: \"static\", description: \"\\\"static\\\"\" },\n        peg$c465 = \"yield\",\n        peg$c466 = { type: \"literal\", value: \"yield\", description: \"\\\"yield\\\"\" },\n        peg$c467 = \"\\\\u\",\n        peg$c468 = { type: \"literal\", value: \"\\\\u\", description: \"\\\"\\\\\\\\u\\\"\" },\n        peg$c469 = function(h0, h1, h2, h3) {return String.fromCharCode(parseInt(h0 + h1 + h2 + h3, 16));\n        function isOwn$(o, p) {\n          return {}.hasOwnProperty.call(o, p);\n        }\n        function in$(member, list) {\n          for (var i = 0, length = list.length; i < length; ++i)\n            if (i in list && list[i] === member)\n              return true;\n          return false;\n        }},\n        peg$c470 = /^[A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0531-\\u0556\\u10A0-\\u10C5\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uFF21-\\uFF3Aa-z\\xAA\\xB5\\xBA\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0561-\\u0587\\u1D00-\\u1D2B\\u1D62-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7C\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2D00-\\u2D25\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7FA\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D61\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA717-\\uA71F\\uA770\\uA788\\uA9CF\\uAA70\\uAADD\\uFF70\\uFF9E\\uFF9F\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC\\u0EDD\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u1100-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BC0-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u2135-\\u2138\\u2D30-\\u2D65\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400\\u4DB5\\u4E00\\u9FCB\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA2D\\uFA30-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF]/,\n        peg$c471 = { type: \"class\", value: \"[A-Z\\\\xC0-\\\\xD6\\\\xD8-\\\\xDE\\\\u0100\\\\u0102\\\\u0104\\\\u0106\\\\u0108\\\\u010A\\\\u010C\\\\u010E\\\\u0110\\\\u0112\\\\u0114\\\\u0116\\\\u0118\\\\u011A\\\\u011C\\\\u011E\\\\u0120\\\\u0122\\\\u0124\\\\u0126\\\\u0128\\\\u012A\\\\u012C\\\\u012E\\\\u0130\\\\u0132\\\\u0134\\\\u0136\\\\u0139\\\\u013B\\\\u013D\\\\u013F\\\\u0141\\\\u0143\\\\u0145\\\\u0147\\\\u014A\\\\u014C\\\\u014E\\\\u0150\\\\u0152\\\\u0154\\\\u0156\\\\u0158\\\\u015A\\\\u015C\\\\u015E\\\\u0160\\\\u0162\\\\u0164\\\\u0166\\\\u0168\\\\u016A\\\\u016C\\\\u016E\\\\u0170\\\\u0172\\\\u0174\\\\u0176\\\\u0178\\\\u0179\\\\u017B\\\\u017D\\\\u0181\\\\u0182\\\\u0184\\\\u0186\\\\u0187\\\\u0189-\\\\u018B\\\\u018E-\\\\u0191\\\\u0193\\\\u0194\\\\u0196-\\\\u0198\\\\u019C\\\\u019D\\\\u019F\\\\u01A0\\\\u01A2\\\\u01A4\\\\u01A6\\\\u01A7\\\\u01A9\\\\u01AC\\\\u01AE\\\\u01AF\\\\u01B1-\\\\u01B3\\\\u01B5\\\\u01B7\\\\u01B8\\\\u01BC\\\\u01C4\\\\u01C7\\\\u01CA\\\\u01CD\\\\u01CF\\\\u01D1\\\\u01D3\\\\u01D5\\\\u01D7\\\\u01D9\\\\u01DB\\\\u01DE\\\\u01E0\\\\u01E2\\\\u01E4\\\\u01E6\\\\u01E8\\\\u01EA\\\\u01EC\\\\u01EE\\\\u01F1\\\\u01F4\\\\u01F6-\\\\u01F8\\\\u01FA\\\\u01FC\\\\u01FE\\\\u0200\\\\u0202\\\\u0204\\\\u0206\\\\u0208\\\\u020A\\\\u020C\\\\u020E\\\\u0210\\\\u0212\\\\u0214\\\\u0216\\\\u0218\\\\u021A\\\\u021C\\\\u021E\\\\u0220\\\\u0222\\\\u0224\\\\u0226\\\\u0228\\\\u022A\\\\u022C\\\\u022E\\\\u0230\\\\u0232\\\\u023A\\\\u023B\\\\u023D\\\\u023E\\\\u0241\\\\u0243-\\\\u0246\\\\u0248\\\\u024A\\\\u024C\\\\u024E\\\\u0370\\\\u0372\\\\u0376\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E\\\\u038F\\\\u0391-\\\\u03A1\\\\u03A3-\\\\u03AB\\\\u03CF\\\\u03D2-\\\\u03D4\\\\u03D8\\\\u03DA\\\\u03DC\\\\u03DE\\\\u03E0\\\\u03E2\\\\u03E4\\\\u03E6\\\\u03E8\\\\u03EA\\\\u03EC\\\\u03EE\\\\u03F4\\\\u03F7\\\\u03F9\\\\u03FA\\\\u03FD-\\\\u042F\\\\u0460\\\\u0462\\\\u0464\\\\u0466\\\\u0468\\\\u046A\\\\u046C\\\\u046E\\\\u0470\\\\u0472\\\\u0474\\\\u0476\\\\u0478\\\\u047A\\\\u047C\\\\u047E\\\\u0480\\\\u048A\\\\u048C\\\\u048E\\\\u0490\\\\u0492\\\\u0494\\\\u0496\\\\u0498\\\\u049A\\\\u049C\\\\u049E\\\\u04A0\\\\u04A2\\\\u04A4\\\\u04A6\\\\u04A8\\\\u04AA\\\\u04AC\\\\u04AE\\\\u04B0\\\\u04B2\\\\u04B4\\\\u04B6\\\\u04B8\\\\u04BA\\\\u04BC\\\\u04BE\\\\u04C0\\\\u04C1\\\\u04C3\\\\u04C5\\\\u04C7\\\\u04C9\\\\u04CB\\\\u04CD\\\\u04D0\\\\u04D2\\\\u04D4\\\\u04D6\\\\u04D8\\\\u04DA\\\\u04DC\\\\u04DE\\\\u04E0\\\\u04E2\\\\u04E4\\\\u04E6\\\\u04E8\\\\u04EA\\\\u04EC\\\\u04EE\\\\u04F0\\\\u04F2\\\\u04F4\\\\u04F6\\\\u04F8\\\\u04FA\\\\u04FC\\\\u04FE\\\\u0500\\\\u0502\\\\u0504\\\\u0506\\\\u0508\\\\u050A\\\\u050C\\\\u050E\\\\u0510\\\\u0512\\\\u0514\\\\u0516\\\\u0518\\\\u051A\\\\u051C\\\\u051E\\\\u0520\\\\u0522\\\\u0524\\\\u0526\\\\u0531-\\\\u0556\\\\u10A0-\\\\u10C5\\\\u1E00\\\\u1E02\\\\u1E04\\\\u1E06\\\\u1E08\\\\u1E0A\\\\u1E0C\\\\u1E0E\\\\u1E10\\\\u1E12\\\\u1E14\\\\u1E16\\\\u1E18\\\\u1E1A\\\\u1E1C\\\\u1E1E\\\\u1E20\\\\u1E22\\\\u1E24\\\\u1E26\\\\u1E28\\\\u1E2A\\\\u1E2C\\\\u1E2E\\\\u1E30\\\\u1E32\\\\u1E34\\\\u1E36\\\\u1E38\\\\u1E3A\\\\u1E3C\\\\u1E3E\\\\u1E40\\\\u1E42\\\\u1E44\\\\u1E46\\\\u1E48\\\\u1E4A\\\\u1E4C\\\\u1E4E\\\\u1E50\\\\u1E52\\\\u1E54\\\\u1E56\\\\u1E58\\\\u1E5A\\\\u1E5C\\\\u1E5E\\\\u1E60\\\\u1E62\\\\u1E64\\\\u1E66\\\\u1E68\\\\u1E6A\\\\u1E6C\\\\u1E6E\\\\u1E70\\\\u1E72\\\\u1E74\\\\u1E76\\\\u1E78\\\\u1E7A\\\\u1E7C\\\\u1E7E\\\\u1E80\\\\u1E82\\\\u1E84\\\\u1E86\\\\u1E88\\\\u1E8A\\\\u1E8C\\\\u1E8E\\\\u1E90\\\\u1E92\\\\u1E94\\\\u1E9E\\\\u1EA0\\\\u1EA2\\\\u1EA4\\\\u1EA6\\\\u1EA8\\\\u1EAA\\\\u1EAC\\\\u1EAE\\\\u1EB0\\\\u1EB2\\\\u1EB4\\\\u1EB6\\\\u1EB8\\\\u1EBA\\\\u1EBC\\\\u1EBE\\\\u1EC0\\\\u1EC2\\\\u1EC4\\\\u1EC6\\\\u1EC8\\\\u1ECA\\\\u1ECC\\\\u1ECE\\\\u1ED0\\\\u1ED2\\\\u1ED4\\\\u1ED6\\\\u1ED8\\\\u1EDA\\\\u1EDC\\\\u1EDE\\\\u1EE0\\\\u1EE2\\\\u1EE4\\\\u1EE6\\\\u1EE8\\\\u1EEA\\\\u1EEC\\\\u1EEE\\\\u1EF0\\\\u1EF2\\\\u1EF4\\\\u1EF6\\\\u1EF8\\\\u1EFA\\\\u1EFC\\\\u1EFE\\\\u1F08-\\\\u1F0F\\\\u1F18-\\\\u1F1D\\\\u1F28-\\\\u1F2F\\\\u1F38-\\\\u1F3F\\\\u1F48-\\\\u1F4D\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F\\\\u1F68-\\\\u1F6F\\\\u1FB8-\\\\u1FBB\\\\u1FC8-\\\\u1FCB\\\\u1FD8-\\\\u1FDB\\\\u1FE8-\\\\u1FEC\\\\u1FF8-\\\\u1FFB\\\\u2102\\\\u2107\\\\u210B-\\\\u210D\\\\u2110-\\\\u2112\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u2130-\\\\u2133\\\\u213E\\\\u213F\\\\u2145\\\\u2183\\\\u2C00-\\\\u2C2E\\\\u2C60\\\\u2C62-\\\\u2C64\\\\u2C67\\\\u2C69\\\\u2C6B\\\\u2C6D-\\\\u2C70\\\\u2C72\\\\u2C75\\\\u2C7E-\\\\u2C80\\\\u2C82\\\\u2C84\\\\u2C86\\\\u2C88\\\\u2C8A\\\\u2C8C\\\\u2C8E\\\\u2C90\\\\u2C92\\\\u2C94\\\\u2C96\\\\u2C98\\\\u2C9A\\\\u2C9C\\\\u2C9E\\\\u2CA0\\\\u2CA2\\\\u2CA4\\\\u2CA6\\\\u2CA8\\\\u2CAA\\\\u2CAC\\\\u2CAE\\\\u2CB0\\\\u2CB2\\\\u2CB4\\\\u2CB6\\\\u2CB8\\\\u2CBA\\\\u2CBC\\\\u2CBE\\\\u2CC0\\\\u2CC2\\\\u2CC4\\\\u2CC6\\\\u2CC8\\\\u2CCA\\\\u2CCC\\\\u2CCE\\\\u2CD0\\\\u2CD2\\\\u2CD4\\\\u2CD6\\\\u2CD8\\\\u2CDA\\\\u2CDC\\\\u2CDE\\\\u2CE0\\\\u2CE2\\\\u2CEB\\\\u2CED\\\\uA640\\\\uA642\\\\uA644\\\\uA646\\\\uA648\\\\uA64A\\\\uA64C\\\\uA64E\\\\uA650\\\\uA652\\\\uA654\\\\uA656\\\\uA658\\\\uA65A\\\\uA65C\\\\uA65E\\\\uA660\\\\uA662\\\\uA664\\\\uA666\\\\uA668\\\\uA66A\\\\uA66C\\\\uA680\\\\uA682\\\\uA684\\\\uA686\\\\uA688\\\\uA68A\\\\uA68C\\\\uA68E\\\\uA690\\\\uA692\\\\uA694\\\\uA696\\\\uA722\\\\uA724\\\\uA726\\\\uA728\\\\uA72A\\\\uA72C\\\\uA72E\\\\uA732\\\\uA734\\\\uA736\\\\uA738\\\\uA73A\\\\uA73C\\\\uA73E\\\\uA740\\\\uA742\\\\uA744\\\\uA746\\\\uA748\\\\uA74A\\\\uA74C\\\\uA74E\\\\uA750\\\\uA752\\\\uA754\\\\uA756\\\\uA758\\\\uA75A\\\\uA75C\\\\uA75E\\\\uA760\\\\uA762\\\\uA764\\\\uA766\\\\uA768\\\\uA76A\\\\uA76C\\\\uA76E\\\\uA779\\\\uA77B\\\\uA77D\\\\uA77E\\\\uA780\\\\uA782\\\\uA784\\\\uA786\\\\uA78B\\\\uA78D\\\\uA790\\\\uA7A0\\\\uA7A2\\\\uA7A4\\\\uA7A6\\\\uA7A8\\\\uFF21-\\\\uFF3Aa-z\\\\xAA\\\\xB5\\\\xBA\\\\xDF-\\\\xF6\\\\xF8-\\\\xFF\\\\u0101\\\\u0103\\\\u0105\\\\u0107\\\\u0109\\\\u010B\\\\u010D\\\\u010F\\\\u0111\\\\u0113\\\\u0115\\\\u0117\\\\u0119\\\\u011B\\\\u011D\\\\u011F\\\\u0121\\\\u0123\\\\u0125\\\\u0127\\\\u0129\\\\u012B\\\\u012D\\\\u012F\\\\u0131\\\\u0133\\\\u0135\\\\u0137\\\\u0138\\\\u013A\\\\u013C\\\\u013E\\\\u0140\\\\u0142\\\\u0144\\\\u0146\\\\u0148\\\\u0149\\\\u014B\\\\u014D\\\\u014F\\\\u0151\\\\u0153\\\\u0155\\\\u0157\\\\u0159\\\\u015B\\\\u015D\\\\u015F\\\\u0161\\\\u0163\\\\u0165\\\\u0167\\\\u0169\\\\u016B\\\\u016D\\\\u016F\\\\u0171\\\\u0173\\\\u0175\\\\u0177\\\\u017A\\\\u017C\\\\u017E-\\\\u0180\\\\u0183\\\\u0185\\\\u0188\\\\u018C\\\\u018D\\\\u0192\\\\u0195\\\\u0199-\\\\u019B\\\\u019E\\\\u01A1\\\\u01A3\\\\u01A5\\\\u01A8\\\\u01AA\\\\u01AB\\\\u01AD\\\\u01B0\\\\u01B4\\\\u01B6\\\\u01B9\\\\u01BA\\\\u01BD-\\\\u01BF\\\\u01C6\\\\u01C9\\\\u01CC\\\\u01CE\\\\u01D0\\\\u01D2\\\\u01D4\\\\u01D6\\\\u01D8\\\\u01DA\\\\u01DC\\\\u01DD\\\\u01DF\\\\u01E1\\\\u01E3\\\\u01E5\\\\u01E7\\\\u01E9\\\\u01EB\\\\u01ED\\\\u01EF\\\\u01F0\\\\u01F3\\\\u01F5\\\\u01F9\\\\u01FB\\\\u01FD\\\\u01FF\\\\u0201\\\\u0203\\\\u0205\\\\u0207\\\\u0209\\\\u020B\\\\u020D\\\\u020F\\\\u0211\\\\u0213\\\\u0215\\\\u0217\\\\u0219\\\\u021B\\\\u021D\\\\u021F\\\\u0221\\\\u0223\\\\u0225\\\\u0227\\\\u0229\\\\u022B\\\\u022D\\\\u022F\\\\u0231\\\\u0233-\\\\u0239\\\\u023C\\\\u023F\\\\u0240\\\\u0242\\\\u0247\\\\u0249\\\\u024B\\\\u024D\\\\u024F-\\\\u0293\\\\u0295-\\\\u02AF\\\\u0371\\\\u0373\\\\u0377\\\\u037B-\\\\u037D\\\\u0390\\\\u03AC-\\\\u03CE\\\\u03D0\\\\u03D1\\\\u03D5-\\\\u03D7\\\\u03D9\\\\u03DB\\\\u03DD\\\\u03DF\\\\u03E1\\\\u03E3\\\\u03E5\\\\u03E7\\\\u03E9\\\\u03EB\\\\u03ED\\\\u03EF-\\\\u03F3\\\\u03F5\\\\u03F8\\\\u03FB\\\\u03FC\\\\u0430-\\\\u045F\\\\u0461\\\\u0463\\\\u0465\\\\u0467\\\\u0469\\\\u046B\\\\u046D\\\\u046F\\\\u0471\\\\u0473\\\\u0475\\\\u0477\\\\u0479\\\\u047B\\\\u047D\\\\u047F\\\\u0481\\\\u048B\\\\u048D\\\\u048F\\\\u0491\\\\u0493\\\\u0495\\\\u0497\\\\u0499\\\\u049B\\\\u049D\\\\u049F\\\\u04A1\\\\u04A3\\\\u04A5\\\\u04A7\\\\u04A9\\\\u04AB\\\\u04AD\\\\u04AF\\\\u04B1\\\\u04B3\\\\u04B5\\\\u04B7\\\\u04B9\\\\u04BB\\\\u04BD\\\\u04BF\\\\u04C2\\\\u04C4\\\\u04C6\\\\u04C8\\\\u04CA\\\\u04CC\\\\u04CE\\\\u04CF\\\\u04D1\\\\u04D3\\\\u04D5\\\\u04D7\\\\u04D9\\\\u04DB\\\\u04DD\\\\u04DF\\\\u04E1\\\\u04E3\\\\u04E5\\\\u04E7\\\\u04E9\\\\u04EB\\\\u04ED\\\\u04EF\\\\u04F1\\\\u04F3\\\\u04F5\\\\u04F7\\\\u04F9\\\\u04FB\\\\u04FD\\\\u04FF\\\\u0501\\\\u0503\\\\u0505\\\\u0507\\\\u0509\\\\u050B\\\\u050D\\\\u050F\\\\u0511\\\\u0513\\\\u0515\\\\u0517\\\\u0519\\\\u051B\\\\u051D\\\\u051F\\\\u0521\\\\u0523\\\\u0525\\\\u0527\\\\u0561-\\\\u0587\\\\u1D00-\\\\u1D2B\\\\u1D62-\\\\u1D77\\\\u1D79-\\\\u1D9A\\\\u1E01\\\\u1E03\\\\u1E05\\\\u1E07\\\\u1E09\\\\u1E0B\\\\u1E0D\\\\u1E0F\\\\u1E11\\\\u1E13\\\\u1E15\\\\u1E17\\\\u1E19\\\\u1E1B\\\\u1E1D\\\\u1E1F\\\\u1E21\\\\u1E23\\\\u1E25\\\\u1E27\\\\u1E29\\\\u1E2B\\\\u1E2D\\\\u1E2F\\\\u1E31\\\\u1E33\\\\u1E35\\\\u1E37\\\\u1E39\\\\u1E3B\\\\u1E3D\\\\u1E3F\\\\u1E41\\\\u1E43\\\\u1E45\\\\u1E47\\\\u1E49\\\\u1E4B\\\\u1E4D\\\\u1E4F\\\\u1E51\\\\u1E53\\\\u1E55\\\\u1E57\\\\u1E59\\\\u1E5B\\\\u1E5D\\\\u1E5F\\\\u1E61\\\\u1E63\\\\u1E65\\\\u1E67\\\\u1E69\\\\u1E6B\\\\u1E6D\\\\u1E6F\\\\u1E71\\\\u1E73\\\\u1E75\\\\u1E77\\\\u1E79\\\\u1E7B\\\\u1E7D\\\\u1E7F\\\\u1E81\\\\u1E83\\\\u1E85\\\\u1E87\\\\u1E89\\\\u1E8B\\\\u1E8D\\\\u1E8F\\\\u1E91\\\\u1E93\\\\u1E95-\\\\u1E9D\\\\u1E9F\\\\u1EA1\\\\u1EA3\\\\u1EA5\\\\u1EA7\\\\u1EA9\\\\u1EAB\\\\u1EAD\\\\u1EAF\\\\u1EB1\\\\u1EB3\\\\u1EB5\\\\u1EB7\\\\u1EB9\\\\u1EBB\\\\u1EBD\\\\u1EBF\\\\u1EC1\\\\u1EC3\\\\u1EC5\\\\u1EC7\\\\u1EC9\\\\u1ECB\\\\u1ECD\\\\u1ECF\\\\u1ED1\\\\u1ED3\\\\u1ED5\\\\u1ED7\\\\u1ED9\\\\u1EDB\\\\u1EDD\\\\u1EDF\\\\u1EE1\\\\u1EE3\\\\u1EE5\\\\u1EE7\\\\u1EE9\\\\u1EEB\\\\u1EED\\\\u1EEF\\\\u1EF1\\\\u1EF3\\\\u1EF5\\\\u1EF7\\\\u1EF9\\\\u1EFB\\\\u1EFD\\\\u1EFF-\\\\u1F07\\\\u1F10-\\\\u1F15\\\\u1F20-\\\\u1F27\\\\u1F30-\\\\u1F37\\\\u1F40-\\\\u1F45\\\\u1F50-\\\\u1F57\\\\u1F60-\\\\u1F67\\\\u1F70-\\\\u1F7D\\\\u1F80-\\\\u1F87\\\\u1F90-\\\\u1F97\\\\u1FA0-\\\\u1FA7\\\\u1FB0-\\\\u1FB4\\\\u1FB6\\\\u1FB7\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6\\\\u1FC7\\\\u1FD0-\\\\u1FD3\\\\u1FD6\\\\u1FD7\\\\u1FE0-\\\\u1FE7\\\\u1FF2-\\\\u1FF4\\\\u1FF6\\\\u1FF7\\\\u210A\\\\u210E\\\\u210F\\\\u2113\\\\u212F\\\\u2134\\\\u2139\\\\u213C\\\\u213D\\\\u2146-\\\\u2149\\\\u214E\\\\u2184\\\\u2C30-\\\\u2C5E\\\\u2C61\\\\u2C65\\\\u2C66\\\\u2C68\\\\u2C6A\\\\u2C6C\\\\u2C71\\\\u2C73\\\\u2C74\\\\u2C76-\\\\u2C7C\\\\u2C81\\\\u2C83\\\\u2C85\\\\u2C87\\\\u2C89\\\\u2C8B\\\\u2C8D\\\\u2C8F\\\\u2C91\\\\u2C93\\\\u2C95\\\\u2C97\\\\u2C99\\\\u2C9B\\\\u2C9D\\\\u2C9F\\\\u2CA1\\\\u2CA3\\\\u2CA5\\\\u2CA7\\\\u2CA9\\\\u2CAB\\\\u2CAD\\\\u2CAF\\\\u2CB1\\\\u2CB3\\\\u2CB5\\\\u2CB7\\\\u2CB9\\\\u2CBB\\\\u2CBD\\\\u2CBF\\\\u2CC1\\\\u2CC3\\\\u2CC5\\\\u2CC7\\\\u2CC9\\\\u2CCB\\\\u2CCD\\\\u2CCF\\\\u2CD1\\\\u2CD3\\\\u2CD5\\\\u2CD7\\\\u2CD9\\\\u2CDB\\\\u2CDD\\\\u2CDF\\\\u2CE1\\\\u2CE3\\\\u2CE4\\\\u2CEC\\\\u2CEE\\\\u2D00-\\\\u2D25\\\\uA641\\\\uA643\\\\uA645\\\\uA647\\\\uA649\\\\uA64B\\\\uA64D\\\\uA64F\\\\uA651\\\\uA653\\\\uA655\\\\uA657\\\\uA659\\\\uA65B\\\\uA65D\\\\uA65F\\\\uA661\\\\uA663\\\\uA665\\\\uA667\\\\uA669\\\\uA66B\\\\uA66D\\\\uA681\\\\uA683\\\\uA685\\\\uA687\\\\uA689\\\\uA68B\\\\uA68D\\\\uA68F\\\\uA691\\\\uA693\\\\uA695\\\\uA697\\\\uA723\\\\uA725\\\\uA727\\\\uA729\\\\uA72B\\\\uA72D\\\\uA72F-\\\\uA731\\\\uA733\\\\uA735\\\\uA737\\\\uA739\\\\uA73B\\\\uA73D\\\\uA73F\\\\uA741\\\\uA743\\\\uA745\\\\uA747\\\\uA749\\\\uA74B\\\\uA74D\\\\uA74F\\\\uA751\\\\uA753\\\\uA755\\\\uA757\\\\uA759\\\\uA75B\\\\uA75D\\\\uA75F\\\\uA761\\\\uA763\\\\uA765\\\\uA767\\\\uA769\\\\uA76B\\\\uA76D\\\\uA76F\\\\uA771-\\\\uA778\\\\uA77A\\\\uA77C\\\\uA77F\\\\uA781\\\\uA783\\\\uA785\\\\uA787\\\\uA78C\\\\uA78E\\\\uA791\\\\uA7A1\\\\uA7A3\\\\uA7A5\\\\uA7A7\\\\uA7A9\\\\uA7FA\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFF41-\\\\uFF5A\\\\u01C5\\\\u01C8\\\\u01CB\\\\u01F2\\\\u1F88-\\\\u1F8F\\\\u1F98-\\\\u1F9F\\\\u1FA8-\\\\u1FAF\\\\u1FBC\\\\u1FCC\\\\u1FFC\\\\u02B0-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0374\\\\u037A\\\\u0559\\\\u0640\\\\u06E5\\\\u06E6\\\\u07F4\\\\u07F5\\\\u07FA\\\\u081A\\\\u0824\\\\u0828\\\\u0971\\\\u0E46\\\\u0EC6\\\\u10FC\\\\u17D7\\\\u1843\\\\u1AA7\\\\u1C78-\\\\u1C7D\\\\u1D2C-\\\\u1D61\\\\u1D78\\\\u1D9B-\\\\u1DBF\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2C7D\\\\u2D6F\\\\u2E2F\\\\u3005\\\\u3031-\\\\u3035\\\\u303B\\\\u309D\\\\u309E\\\\u30FC-\\\\u30FE\\\\uA015\\\\uA4F8-\\\\uA4FD\\\\uA60C\\\\uA67F\\\\uA717-\\\\uA71F\\\\uA770\\\\uA788\\\\uA9CF\\\\uAA70\\\\uAADD\\\\uFF70\\\\uFF9E\\\\uFF9F\\\\u01BB\\\\u01C0-\\\\u01C3\\\\u0294\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u063F\\\\u0641-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u0800-\\\\u0815\\\\u0840-\\\\u0858\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0972-\\\\u0977\\\\u0979-\\\\u097F\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C33\\\\u0C35-\\\\u0C39\\\\u0C3D\\\\u0C58\\\\u0C59\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D60\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E45\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EDC\\\\u0EDD\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10D0-\\\\u10FA\\\\u1100-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17DC\\\\u1820-\\\\u1842\\\\u1844-\\\\u1877\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191C\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19C1-\\\\u19C7\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BC0-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C77\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u2135-\\\\u2138\\\\u2D30-\\\\u2D65\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u3006\\\\u303C\\\\u3041-\\\\u3096\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400\\\\u4DB5\\\\u4E00\\\\u9FCB\\\\uA000-\\\\uA014\\\\uA016-\\\\uA48C\\\\uA4D0-\\\\uA4F7\\\\uA500-\\\\uA60B\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA66E\\\\uA6A0-\\\\uA6E5\\\\uA7FB-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA6F\\\\uAA71-\\\\uAA76\\\\uAA7A\\\\uAA80-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB\\\\uAADC\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uABC0-\\\\uABE2\\\\uAC00\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA2D\\\\uFA30-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF66-\\\\uFF6F\\\\uFF71-\\\\uFF9D\\\\uFFA0-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC\\\\u16EE-\\\\u16F0\\\\u2160-\\\\u2182\\\\u2185-\\\\u2188\\\\u3007\\\\u3021-\\\\u3029\\\\u3038-\\\\u303A\\\\uA6E6-\\\\uA6EF]\", description: \"[A-Z\\\\xC0-\\\\xD6\\\\xD8-\\\\xDE\\\\u0100\\\\u0102\\\\u0104\\\\u0106\\\\u0108\\\\u010A\\\\u010C\\\\u010E\\\\u0110\\\\u0112\\\\u0114\\\\u0116\\\\u0118\\\\u011A\\\\u011C\\\\u011E\\\\u0120\\\\u0122\\\\u0124\\\\u0126\\\\u0128\\\\u012A\\\\u012C\\\\u012E\\\\u0130\\\\u0132\\\\u0134\\\\u0136\\\\u0139\\\\u013B\\\\u013D\\\\u013F\\\\u0141\\\\u0143\\\\u0145\\\\u0147\\\\u014A\\\\u014C\\\\u014E\\\\u0150\\\\u0152\\\\u0154\\\\u0156\\\\u0158\\\\u015A\\\\u015C\\\\u015E\\\\u0160\\\\u0162\\\\u0164\\\\u0166\\\\u0168\\\\u016A\\\\u016C\\\\u016E\\\\u0170\\\\u0172\\\\u0174\\\\u0176\\\\u0178\\\\u0179\\\\u017B\\\\u017D\\\\u0181\\\\u0182\\\\u0184\\\\u0186\\\\u0187\\\\u0189-\\\\u018B\\\\u018E-\\\\u0191\\\\u0193\\\\u0194\\\\u0196-\\\\u0198\\\\u019C\\\\u019D\\\\u019F\\\\u01A0\\\\u01A2\\\\u01A4\\\\u01A6\\\\u01A7\\\\u01A9\\\\u01AC\\\\u01AE\\\\u01AF\\\\u01B1-\\\\u01B3\\\\u01B5\\\\u01B7\\\\u01B8\\\\u01BC\\\\u01C4\\\\u01C7\\\\u01CA\\\\u01CD\\\\u01CF\\\\u01D1\\\\u01D3\\\\u01D5\\\\u01D7\\\\u01D9\\\\u01DB\\\\u01DE\\\\u01E0\\\\u01E2\\\\u01E4\\\\u01E6\\\\u01E8\\\\u01EA\\\\u01EC\\\\u01EE\\\\u01F1\\\\u01F4\\\\u01F6-\\\\u01F8\\\\u01FA\\\\u01FC\\\\u01FE\\\\u0200\\\\u0202\\\\u0204\\\\u0206\\\\u0208\\\\u020A\\\\u020C\\\\u020E\\\\u0210\\\\u0212\\\\u0214\\\\u0216\\\\u0218\\\\u021A\\\\u021C\\\\u021E\\\\u0220\\\\u0222\\\\u0224\\\\u0226\\\\u0228\\\\u022A\\\\u022C\\\\u022E\\\\u0230\\\\u0232\\\\u023A\\\\u023B\\\\u023D\\\\u023E\\\\u0241\\\\u0243-\\\\u0246\\\\u0248\\\\u024A\\\\u024C\\\\u024E\\\\u0370\\\\u0372\\\\u0376\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E\\\\u038F\\\\u0391-\\\\u03A1\\\\u03A3-\\\\u03AB\\\\u03CF\\\\u03D2-\\\\u03D4\\\\u03D8\\\\u03DA\\\\u03DC\\\\u03DE\\\\u03E0\\\\u03E2\\\\u03E4\\\\u03E6\\\\u03E8\\\\u03EA\\\\u03EC\\\\u03EE\\\\u03F4\\\\u03F7\\\\u03F9\\\\u03FA\\\\u03FD-\\\\u042F\\\\u0460\\\\u0462\\\\u0464\\\\u0466\\\\u0468\\\\u046A\\\\u046C\\\\u046E\\\\u0470\\\\u0472\\\\u0474\\\\u0476\\\\u0478\\\\u047A\\\\u047C\\\\u047E\\\\u0480\\\\u048A\\\\u048C\\\\u048E\\\\u0490\\\\u0492\\\\u0494\\\\u0496\\\\u0498\\\\u049A\\\\u049C\\\\u049E\\\\u04A0\\\\u04A2\\\\u04A4\\\\u04A6\\\\u04A8\\\\u04AA\\\\u04AC\\\\u04AE\\\\u04B0\\\\u04B2\\\\u04B4\\\\u04B6\\\\u04B8\\\\u04BA\\\\u04BC\\\\u04BE\\\\u04C0\\\\u04C1\\\\u04C3\\\\u04C5\\\\u04C7\\\\u04C9\\\\u04CB\\\\u04CD\\\\u04D0\\\\u04D2\\\\u04D4\\\\u04D6\\\\u04D8\\\\u04DA\\\\u04DC\\\\u04DE\\\\u04E0\\\\u04E2\\\\u04E4\\\\u04E6\\\\u04E8\\\\u04EA\\\\u04EC\\\\u04EE\\\\u04F0\\\\u04F2\\\\u04F4\\\\u04F6\\\\u04F8\\\\u04FA\\\\u04FC\\\\u04FE\\\\u0500\\\\u0502\\\\u0504\\\\u0506\\\\u0508\\\\u050A\\\\u050C\\\\u050E\\\\u0510\\\\u0512\\\\u0514\\\\u0516\\\\u0518\\\\u051A\\\\u051C\\\\u051E\\\\u0520\\\\u0522\\\\u0524\\\\u0526\\\\u0531-\\\\u0556\\\\u10A0-\\\\u10C5\\\\u1E00\\\\u1E02\\\\u1E04\\\\u1E06\\\\u1E08\\\\u1E0A\\\\u1E0C\\\\u1E0E\\\\u1E10\\\\u1E12\\\\u1E14\\\\u1E16\\\\u1E18\\\\u1E1A\\\\u1E1C\\\\u1E1E\\\\u1E20\\\\u1E22\\\\u1E24\\\\u1E26\\\\u1E28\\\\u1E2A\\\\u1E2C\\\\u1E2E\\\\u1E30\\\\u1E32\\\\u1E34\\\\u1E36\\\\u1E38\\\\u1E3A\\\\u1E3C\\\\u1E3E\\\\u1E40\\\\u1E42\\\\u1E44\\\\u1E46\\\\u1E48\\\\u1E4A\\\\u1E4C\\\\u1E4E\\\\u1E50\\\\u1E52\\\\u1E54\\\\u1E56\\\\u1E58\\\\u1E5A\\\\u1E5C\\\\u1E5E\\\\u1E60\\\\u1E62\\\\u1E64\\\\u1E66\\\\u1E68\\\\u1E6A\\\\u1E6C\\\\u1E6E\\\\u1E70\\\\u1E72\\\\u1E74\\\\u1E76\\\\u1E78\\\\u1E7A\\\\u1E7C\\\\u1E7E\\\\u1E80\\\\u1E82\\\\u1E84\\\\u1E86\\\\u1E88\\\\u1E8A\\\\u1E8C\\\\u1E8E\\\\u1E90\\\\u1E92\\\\u1E94\\\\u1E9E\\\\u1EA0\\\\u1EA2\\\\u1EA4\\\\u1EA6\\\\u1EA8\\\\u1EAA\\\\u1EAC\\\\u1EAE\\\\u1EB0\\\\u1EB2\\\\u1EB4\\\\u1EB6\\\\u1EB8\\\\u1EBA\\\\u1EBC\\\\u1EBE\\\\u1EC0\\\\u1EC2\\\\u1EC4\\\\u1EC6\\\\u1EC8\\\\u1ECA\\\\u1ECC\\\\u1ECE\\\\u1ED0\\\\u1ED2\\\\u1ED4\\\\u1ED6\\\\u1ED8\\\\u1EDA\\\\u1EDC\\\\u1EDE\\\\u1EE0\\\\u1EE2\\\\u1EE4\\\\u1EE6\\\\u1EE8\\\\u1EEA\\\\u1EEC\\\\u1EEE\\\\u1EF0\\\\u1EF2\\\\u1EF4\\\\u1EF6\\\\u1EF8\\\\u1EFA\\\\u1EFC\\\\u1EFE\\\\u1F08-\\\\u1F0F\\\\u1F18-\\\\u1F1D\\\\u1F28-\\\\u1F2F\\\\u1F38-\\\\u1F3F\\\\u1F48-\\\\u1F4D\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F\\\\u1F68-\\\\u1F6F\\\\u1FB8-\\\\u1FBB\\\\u1FC8-\\\\u1FCB\\\\u1FD8-\\\\u1FDB\\\\u1FE8-\\\\u1FEC\\\\u1FF8-\\\\u1FFB\\\\u2102\\\\u2107\\\\u210B-\\\\u210D\\\\u2110-\\\\u2112\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u2130-\\\\u2133\\\\u213E\\\\u213F\\\\u2145\\\\u2183\\\\u2C00-\\\\u2C2E\\\\u2C60\\\\u2C62-\\\\u2C64\\\\u2C67\\\\u2C69\\\\u2C6B\\\\u2C6D-\\\\u2C70\\\\u2C72\\\\u2C75\\\\u2C7E-\\\\u2C80\\\\u2C82\\\\u2C84\\\\u2C86\\\\u2C88\\\\u2C8A\\\\u2C8C\\\\u2C8E\\\\u2C90\\\\u2C92\\\\u2C94\\\\u2C96\\\\u2C98\\\\u2C9A\\\\u2C9C\\\\u2C9E\\\\u2CA0\\\\u2CA2\\\\u2CA4\\\\u2CA6\\\\u2CA8\\\\u2CAA\\\\u2CAC\\\\u2CAE\\\\u2CB0\\\\u2CB2\\\\u2CB4\\\\u2CB6\\\\u2CB8\\\\u2CBA\\\\u2CBC\\\\u2CBE\\\\u2CC0\\\\u2CC2\\\\u2CC4\\\\u2CC6\\\\u2CC8\\\\u2CCA\\\\u2CCC\\\\u2CCE\\\\u2CD0\\\\u2CD2\\\\u2CD4\\\\u2CD6\\\\u2CD8\\\\u2CDA\\\\u2CDC\\\\u2CDE\\\\u2CE0\\\\u2CE2\\\\u2CEB\\\\u2CED\\\\uA640\\\\uA642\\\\uA644\\\\uA646\\\\uA648\\\\uA64A\\\\uA64C\\\\uA64E\\\\uA650\\\\uA652\\\\uA654\\\\uA656\\\\uA658\\\\uA65A\\\\uA65C\\\\uA65E\\\\uA660\\\\uA662\\\\uA664\\\\uA666\\\\uA668\\\\uA66A\\\\uA66C\\\\uA680\\\\uA682\\\\uA684\\\\uA686\\\\uA688\\\\uA68A\\\\uA68C\\\\uA68E\\\\uA690\\\\uA692\\\\uA694\\\\uA696\\\\uA722\\\\uA724\\\\uA726\\\\uA728\\\\uA72A\\\\uA72C\\\\uA72E\\\\uA732\\\\uA734\\\\uA736\\\\uA738\\\\uA73A\\\\uA73C\\\\uA73E\\\\uA740\\\\uA742\\\\uA744\\\\uA746\\\\uA748\\\\uA74A\\\\uA74C\\\\uA74E\\\\uA750\\\\uA752\\\\uA754\\\\uA756\\\\uA758\\\\uA75A\\\\uA75C\\\\uA75E\\\\uA760\\\\uA762\\\\uA764\\\\uA766\\\\uA768\\\\uA76A\\\\uA76C\\\\uA76E\\\\uA779\\\\uA77B\\\\uA77D\\\\uA77E\\\\uA780\\\\uA782\\\\uA784\\\\uA786\\\\uA78B\\\\uA78D\\\\uA790\\\\uA7A0\\\\uA7A2\\\\uA7A4\\\\uA7A6\\\\uA7A8\\\\uFF21-\\\\uFF3Aa-z\\\\xAA\\\\xB5\\\\xBA\\\\xDF-\\\\xF6\\\\xF8-\\\\xFF\\\\u0101\\\\u0103\\\\u0105\\\\u0107\\\\u0109\\\\u010B\\\\u010D\\\\u010F\\\\u0111\\\\u0113\\\\u0115\\\\u0117\\\\u0119\\\\u011B\\\\u011D\\\\u011F\\\\u0121\\\\u0123\\\\u0125\\\\u0127\\\\u0129\\\\u012B\\\\u012D\\\\u012F\\\\u0131\\\\u0133\\\\u0135\\\\u0137\\\\u0138\\\\u013A\\\\u013C\\\\u013E\\\\u0140\\\\u0142\\\\u0144\\\\u0146\\\\u0148\\\\u0149\\\\u014B\\\\u014D\\\\u014F\\\\u0151\\\\u0153\\\\u0155\\\\u0157\\\\u0159\\\\u015B\\\\u015D\\\\u015F\\\\u0161\\\\u0163\\\\u0165\\\\u0167\\\\u0169\\\\u016B\\\\u016D\\\\u016F\\\\u0171\\\\u0173\\\\u0175\\\\u0177\\\\u017A\\\\u017C\\\\u017E-\\\\u0180\\\\u0183\\\\u0185\\\\u0188\\\\u018C\\\\u018D\\\\u0192\\\\u0195\\\\u0199-\\\\u019B\\\\u019E\\\\u01A1\\\\u01A3\\\\u01A5\\\\u01A8\\\\u01AA\\\\u01AB\\\\u01AD\\\\u01B0\\\\u01B4\\\\u01B6\\\\u01B9\\\\u01BA\\\\u01BD-\\\\u01BF\\\\u01C6\\\\u01C9\\\\u01CC\\\\u01CE\\\\u01D0\\\\u01D2\\\\u01D4\\\\u01D6\\\\u01D8\\\\u01DA\\\\u01DC\\\\u01DD\\\\u01DF\\\\u01E1\\\\u01E3\\\\u01E5\\\\u01E7\\\\u01E9\\\\u01EB\\\\u01ED\\\\u01EF\\\\u01F0\\\\u01F3\\\\u01F5\\\\u01F9\\\\u01FB\\\\u01FD\\\\u01FF\\\\u0201\\\\u0203\\\\u0205\\\\u0207\\\\u0209\\\\u020B\\\\u020D\\\\u020F\\\\u0211\\\\u0213\\\\u0215\\\\u0217\\\\u0219\\\\u021B\\\\u021D\\\\u021F\\\\u0221\\\\u0223\\\\u0225\\\\u0227\\\\u0229\\\\u022B\\\\u022D\\\\u022F\\\\u0231\\\\u0233-\\\\u0239\\\\u023C\\\\u023F\\\\u0240\\\\u0242\\\\u0247\\\\u0249\\\\u024B\\\\u024D\\\\u024F-\\\\u0293\\\\u0295-\\\\u02AF\\\\u0371\\\\u0373\\\\u0377\\\\u037B-\\\\u037D\\\\u0390\\\\u03AC-\\\\u03CE\\\\u03D0\\\\u03D1\\\\u03D5-\\\\u03D7\\\\u03D9\\\\u03DB\\\\u03DD\\\\u03DF\\\\u03E1\\\\u03E3\\\\u03E5\\\\u03E7\\\\u03E9\\\\u03EB\\\\u03ED\\\\u03EF-\\\\u03F3\\\\u03F5\\\\u03F8\\\\u03FB\\\\u03FC\\\\u0430-\\\\u045F\\\\u0461\\\\u0463\\\\u0465\\\\u0467\\\\u0469\\\\u046B\\\\u046D\\\\u046F\\\\u0471\\\\u0473\\\\u0475\\\\u0477\\\\u0479\\\\u047B\\\\u047D\\\\u047F\\\\u0481\\\\u048B\\\\u048D\\\\u048F\\\\u0491\\\\u0493\\\\u0495\\\\u0497\\\\u0499\\\\u049B\\\\u049D\\\\u049F\\\\u04A1\\\\u04A3\\\\u04A5\\\\u04A7\\\\u04A9\\\\u04AB\\\\u04AD\\\\u04AF\\\\u04B1\\\\u04B3\\\\u04B5\\\\u04B7\\\\u04B9\\\\u04BB\\\\u04BD\\\\u04BF\\\\u04C2\\\\u04C4\\\\u04C6\\\\u04C8\\\\u04CA\\\\u04CC\\\\u04CE\\\\u04CF\\\\u04D1\\\\u04D3\\\\u04D5\\\\u04D7\\\\u04D9\\\\u04DB\\\\u04DD\\\\u04DF\\\\u04E1\\\\u04E3\\\\u04E5\\\\u04E7\\\\u04E9\\\\u04EB\\\\u04ED\\\\u04EF\\\\u04F1\\\\u04F3\\\\u04F5\\\\u04F7\\\\u04F9\\\\u04FB\\\\u04FD\\\\u04FF\\\\u0501\\\\u0503\\\\u0505\\\\u0507\\\\u0509\\\\u050B\\\\u050D\\\\u050F\\\\u0511\\\\u0513\\\\u0515\\\\u0517\\\\u0519\\\\u051B\\\\u051D\\\\u051F\\\\u0521\\\\u0523\\\\u0525\\\\u0527\\\\u0561-\\\\u0587\\\\u1D00-\\\\u1D2B\\\\u1D62-\\\\u1D77\\\\u1D79-\\\\u1D9A\\\\u1E01\\\\u1E03\\\\u1E05\\\\u1E07\\\\u1E09\\\\u1E0B\\\\u1E0D\\\\u1E0F\\\\u1E11\\\\u1E13\\\\u1E15\\\\u1E17\\\\u1E19\\\\u1E1B\\\\u1E1D\\\\u1E1F\\\\u1E21\\\\u1E23\\\\u1E25\\\\u1E27\\\\u1E29\\\\u1E2B\\\\u1E2D\\\\u1E2F\\\\u1E31\\\\u1E33\\\\u1E35\\\\u1E37\\\\u1E39\\\\u1E3B\\\\u1E3D\\\\u1E3F\\\\u1E41\\\\u1E43\\\\u1E45\\\\u1E47\\\\u1E49\\\\u1E4B\\\\u1E4D\\\\u1E4F\\\\u1E51\\\\u1E53\\\\u1E55\\\\u1E57\\\\u1E59\\\\u1E5B\\\\u1E5D\\\\u1E5F\\\\u1E61\\\\u1E63\\\\u1E65\\\\u1E67\\\\u1E69\\\\u1E6B\\\\u1E6D\\\\u1E6F\\\\u1E71\\\\u1E73\\\\u1E75\\\\u1E77\\\\u1E79\\\\u1E7B\\\\u1E7D\\\\u1E7F\\\\u1E81\\\\u1E83\\\\u1E85\\\\u1E87\\\\u1E89\\\\u1E8B\\\\u1E8D\\\\u1E8F\\\\u1E91\\\\u1E93\\\\u1E95-\\\\u1E9D\\\\u1E9F\\\\u1EA1\\\\u1EA3\\\\u1EA5\\\\u1EA7\\\\u1EA9\\\\u1EAB\\\\u1EAD\\\\u1EAF\\\\u1EB1\\\\u1EB3\\\\u1EB5\\\\u1EB7\\\\u1EB9\\\\u1EBB\\\\u1EBD\\\\u1EBF\\\\u1EC1\\\\u1EC3\\\\u1EC5\\\\u1EC7\\\\u1EC9\\\\u1ECB\\\\u1ECD\\\\u1ECF\\\\u1ED1\\\\u1ED3\\\\u1ED5\\\\u1ED7\\\\u1ED9\\\\u1EDB\\\\u1EDD\\\\u1EDF\\\\u1EE1\\\\u1EE3\\\\u1EE5\\\\u1EE7\\\\u1EE9\\\\u1EEB\\\\u1EED\\\\u1EEF\\\\u1EF1\\\\u1EF3\\\\u1EF5\\\\u1EF7\\\\u1EF9\\\\u1EFB\\\\u1EFD\\\\u1EFF-\\\\u1F07\\\\u1F10-\\\\u1F15\\\\u1F20-\\\\u1F27\\\\u1F30-\\\\u1F37\\\\u1F40-\\\\u1F45\\\\u1F50-\\\\u1F57\\\\u1F60-\\\\u1F67\\\\u1F70-\\\\u1F7D\\\\u1F80-\\\\u1F87\\\\u1F90-\\\\u1F97\\\\u1FA0-\\\\u1FA7\\\\u1FB0-\\\\u1FB4\\\\u1FB6\\\\u1FB7\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6\\\\u1FC7\\\\u1FD0-\\\\u1FD3\\\\u1FD6\\\\u1FD7\\\\u1FE0-\\\\u1FE7\\\\u1FF2-\\\\u1FF4\\\\u1FF6\\\\u1FF7\\\\u210A\\\\u210E\\\\u210F\\\\u2113\\\\u212F\\\\u2134\\\\u2139\\\\u213C\\\\u213D\\\\u2146-\\\\u2149\\\\u214E\\\\u2184\\\\u2C30-\\\\u2C5E\\\\u2C61\\\\u2C65\\\\u2C66\\\\u2C68\\\\u2C6A\\\\u2C6C\\\\u2C71\\\\u2C73\\\\u2C74\\\\u2C76-\\\\u2C7C\\\\u2C81\\\\u2C83\\\\u2C85\\\\u2C87\\\\u2C89\\\\u2C8B\\\\u2C8D\\\\u2C8F\\\\u2C91\\\\u2C93\\\\u2C95\\\\u2C97\\\\u2C99\\\\u2C9B\\\\u2C9D\\\\u2C9F\\\\u2CA1\\\\u2CA3\\\\u2CA5\\\\u2CA7\\\\u2CA9\\\\u2CAB\\\\u2CAD\\\\u2CAF\\\\u2CB1\\\\u2CB3\\\\u2CB5\\\\u2CB7\\\\u2CB9\\\\u2CBB\\\\u2CBD\\\\u2CBF\\\\u2CC1\\\\u2CC3\\\\u2CC5\\\\u2CC7\\\\u2CC9\\\\u2CCB\\\\u2CCD\\\\u2CCF\\\\u2CD1\\\\u2CD3\\\\u2CD5\\\\u2CD7\\\\u2CD9\\\\u2CDB\\\\u2CDD\\\\u2CDF\\\\u2CE1\\\\u2CE3\\\\u2CE4\\\\u2CEC\\\\u2CEE\\\\u2D00-\\\\u2D25\\\\uA641\\\\uA643\\\\uA645\\\\uA647\\\\uA649\\\\uA64B\\\\uA64D\\\\uA64F\\\\uA651\\\\uA653\\\\uA655\\\\uA657\\\\uA659\\\\uA65B\\\\uA65D\\\\uA65F\\\\uA661\\\\uA663\\\\uA665\\\\uA667\\\\uA669\\\\uA66B\\\\uA66D\\\\uA681\\\\uA683\\\\uA685\\\\uA687\\\\uA689\\\\uA68B\\\\uA68D\\\\uA68F\\\\uA691\\\\uA693\\\\uA695\\\\uA697\\\\uA723\\\\uA725\\\\uA727\\\\uA729\\\\uA72B\\\\uA72D\\\\uA72F-\\\\uA731\\\\uA733\\\\uA735\\\\uA737\\\\uA739\\\\uA73B\\\\uA73D\\\\uA73F\\\\uA741\\\\uA743\\\\uA745\\\\uA747\\\\uA749\\\\uA74B\\\\uA74D\\\\uA74F\\\\uA751\\\\uA753\\\\uA755\\\\uA757\\\\uA759\\\\uA75B\\\\uA75D\\\\uA75F\\\\uA761\\\\uA763\\\\uA765\\\\uA767\\\\uA769\\\\uA76B\\\\uA76D\\\\uA76F\\\\uA771-\\\\uA778\\\\uA77A\\\\uA77C\\\\uA77F\\\\uA781\\\\uA783\\\\uA785\\\\uA787\\\\uA78C\\\\uA78E\\\\uA791\\\\uA7A1\\\\uA7A3\\\\uA7A5\\\\uA7A7\\\\uA7A9\\\\uA7FA\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFF41-\\\\uFF5A\\\\u01C5\\\\u01C8\\\\u01CB\\\\u01F2\\\\u1F88-\\\\u1F8F\\\\u1F98-\\\\u1F9F\\\\u1FA8-\\\\u1FAF\\\\u1FBC\\\\u1FCC\\\\u1FFC\\\\u02B0-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0374\\\\u037A\\\\u0559\\\\u0640\\\\u06E5\\\\u06E6\\\\u07F4\\\\u07F5\\\\u07FA\\\\u081A\\\\u0824\\\\u0828\\\\u0971\\\\u0E46\\\\u0EC6\\\\u10FC\\\\u17D7\\\\u1843\\\\u1AA7\\\\u1C78-\\\\u1C7D\\\\u1D2C-\\\\u1D61\\\\u1D78\\\\u1D9B-\\\\u1DBF\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2C7D\\\\u2D6F\\\\u2E2F\\\\u3005\\\\u3031-\\\\u3035\\\\u303B\\\\u309D\\\\u309E\\\\u30FC-\\\\u30FE\\\\uA015\\\\uA4F8-\\\\uA4FD\\\\uA60C\\\\uA67F\\\\uA717-\\\\uA71F\\\\uA770\\\\uA788\\\\uA9CF\\\\uAA70\\\\uAADD\\\\uFF70\\\\uFF9E\\\\uFF9F\\\\u01BB\\\\u01C0-\\\\u01C3\\\\u0294\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u063F\\\\u0641-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u0800-\\\\u0815\\\\u0840-\\\\u0858\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0972-\\\\u0977\\\\u0979-\\\\u097F\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C33\\\\u0C35-\\\\u0C39\\\\u0C3D\\\\u0C58\\\\u0C59\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D60\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E45\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EDC\\\\u0EDD\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10D0-\\\\u10FA\\\\u1100-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17DC\\\\u1820-\\\\u1842\\\\u1844-\\\\u1877\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191C\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19C1-\\\\u19C7\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BC0-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C77\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u2135-\\\\u2138\\\\u2D30-\\\\u2D65\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u3006\\\\u303C\\\\u3041-\\\\u3096\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400\\\\u4DB5\\\\u4E00\\\\u9FCB\\\\uA000-\\\\uA014\\\\uA016-\\\\uA48C\\\\uA4D0-\\\\uA4F7\\\\uA500-\\\\uA60B\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA66E\\\\uA6A0-\\\\uA6E5\\\\uA7FB-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA6F\\\\uAA71-\\\\uAA76\\\\uAA7A\\\\uAA80-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB\\\\uAADC\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uABC0-\\\\uABE2\\\\uAC00\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA2D\\\\uFA30-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF66-\\\\uFF6F\\\\uFF71-\\\\uFF9D\\\\uFFA0-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC\\\\u16EE-\\\\u16F0\\\\u2160-\\\\u2182\\\\u2185-\\\\u2188\\\\u3007\\\\u3021-\\\\u3029\\\\u3038-\\\\u303A\\\\uA6E6-\\\\uA6EF]\" },\n        peg$c472 = \"\\uD82C\",\n        peg$c473 = { type: \"literal\", value: \"\\uD82C\", description: \"\\\"\\\\uD82C\\\"\" },\n        peg$c474 = /^[\\uDC00\\uDC01]/,\n        peg$c475 = { type: \"class\", value: \"[\\\\uDC00\\\\uDC01]\", description: \"[\\\\uDC00\\\\uDC01]\" },\n        peg$c476 = \"\\uD808\",\n        peg$c477 = { type: \"literal\", value: \"\\uD808\", description: \"\\\"\\\\uD808\\\"\" },\n        peg$c478 = /^[\\uDC00-\\uDF6E]/,\n        peg$c479 = { type: \"class\", value: \"[\\\\uDC00-\\\\uDF6E]\", description: \"[\\\\uDC00-\\\\uDF6E]\" },\n        peg$c480 = \"\\uD869\",\n        peg$c481 = { type: \"literal\", value: \"\\uD869\", description: \"\\\"\\\\uD869\\\"\" },\n        peg$c482 = /^[\\uDED6\\uDF00]/,\n        peg$c483 = { type: \"class\", value: \"[\\\\uDED6\\\\uDF00]\", description: \"[\\\\uDED6\\\\uDF00]\" },\n        peg$c484 = \"\\uD809\",\n        peg$c485 = { type: \"literal\", value: \"\\uD809\", description: \"\\\"\\\\uD809\\\"\" },\n        peg$c486 = /^[\\uDC00-\\uDC62]/,\n        peg$c487 = { type: \"class\", value: \"[\\\\uDC00-\\\\uDC62]\", description: \"[\\\\uDC00-\\\\uDC62]\" },\n        peg$c488 = \"\\uD835\",\n        peg$c489 = { type: \"literal\", value: \"\\uD835\", description: \"\\\"\\\\uD835\\\"\" },\n        peg$c490 = /^[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]/,\n        peg$c491 = { type: \"class\", value: \"[\\\\uDC00-\\\\uDC19\\\\uDC34-\\\\uDC4D\\\\uDC68-\\\\uDC81\\\\uDC9C\\\\uDC9E\\\\uDC9F\\\\uDCA2\\\\uDCA5\\\\uDCA6\\\\uDCA9-\\\\uDCAC\\\\uDCAE-\\\\uDCB5\\\\uDCD0-\\\\uDCE9\\\\uDD04\\\\uDD05\\\\uDD07-\\\\uDD0A\\\\uDD0D-\\\\uDD14\\\\uDD16-\\\\uDD1C\\\\uDD38\\\\uDD39\\\\uDD3B-\\\\uDD3E\\\\uDD40-\\\\uDD44\\\\uDD46\\\\uDD4A-\\\\uDD50\\\\uDD6C-\\\\uDD85\\\\uDDA0-\\\\uDDB9\\\\uDDD4-\\\\uDDED\\\\uDE08-\\\\uDE21\\\\uDE3C-\\\\uDE55\\\\uDE70-\\\\uDE89\\\\uDEA8-\\\\uDEC0\\\\uDEE2-\\\\uDEFA\\\\uDF1C-\\\\uDF34\\\\uDF56-\\\\uDF6E\\\\uDF90-\\\\uDFA8\\\\uDFCA\\\\uDC1A-\\\\uDC33\\\\uDC4E-\\\\uDC54\\\\uDC56-\\\\uDC67\\\\uDC82-\\\\uDC9B\\\\uDCB6-\\\\uDCB9\\\\uDCBB\\\\uDCBD-\\\\uDCC3\\\\uDCC5-\\\\uDCCF\\\\uDCEA-\\\\uDD03\\\\uDD1E-\\\\uDD37\\\\uDD52-\\\\uDD6B\\\\uDD86-\\\\uDD9F\\\\uDDBA-\\\\uDDD3\\\\uDDEE-\\\\uDE07\\\\uDE22-\\\\uDE3B\\\\uDE56-\\\\uDE6F\\\\uDE8A-\\\\uDEA5\\\\uDEC2-\\\\uDEDA\\\\uDEDC-\\\\uDEE1\\\\uDEFC-\\\\uDF14\\\\uDF16-\\\\uDF1B\\\\uDF36-\\\\uDF4E\\\\uDF50-\\\\uDF55\\\\uDF70-\\\\uDF88\\\\uDF8A-\\\\uDF8F\\\\uDFAA-\\\\uDFC2\\\\uDFC4-\\\\uDFC9\\\\uDFCB]\", description: \"[\\\\uDC00-\\\\uDC19\\\\uDC34-\\\\uDC4D\\\\uDC68-\\\\uDC81\\\\uDC9C\\\\uDC9E\\\\uDC9F\\\\uDCA2\\\\uDCA5\\\\uDCA6\\\\uDCA9-\\\\uDCAC\\\\uDCAE-\\\\uDCB5\\\\uDCD0-\\\\uDCE9\\\\uDD04\\\\uDD05\\\\uDD07-\\\\uDD0A\\\\uDD0D-\\\\uDD14\\\\uDD16-\\\\uDD1C\\\\uDD38\\\\uDD39\\\\uDD3B-\\\\uDD3E\\\\uDD40-\\\\uDD44\\\\uDD46\\\\uDD4A-\\\\uDD50\\\\uDD6C-\\\\uDD85\\\\uDDA0-\\\\uDDB9\\\\uDDD4-\\\\uDDED\\\\uDE08-\\\\uDE21\\\\uDE3C-\\\\uDE55\\\\uDE70-\\\\uDE89\\\\uDEA8-\\\\uDEC0\\\\uDEE2-\\\\uDEFA\\\\uDF1C-\\\\uDF34\\\\uDF56-\\\\uDF6E\\\\uDF90-\\\\uDFA8\\\\uDFCA\\\\uDC1A-\\\\uDC33\\\\uDC4E-\\\\uDC54\\\\uDC56-\\\\uDC67\\\\uDC82-\\\\uDC9B\\\\uDCB6-\\\\uDCB9\\\\uDCBB\\\\uDCBD-\\\\uDCC3\\\\uDCC5-\\\\uDCCF\\\\uDCEA-\\\\uDD03\\\\uDD1E-\\\\uDD37\\\\uDD52-\\\\uDD6B\\\\uDD86-\\\\uDD9F\\\\uDDBA-\\\\uDDD3\\\\uDDEE-\\\\uDE07\\\\uDE22-\\\\uDE3B\\\\uDE56-\\\\uDE6F\\\\uDE8A-\\\\uDEA5\\\\uDEC2-\\\\uDEDA\\\\uDEDC-\\\\uDEE1\\\\uDEFC-\\\\uDF14\\\\uDF16-\\\\uDF1B\\\\uDF36-\\\\uDF4E\\\\uDF50-\\\\uDF55\\\\uDF70-\\\\uDF88\\\\uDF8A-\\\\uDF8F\\\\uDFAA-\\\\uDFC2\\\\uDFC4-\\\\uDFC9\\\\uDFCB]\" },\n        peg$c492 = \"\\uD804\",\n        peg$c493 = { type: \"literal\", value: \"\\uD804\", description: \"\\\"\\\\uD804\\\"\" },\n        peg$c494 = /^[\\uDC03-\\uDC37\\uDC83-\\uDCAF]/,\n        peg$c495 = { type: \"class\", value: \"[\\\\uDC03-\\\\uDC37\\\\uDC83-\\\\uDCAF]\", description: \"[\\\\uDC03-\\\\uDC37\\\\uDC83-\\\\uDCAF]\" },\n        peg$c496 = \"\\uD800\",\n        peg$c497 = { type: \"literal\", value: \"\\uD800\", description: \"\\\"\\\\uD800\\\"\" },\n        peg$c498 = /^[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1E\\uDF30-\\uDF40\\uDF42-\\uDF49\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDD40-\\uDD74\\uDF41\\uDF4A\\uDFD1-\\uDFD5]/,\n        peg$c499 = { type: \"class\", value: \"[\\\\uDC00-\\\\uDC0B\\\\uDC0D-\\\\uDC26\\\\uDC28-\\\\uDC3A\\\\uDC3C\\\\uDC3D\\\\uDC3F-\\\\uDC4D\\\\uDC50-\\\\uDC5D\\\\uDC80-\\\\uDCFA\\\\uDE80-\\\\uDE9C\\\\uDEA0-\\\\uDED0\\\\uDF00-\\\\uDF1E\\\\uDF30-\\\\uDF40\\\\uDF42-\\\\uDF49\\\\uDF80-\\\\uDF9D\\\\uDFA0-\\\\uDFC3\\\\uDFC8-\\\\uDFCF\\\\uDD40-\\\\uDD74\\\\uDF41\\\\uDF4A\\\\uDFD1-\\\\uDFD5]\", description: \"[\\\\uDC00-\\\\uDC0B\\\\uDC0D-\\\\uDC26\\\\uDC28-\\\\uDC3A\\\\uDC3C\\\\uDC3D\\\\uDC3F-\\\\uDC4D\\\\uDC50-\\\\uDC5D\\\\uDC80-\\\\uDCFA\\\\uDE80-\\\\uDE9C\\\\uDEA0-\\\\uDED0\\\\uDF00-\\\\uDF1E\\\\uDF30-\\\\uDF40\\\\uDF42-\\\\uDF49\\\\uDF80-\\\\uDF9D\\\\uDFA0-\\\\uDFC3\\\\uDFC8-\\\\uDFCF\\\\uDD40-\\\\uDD74\\\\uDF41\\\\uDF4A\\\\uDFD1-\\\\uDFD5]\" },\n        peg$c500 = \"\\uD80C\",\n        peg$c501 = { type: \"literal\", value: \"\\uD80C\", description: \"\\\"\\\\uD80C\\\"\" },\n        peg$c502 = /^[\\uDC00-\\uDFFF]/,\n        peg$c503 = { type: \"class\", value: \"[\\\\uDC00-\\\\uDFFF]\", description: \"[\\\\uDC00-\\\\uDFFF]\" },\n        peg$c504 = \"\\uD801\",\n        peg$c505 = { type: \"literal\", value: \"\\uD801\", description: \"\\\"\\\\uD801\\\"\" },\n        peg$c506 = /^[\\uDC00-\\uDC9D]/,\n        peg$c507 = { type: \"class\", value: \"[\\\\uDC00-\\\\uDC9D]\", description: \"[\\\\uDC00-\\\\uDC9D]\" },\n        peg$c508 = \"\\uD86E\",\n        peg$c509 = { type: \"literal\", value: \"\\uD86E\", description: \"\\\"\\\\uD86E\\\"\" },\n        peg$c510 = /^[\\uDC1D]/,\n        peg$c511 = { type: \"class\", value: \"[\\\\uDC1D]\", description: \"[\\\\uDC1D]\" },\n        peg$c512 = \"\\uD803\",\n        peg$c513 = { type: \"literal\", value: \"\\uD803\", description: \"\\\"\\\\uD803\\\"\" },\n        peg$c514 = /^[\\uDC00-\\uDC48]/,\n        peg$c515 = { type: \"class\", value: \"[\\\\uDC00-\\\\uDC48]\", description: \"[\\\\uDC00-\\\\uDC48]\" },\n        peg$c516 = \"\\uD840\",\n        peg$c517 = { type: \"literal\", value: \"\\uD840\", description: \"\\\"\\\\uD840\\\"\" },\n        peg$c518 = /^[\\uDC00]/,\n        peg$c519 = { type: \"class\", value: \"[\\\\uDC00]\", description: \"[\\\\uDC00]\" },\n        peg$c520 = \"\\uD87E\",\n        peg$c521 = { type: \"literal\", value: \"\\uD87E\", description: \"\\\"\\\\uD87E\\\"\" },\n        peg$c522 = /^[\\uDC00-\\uDE1D]/,\n        peg$c523 = { type: \"class\", value: \"[\\\\uDC00-\\\\uDE1D]\", description: \"[\\\\uDC00-\\\\uDE1D]\" },\n        peg$c524 = \"\\uD86D\",\n        peg$c525 = { type: \"literal\", value: \"\\uD86D\", description: \"\\\"\\\\uD86D\\\"\" },\n        peg$c526 = /^[\\uDF34\\uDF40]/,\n        peg$c527 = { type: \"class\", value: \"[\\\\uDF34\\\\uDF40]\", description: \"[\\\\uDF34\\\\uDF40]\" },\n        peg$c528 = \"\\uD81A\",\n        peg$c529 = { type: \"literal\", value: \"\\uD81A\", description: \"\\\"\\\\uD81A\\\"\" },\n        peg$c530 = /^[\\uDC00-\\uDE38]/,\n        peg$c531 = { type: \"class\", value: \"[\\\\uDC00-\\\\uDE38]\", description: \"[\\\\uDC00-\\\\uDE38]\" },\n        peg$c532 = \"\\uD802\",\n        peg$c533 = { type: \"literal\", value: \"\\uD802\", description: \"\\\"\\\\uD802\\\"\" },\n        peg$c534 = /^[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72]/,\n        peg$c535 = { type: \"class\", value: \"[\\\\uDC00-\\\\uDC05\\\\uDC08\\\\uDC0A-\\\\uDC35\\\\uDC37\\\\uDC38\\\\uDC3C\\\\uDC3F-\\\\uDC55\\\\uDD00-\\\\uDD15\\\\uDD20-\\\\uDD39\\\\uDE00\\\\uDE10-\\\\uDE13\\\\uDE15-\\\\uDE17\\\\uDE19-\\\\uDE33\\\\uDE60-\\\\uDE7C\\\\uDF00-\\\\uDF35\\\\uDF40-\\\\uDF55\\\\uDF60-\\\\uDF72]\", description: \"[\\\\uDC00-\\\\uDC05\\\\uDC08\\\\uDC0A-\\\\uDC35\\\\uDC37\\\\uDC38\\\\uDC3C\\\\uDC3F-\\\\uDC55\\\\uDD00-\\\\uDD15\\\\uDD20-\\\\uDD39\\\\uDE00\\\\uDE10-\\\\uDE13\\\\uDE15-\\\\uDE17\\\\uDE19-\\\\uDE33\\\\uDE60-\\\\uDE7C\\\\uDF00-\\\\uDF35\\\\uDF40-\\\\uDF55\\\\uDF60-\\\\uDF72]\" },\n        peg$c536 = \"\\uD80D\",\n        peg$c537 = { type: \"literal\", value: \"\\uD80D\", description: \"\\\"\\\\uD80D\\\"\" },\n        peg$c538 = /^[\\uDC00-\\uDC2E]/,\n        peg$c539 = { type: \"class\", value: \"[\\\\uDC00-\\\\uDC2E]\", description: \"[\\\\uDC00-\\\\uDC2E]\" },\n        peg$c540 = /^[\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F\\uA67C\\uA67D\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u19B0-\\u19C0\\u19C8\\u19C9\\u1A19-\\u1A1B\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC]/,\n        peg$c541 = { type: \"class\", value: \"[\\\\u0300-\\\\u036F\\\\u0483-\\\\u0487\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u0610-\\\\u061A\\\\u064B-\\\\u065F\\\\u0670\\\\u06D6-\\\\u06DC\\\\u06DF-\\\\u06E4\\\\u06E7\\\\u06E8\\\\u06EA-\\\\u06ED\\\\u0711\\\\u0730-\\\\u074A\\\\u07A6-\\\\u07B0\\\\u07EB-\\\\u07F3\\\\u0816-\\\\u0819\\\\u081B-\\\\u0823\\\\u0825-\\\\u0827\\\\u0829-\\\\u082D\\\\u0859-\\\\u085B\\\\u0900-\\\\u0902\\\\u093A\\\\u093C\\\\u0941-\\\\u0948\\\\u094D\\\\u0951-\\\\u0957\\\\u0962\\\\u0963\\\\u0981\\\\u09BC\\\\u09C1-\\\\u09C4\\\\u09CD\\\\u09E2\\\\u09E3\\\\u0A01\\\\u0A02\\\\u0A3C\\\\u0A41\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A70\\\\u0A71\\\\u0A75\\\\u0A81\\\\u0A82\\\\u0ABC\\\\u0AC1-\\\\u0AC5\\\\u0AC7\\\\u0AC8\\\\u0ACD\\\\u0AE2\\\\u0AE3\\\\u0B01\\\\u0B3C\\\\u0B3F\\\\u0B41-\\\\u0B44\\\\u0B4D\\\\u0B56\\\\u0B62\\\\u0B63\\\\u0B82\\\\u0BC0\\\\u0BCD\\\\u0C3E-\\\\u0C40\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C62\\\\u0C63\\\\u0CBC\\\\u0CBF\\\\u0CC6\\\\u0CCC\\\\u0CCD\\\\u0CE2\\\\u0CE3\\\\u0D41-\\\\u0D44\\\\u0D4D\\\\u0D62\\\\u0D63\\\\u0DCA\\\\u0DD2-\\\\u0DD4\\\\u0DD6\\\\u0E31\\\\u0E34-\\\\u0E3A\\\\u0E47-\\\\u0E4E\\\\u0EB1\\\\u0EB4-\\\\u0EB9\\\\u0EBB\\\\u0EBC\\\\u0EC8-\\\\u0ECD\\\\u0F18\\\\u0F19\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F71-\\\\u0F7E\\\\u0F80-\\\\u0F84\\\\u0F86\\\\u0F87\\\\u0F8D-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u102D-\\\\u1030\\\\u1032-\\\\u1037\\\\u1039\\\\u103A\\\\u103D\\\\u103E\\\\u1058\\\\u1059\\\\u105E-\\\\u1060\\\\u1071-\\\\u1074\\\\u1082\\\\u1085\\\\u1086\\\\u108D\\\\u109D\\\\u135D-\\\\u135F\\\\u1712-\\\\u1714\\\\u1732-\\\\u1734\\\\u1752\\\\u1753\\\\u1772\\\\u1773\\\\u17B7-\\\\u17BD\\\\u17C6\\\\u17C9-\\\\u17D3\\\\u17DD\\\\u180B-\\\\u180D\\\\u18A9\\\\u1920-\\\\u1922\\\\u1927\\\\u1928\\\\u1932\\\\u1939-\\\\u193B\\\\u1A17\\\\u1A18\\\\u1A56\\\\u1A58-\\\\u1A5E\\\\u1A60\\\\u1A62\\\\u1A65-\\\\u1A6C\\\\u1A73-\\\\u1A7C\\\\u1A7F\\\\u1B00-\\\\u1B03\\\\u1B34\\\\u1B36-\\\\u1B3A\\\\u1B3C\\\\u1B42\\\\u1B6B-\\\\u1B73\\\\u1B80\\\\u1B81\\\\u1BA2-\\\\u1BA5\\\\u1BA8\\\\u1BA9\\\\u1BE6\\\\u1BE8\\\\u1BE9\\\\u1BED\\\\u1BEF-\\\\u1BF1\\\\u1C2C-\\\\u1C33\\\\u1C36\\\\u1C37\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CE0\\\\u1CE2-\\\\u1CE8\\\\u1CED\\\\u1DC0-\\\\u1DE6\\\\u1DFC-\\\\u1DFF\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2CEF-\\\\u2CF1\\\\u2D7F\\\\u2DE0-\\\\u2DFF\\\\u302A-\\\\u302F\\\\u3099\\\\u309A\\\\uA66F\\\\uA67C\\\\uA67D\\\\uA6F0\\\\uA6F1\\\\uA802\\\\uA806\\\\uA80B\\\\uA825\\\\uA826\\\\uA8C4\\\\uA8E0-\\\\uA8F1\\\\uA926-\\\\uA92D\\\\uA947-\\\\uA951\\\\uA980-\\\\uA982\\\\uA9B3\\\\uA9B6-\\\\uA9B9\\\\uA9BC\\\\uAA29-\\\\uAA2E\\\\uAA31\\\\uAA32\\\\uAA35\\\\uAA36\\\\uAA43\\\\uAA4C\\\\uAAB0\\\\uAAB2-\\\\uAAB4\\\\uAAB7\\\\uAAB8\\\\uAABE\\\\uAABF\\\\uAAC1\\\\uABE5\\\\uABE8\\\\uABED\\\\uFB1E\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE26\\\\u0903\\\\u093B\\\\u093E-\\\\u0940\\\\u0949-\\\\u094C\\\\u094E\\\\u094F\\\\u0982\\\\u0983\\\\u09BE-\\\\u09C0\\\\u09C7\\\\u09C8\\\\u09CB\\\\u09CC\\\\u09D7\\\\u0A03\\\\u0A3E-\\\\u0A40\\\\u0A83\\\\u0ABE-\\\\u0AC0\\\\u0AC9\\\\u0ACB\\\\u0ACC\\\\u0B02\\\\u0B03\\\\u0B3E\\\\u0B40\\\\u0B47\\\\u0B48\\\\u0B4B\\\\u0B4C\\\\u0B57\\\\u0BBE\\\\u0BBF\\\\u0BC1\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCC\\\\u0BD7\\\\u0C01-\\\\u0C03\\\\u0C41-\\\\u0C44\\\\u0C82\\\\u0C83\\\\u0CBE\\\\u0CC0-\\\\u0CC4\\\\u0CC7\\\\u0CC8\\\\u0CCA\\\\u0CCB\\\\u0CD5\\\\u0CD6\\\\u0D02\\\\u0D03\\\\u0D3E-\\\\u0D40\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4C\\\\u0D57\\\\u0D82\\\\u0D83\\\\u0DCF-\\\\u0DD1\\\\u0DD8-\\\\u0DDF\\\\u0DF2\\\\u0DF3\\\\u0F3E\\\\u0F3F\\\\u0F7F\\\\u102B\\\\u102C\\\\u1031\\\\u1038\\\\u103B\\\\u103C\\\\u1056\\\\u1057\\\\u1062-\\\\u1064\\\\u1067-\\\\u106D\\\\u1083\\\\u1084\\\\u1087-\\\\u108C\\\\u108F\\\\u109A-\\\\u109C\\\\u17B6\\\\u17BE-\\\\u17C5\\\\u17C7\\\\u17C8\\\\u1923-\\\\u1926\\\\u1929-\\\\u192B\\\\u1930\\\\u1931\\\\u1933-\\\\u1938\\\\u19B0-\\\\u19C0\\\\u19C8\\\\u19C9\\\\u1A19-\\\\u1A1B\\\\u1A55\\\\u1A57\\\\u1A61\\\\u1A63\\\\u1A64\\\\u1A6D-\\\\u1A72\\\\u1B04\\\\u1B35\\\\u1B3B\\\\u1B3D-\\\\u1B41\\\\u1B43\\\\u1B44\\\\u1B82\\\\u1BA1\\\\u1BA6\\\\u1BA7\\\\u1BAA\\\\u1BE7\\\\u1BEA-\\\\u1BEC\\\\u1BEE\\\\u1BF2\\\\u1BF3\\\\u1C24-\\\\u1C2B\\\\u1C34\\\\u1C35\\\\u1CE1\\\\u1CF2\\\\uA823\\\\uA824\\\\uA827\\\\uA880\\\\uA881\\\\uA8B4-\\\\uA8C3\\\\uA952\\\\uA953\\\\uA983\\\\uA9B4\\\\uA9B5\\\\uA9BA\\\\uA9BB\\\\uA9BD-\\\\uA9C0\\\\uAA2F\\\\uAA30\\\\uAA33\\\\uAA34\\\\uAA4D\\\\uAA7B\\\\uABE3\\\\uABE4\\\\uABE6\\\\uABE7\\\\uABE9\\\\uABEA\\\\uABEC]\", description: \"[\\\\u0300-\\\\u036F\\\\u0483-\\\\u0487\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u0610-\\\\u061A\\\\u064B-\\\\u065F\\\\u0670\\\\u06D6-\\\\u06DC\\\\u06DF-\\\\u06E4\\\\u06E7\\\\u06E8\\\\u06EA-\\\\u06ED\\\\u0711\\\\u0730-\\\\u074A\\\\u07A6-\\\\u07B0\\\\u07EB-\\\\u07F3\\\\u0816-\\\\u0819\\\\u081B-\\\\u0823\\\\u0825-\\\\u0827\\\\u0829-\\\\u082D\\\\u0859-\\\\u085B\\\\u0900-\\\\u0902\\\\u093A\\\\u093C\\\\u0941-\\\\u0948\\\\u094D\\\\u0951-\\\\u0957\\\\u0962\\\\u0963\\\\u0981\\\\u09BC\\\\u09C1-\\\\u09C4\\\\u09CD\\\\u09E2\\\\u09E3\\\\u0A01\\\\u0A02\\\\u0A3C\\\\u0A41\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A70\\\\u0A71\\\\u0A75\\\\u0A81\\\\u0A82\\\\u0ABC\\\\u0AC1-\\\\u0AC5\\\\u0AC7\\\\u0AC8\\\\u0ACD\\\\u0AE2\\\\u0AE3\\\\u0B01\\\\u0B3C\\\\u0B3F\\\\u0B41-\\\\u0B44\\\\u0B4D\\\\u0B56\\\\u0B62\\\\u0B63\\\\u0B82\\\\u0BC0\\\\u0BCD\\\\u0C3E-\\\\u0C40\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C62\\\\u0C63\\\\u0CBC\\\\u0CBF\\\\u0CC6\\\\u0CCC\\\\u0CCD\\\\u0CE2\\\\u0CE3\\\\u0D41-\\\\u0D44\\\\u0D4D\\\\u0D62\\\\u0D63\\\\u0DCA\\\\u0DD2-\\\\u0DD4\\\\u0DD6\\\\u0E31\\\\u0E34-\\\\u0E3A\\\\u0E47-\\\\u0E4E\\\\u0EB1\\\\u0EB4-\\\\u0EB9\\\\u0EBB\\\\u0EBC\\\\u0EC8-\\\\u0ECD\\\\u0F18\\\\u0F19\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F71-\\\\u0F7E\\\\u0F80-\\\\u0F84\\\\u0F86\\\\u0F87\\\\u0F8D-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u102D-\\\\u1030\\\\u1032-\\\\u1037\\\\u1039\\\\u103A\\\\u103D\\\\u103E\\\\u1058\\\\u1059\\\\u105E-\\\\u1060\\\\u1071-\\\\u1074\\\\u1082\\\\u1085\\\\u1086\\\\u108D\\\\u109D\\\\u135D-\\\\u135F\\\\u1712-\\\\u1714\\\\u1732-\\\\u1734\\\\u1752\\\\u1753\\\\u1772\\\\u1773\\\\u17B7-\\\\u17BD\\\\u17C6\\\\u17C9-\\\\u17D3\\\\u17DD\\\\u180B-\\\\u180D\\\\u18A9\\\\u1920-\\\\u1922\\\\u1927\\\\u1928\\\\u1932\\\\u1939-\\\\u193B\\\\u1A17\\\\u1A18\\\\u1A56\\\\u1A58-\\\\u1A5E\\\\u1A60\\\\u1A62\\\\u1A65-\\\\u1A6C\\\\u1A73-\\\\u1A7C\\\\u1A7F\\\\u1B00-\\\\u1B03\\\\u1B34\\\\u1B36-\\\\u1B3A\\\\u1B3C\\\\u1B42\\\\u1B6B-\\\\u1B73\\\\u1B80\\\\u1B81\\\\u1BA2-\\\\u1BA5\\\\u1BA8\\\\u1BA9\\\\u1BE6\\\\u1BE8\\\\u1BE9\\\\u1BED\\\\u1BEF-\\\\u1BF1\\\\u1C2C-\\\\u1C33\\\\u1C36\\\\u1C37\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CE0\\\\u1CE2-\\\\u1CE8\\\\u1CED\\\\u1DC0-\\\\u1DE6\\\\u1DFC-\\\\u1DFF\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2CEF-\\\\u2CF1\\\\u2D7F\\\\u2DE0-\\\\u2DFF\\\\u302A-\\\\u302F\\\\u3099\\\\u309A\\\\uA66F\\\\uA67C\\\\uA67D\\\\uA6F0\\\\uA6F1\\\\uA802\\\\uA806\\\\uA80B\\\\uA825\\\\uA826\\\\uA8C4\\\\uA8E0-\\\\uA8F1\\\\uA926-\\\\uA92D\\\\uA947-\\\\uA951\\\\uA980-\\\\uA982\\\\uA9B3\\\\uA9B6-\\\\uA9B9\\\\uA9BC\\\\uAA29-\\\\uAA2E\\\\uAA31\\\\uAA32\\\\uAA35\\\\uAA36\\\\uAA43\\\\uAA4C\\\\uAAB0\\\\uAAB2-\\\\uAAB4\\\\uAAB7\\\\uAAB8\\\\uAABE\\\\uAABF\\\\uAAC1\\\\uABE5\\\\uABE8\\\\uABED\\\\uFB1E\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE26\\\\u0903\\\\u093B\\\\u093E-\\\\u0940\\\\u0949-\\\\u094C\\\\u094E\\\\u094F\\\\u0982\\\\u0983\\\\u09BE-\\\\u09C0\\\\u09C7\\\\u09C8\\\\u09CB\\\\u09CC\\\\u09D7\\\\u0A03\\\\u0A3E-\\\\u0A40\\\\u0A83\\\\u0ABE-\\\\u0AC0\\\\u0AC9\\\\u0ACB\\\\u0ACC\\\\u0B02\\\\u0B03\\\\u0B3E\\\\u0B40\\\\u0B47\\\\u0B48\\\\u0B4B\\\\u0B4C\\\\u0B57\\\\u0BBE\\\\u0BBF\\\\u0BC1\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCC\\\\u0BD7\\\\u0C01-\\\\u0C03\\\\u0C41-\\\\u0C44\\\\u0C82\\\\u0C83\\\\u0CBE\\\\u0CC0-\\\\u0CC4\\\\u0CC7\\\\u0CC8\\\\u0CCA\\\\u0CCB\\\\u0CD5\\\\u0CD6\\\\u0D02\\\\u0D03\\\\u0D3E-\\\\u0D40\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4C\\\\u0D57\\\\u0D82\\\\u0D83\\\\u0DCF-\\\\u0DD1\\\\u0DD8-\\\\u0DDF\\\\u0DF2\\\\u0DF3\\\\u0F3E\\\\u0F3F\\\\u0F7F\\\\u102B\\\\u102C\\\\u1031\\\\u1038\\\\u103B\\\\u103C\\\\u1056\\\\u1057\\\\u1062-\\\\u1064\\\\u1067-\\\\u106D\\\\u1083\\\\u1084\\\\u1087-\\\\u108C\\\\u108F\\\\u109A-\\\\u109C\\\\u17B6\\\\u17BE-\\\\u17C5\\\\u17C7\\\\u17C8\\\\u1923-\\\\u1926\\\\u1929-\\\\u192B\\\\u1930\\\\u1931\\\\u1933-\\\\u1938\\\\u19B0-\\\\u19C0\\\\u19C8\\\\u19C9\\\\u1A19-\\\\u1A1B\\\\u1A55\\\\u1A57\\\\u1A61\\\\u1A63\\\\u1A64\\\\u1A6D-\\\\u1A72\\\\u1B04\\\\u1B35\\\\u1B3B\\\\u1B3D-\\\\u1B41\\\\u1B43\\\\u1B44\\\\u1B82\\\\u1BA1\\\\u1BA6\\\\u1BA7\\\\u1BAA\\\\u1BE7\\\\u1BEA-\\\\u1BEC\\\\u1BEE\\\\u1BF2\\\\u1BF3\\\\u1C24-\\\\u1C2B\\\\u1C34\\\\u1C35\\\\u1CE1\\\\u1CF2\\\\uA823\\\\uA824\\\\uA827\\\\uA880\\\\uA881\\\\uA8B4-\\\\uA8C3\\\\uA952\\\\uA953\\\\uA983\\\\uA9B4\\\\uA9B5\\\\uA9BA\\\\uA9BB\\\\uA9BD-\\\\uA9C0\\\\uAA2F\\\\uAA30\\\\uAA33\\\\uAA34\\\\uAA4D\\\\uAA7B\\\\uABE3\\\\uABE4\\\\uABE6\\\\uABE7\\\\uABE9\\\\uABEA\\\\uABEC]\" },\n        peg$c542 = \"\\uDB40\",\n        peg$c543 = { type: \"literal\", value: \"\\uDB40\", description: \"\\\"\\\\uDB40\\\"\" },\n        peg$c544 = /^[\\uDD00-\\uDDEF]/,\n        peg$c545 = { type: \"class\", value: \"[\\\\uDD00-\\\\uDDEF]\", description: \"[\\\\uDD00-\\\\uDDEF]\" },\n        peg$c546 = \"\\uD834\",\n        peg$c547 = { type: \"literal\", value: \"\\uD834\", description: \"\\\"\\\\uD834\\\"\" },\n        peg$c548 = /^[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44\\uDD65\\uDD66\\uDD6D-\\uDD72]/,\n        peg$c549 = { type: \"class\", value: \"[\\\\uDD67-\\\\uDD69\\\\uDD7B-\\\\uDD82\\\\uDD85-\\\\uDD8B\\\\uDDAA-\\\\uDDAD\\\\uDE42-\\\\uDE44\\\\uDD65\\\\uDD66\\\\uDD6D-\\\\uDD72]\", description: \"[\\\\uDD67-\\\\uDD69\\\\uDD7B-\\\\uDD82\\\\uDD85-\\\\uDD8B\\\\uDDAA-\\\\uDDAD\\\\uDE42-\\\\uDE44\\\\uDD65\\\\uDD66\\\\uDD6D-\\\\uDD72]\" },\n        peg$c550 = /^[\\uDC01\\uDC38-\\uDC46\\uDC80\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8]/,\n        peg$c551 = { type: \"class\", value: \"[\\\\uDC01\\\\uDC38-\\\\uDC46\\\\uDC80\\\\uDC81\\\\uDCB3-\\\\uDCB6\\\\uDCB9\\\\uDCBA\\\\uDC00\\\\uDC02\\\\uDC82\\\\uDCB0-\\\\uDCB2\\\\uDCB7\\\\uDCB8]\", description: \"[\\\\uDC01\\\\uDC38-\\\\uDC46\\\\uDC80\\\\uDC81\\\\uDCB3-\\\\uDCB6\\\\uDCB9\\\\uDCBA\\\\uDC00\\\\uDC02\\\\uDC82\\\\uDCB0-\\\\uDCB2\\\\uDCB7\\\\uDCB8]\" },\n        peg$c552 = /^[\\uDDFD]/,\n        peg$c553 = { type: \"class\", value: \"[\\\\uDDFD]\", description: \"[\\\\uDDFD]\" },\n        peg$c554 = /^[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F]/,\n        peg$c555 = { type: \"class\", value: \"[\\\\uDE01-\\\\uDE03\\\\uDE05\\\\uDE06\\\\uDE0C-\\\\uDE0F\\\\uDE38-\\\\uDE3A\\\\uDE3F]\", description: \"[\\\\uDE01-\\\\uDE03\\\\uDE05\\\\uDE06\\\\uDE0C-\\\\uDE0F\\\\uDE38-\\\\uDE3A\\\\uDE3F]\" },\n        peg$c556 = /^[0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]/,\n        peg$c557 = { type: \"class\", value: \"[0-9\\\\u0660-\\\\u0669\\\\u06F0-\\\\u06F9\\\\u07C0-\\\\u07C9\\\\u0966-\\\\u096F\\\\u09E6-\\\\u09EF\\\\u0A66-\\\\u0A6F\\\\u0AE6-\\\\u0AEF\\\\u0B66-\\\\u0B6F\\\\u0BE6-\\\\u0BEF\\\\u0C66-\\\\u0C6F\\\\u0CE6-\\\\u0CEF\\\\u0D66-\\\\u0D6F\\\\u0E50-\\\\u0E59\\\\u0ED0-\\\\u0ED9\\\\u0F20-\\\\u0F29\\\\u1040-\\\\u1049\\\\u1090-\\\\u1099\\\\u17E0-\\\\u17E9\\\\u1810-\\\\u1819\\\\u1946-\\\\u194F\\\\u19D0-\\\\u19D9\\\\u1A80-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1B50-\\\\u1B59\\\\u1BB0-\\\\u1BB9\\\\u1C40-\\\\u1C49\\\\u1C50-\\\\u1C59\\\\uA620-\\\\uA629\\\\uA8D0-\\\\uA8D9\\\\uA900-\\\\uA909\\\\uA9D0-\\\\uA9D9\\\\uAA50-\\\\uAA59\\\\uABF0-\\\\uABF9\\\\uFF10-\\\\uFF19]\", description: \"[0-9\\\\u0660-\\\\u0669\\\\u06F0-\\\\u06F9\\\\u07C0-\\\\u07C9\\\\u0966-\\\\u096F\\\\u09E6-\\\\u09EF\\\\u0A66-\\\\u0A6F\\\\u0AE6-\\\\u0AEF\\\\u0B66-\\\\u0B6F\\\\u0BE6-\\\\u0BEF\\\\u0C66-\\\\u0C6F\\\\u0CE6-\\\\u0CEF\\\\u0D66-\\\\u0D6F\\\\u0E50-\\\\u0E59\\\\u0ED0-\\\\u0ED9\\\\u0F20-\\\\u0F29\\\\u1040-\\\\u1049\\\\u1090-\\\\u1099\\\\u17E0-\\\\u17E9\\\\u1810-\\\\u1819\\\\u1946-\\\\u194F\\\\u19D0-\\\\u19D9\\\\u1A80-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1B50-\\\\u1B59\\\\u1BB0-\\\\u1BB9\\\\u1C40-\\\\u1C49\\\\u1C50-\\\\u1C59\\\\uA620-\\\\uA629\\\\uA8D0-\\\\uA8D9\\\\uA900-\\\\uA909\\\\uA9D0-\\\\uA9D9\\\\uAA50-\\\\uAA59\\\\uABF0-\\\\uABF9\\\\uFF10-\\\\uFF19]\" },\n        peg$c558 = /^[\\uDFCE-\\uDFFF]/,\n        peg$c559 = { type: \"class\", value: \"[\\\\uDFCE-\\\\uDFFF]\", description: \"[\\\\uDFCE-\\\\uDFFF]\" },\n        peg$c560 = /^[\\uDC66-\\uDC6F]/,\n        peg$c561 = { type: \"class\", value: \"[\\\\uDC66-\\\\uDC6F]\", description: \"[\\\\uDC66-\\\\uDC6F]\" },\n        peg$c562 = /^[\\uDCA0-\\uDCA9]/,\n        peg$c563 = { type: \"class\", value: \"[\\\\uDCA0-\\\\uDCA9]\", description: \"[\\\\uDCA0-\\\\uDCA9]\" },\n        peg$c564 = /^[_\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F]/,\n        peg$c565 = { type: \"class\", value: \"[_\\\\u203F\\\\u2040\\\\u2054\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFF3F]\", description: \"[_\\\\u203F\\\\u2040\\\\u2054\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFF3F]\" },\n        peg$c566 = \"\\u200C\",\n        peg$c567 = { type: \"literal\", value: \"\\u200C\", description: \"\\\"\\\\u200C\\\"\" },\n        peg$c568 = \"\\u200D\",\n        peg$c569 = { type: \"literal\", value: \"\\u200D\", description: \"\\\"\\\\u200D\\\"\" },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$cache = {},\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parseprogram() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 0,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseTERMINATOR();\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetoplevelBlock();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c2(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsetoplevelBlock() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      var key    = peg$currPos * 204 + 1,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsetoplevelStatement();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseTERMINATOR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetoplevelStatement();\n              if (s7 !== peg$FAILED) {\n                peg$reportedPos = s3;\n                s4 = peg$c4(s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseTERMINATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsetoplevelStatement();\n                if (s7 !== peg$FAILED) {\n                  peg$reportedPos = s3;\n                  s4 = peg$c4(s7);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseTERMINATOR();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c5(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsetoplevelStatement() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 204 + 2,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      s2 = peg$parsereturn();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsecontinue();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsebreak();\n        }\n      }\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = peg$c6;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsestatement();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c4(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseblock() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      var key    = peg$currPos * 204 + 3,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsestatement();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseTERMINATOR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsestatement();\n              if (s7 !== peg$FAILED) {\n                peg$reportedPos = s3;\n                s4 = peg$c4(s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseTERMINATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsestatement();\n                if (s7 !== peg$FAILED) {\n                  peg$reportedPos = s3;\n                  s4 = peg$c4(s7);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseTERMINATOR();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c5(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsestatement() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 4,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parseexpression();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsereturn();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecontinue();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsebreak();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsethrow();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsedebugger();\n              }\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseexpression() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 5,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parseexpressionworthy();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseseqExpression();\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsesecondaryStatement() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 6,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsesecondaryExpression();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsereturn();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecontinue();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsebreak();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsethrow();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsedebugger();\n              }\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsesecondaryExpression() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 7,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parseexpressionworthy();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseassignmentExpression();\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsesecondaryExpressionNoImplicitObjectCall() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 8,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parseexpressionworthy();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseassignmentExpressionNoImplicitObjectCall();\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseexpressionworthy() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 9,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsefunctionLiteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseconditional();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsewhile();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseloop();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsetry();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseforOf();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseforIn();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseswitch();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseimplicitObjectLiteral();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parseclass();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseseqExpression() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      var key    = peg$currPos * 204 + 10,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsepostfixControlFlowExpression();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 59) {\n            s4 = peg$c7;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseTERMINATOR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$c1;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpression();\n                if (s7 !== peg$FAILED) {\n                  peg$reportedPos = s2;\n                  s3 = peg$c9(s7);\n                  s2 = s3;\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$c0;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$c0;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$c0;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c0;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c0;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c10(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsepostfixControlFlowExpression() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 11,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsesecondaryStatement();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsepostfixControlFlowOp();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsepostfixControlFlowOp();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c11(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsepostfixControlFlowOp() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n      var key    = peg$currPos * 204 + 12,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseIF();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseUNLESS();\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseassignmentExpression();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c12(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseWHILE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseUNTIL();\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseassignmentExpression();\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c12(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseFOR();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$currPos;\n              s4 = peg$parseAssignable();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parse_();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 44) {\n                    s7 = peg$c13;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c14); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse_();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseAssignable();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse_();\n                        if (s10 !== peg$FAILED) {\n                          peg$reportedPos = s6;\n                          s7 = peg$c15(s9);\n                          s6 = s7;\n                        } else {\n                          peg$currPos = s6;\n                          s6 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s6;\n                        s6 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$c0;\n                  }\n                  if (s6 === peg$FAILED) {\n                    s6 = peg$c1;\n                  }\n                  if (s6 !== peg$FAILED) {\n                    peg$reportedPos = s3;\n                    s4 = peg$c16(s4, s6);\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n              if (s3 === peg$FAILED) {\n                s3 = peg$c1;\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parseIN();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parse_();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parseassignmentExpression();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$currPos;\n                      s8 = peg$parse_();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseBY();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse_();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseassignmentExpression();\n                            if (s11 !== peg$FAILED) {\n                              peg$reportedPos = s7;\n                              s8 = peg$c15(s11);\n                              s7 = s8;\n                            } else {\n                              peg$currPos = s7;\n                              s7 = peg$c0;\n                            }\n                          } else {\n                            peg$currPos = s7;\n                            s7 = peg$c0;\n                          }\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$c0;\n                      }\n                      if (s7 === peg$FAILED) {\n                        s7 = peg$c1;\n                      }\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$currPos;\n                        s9 = peg$parse_();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parseWHEN();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parse_();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parseassignmentExpression();\n                              if (s12 !== peg$FAILED) {\n                                peg$reportedPos = s8;\n                                s9 = peg$c15(s12);\n                                s8 = s9;\n                              } else {\n                                peg$currPos = s8;\n                                s8 = peg$c0;\n                              }\n                            } else {\n                              peg$currPos = s8;\n                              s8 = peg$c0;\n                            }\n                          } else {\n                            peg$currPos = s8;\n                            s8 = peg$c0;\n                          }\n                        } else {\n                          peg$currPos = s8;\n                          s8 = peg$c0;\n                        }\n                        if (s8 === peg$FAILED) {\n                          s8 = peg$c1;\n                        }\n                        if (s8 !== peg$FAILED) {\n                          peg$reportedPos = s0;\n                          s1 = peg$c17(s3, s6, s7, s8);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseFOR();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse_();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$currPos;\n                s4 = peg$parseOWN();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parse_();\n                  if (s5 !== peg$FAILED) {\n                    s4 = [s4, s5];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n                if (s3 === peg$FAILED) {\n                  s3 = peg$c1;\n                }\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parseAssignable();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parse_();\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$currPos;\n                      if (input.charCodeAt(peg$currPos) === 44) {\n                        s7 = peg$c13;\n                        peg$currPos++;\n                      } else {\n                        s7 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c14); }\n                      }\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse_();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parseAssignable();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse_();\n                            if (s10 !== peg$FAILED) {\n                              peg$reportedPos = s6;\n                              s7 = peg$c15(s9);\n                              s6 = s7;\n                            } else {\n                              peg$currPos = s6;\n                              s6 = peg$c0;\n                            }\n                          } else {\n                            peg$currPos = s6;\n                            s6 = peg$c0;\n                          }\n                        } else {\n                          peg$currPos = s6;\n                          s6 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s6;\n                        s6 = peg$c0;\n                      }\n                      if (s6 === peg$FAILED) {\n                        s6 = peg$c1;\n                      }\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$parseOF();\n                        if (s7 !== peg$FAILED) {\n                          s8 = peg$parse_();\n                          if (s8 !== peg$FAILED) {\n                            s9 = peg$parseassignmentExpression();\n                            if (s9 !== peg$FAILED) {\n                              s10 = peg$currPos;\n                              s11 = peg$parse_();\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parseWHEN();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parse_();\n                                  if (s13 !== peg$FAILED) {\n                                    s14 = peg$parseassignmentExpression();\n                                    if (s14 !== peg$FAILED) {\n                                      peg$reportedPos = s10;\n                                      s11 = peg$c15(s14);\n                                      s10 = s11;\n                                    } else {\n                                      peg$currPos = s10;\n                                      s10 = peg$c0;\n                                    }\n                                  } else {\n                                    peg$currPos = s10;\n                                    s10 = peg$c0;\n                                  }\n                                } else {\n                                  peg$currPos = s10;\n                                  s10 = peg$c0;\n                                }\n                              } else {\n                                peg$currPos = s10;\n                                s10 = peg$c0;\n                              }\n                              if (s10 === peg$FAILED) {\n                                s10 = peg$c1;\n                              }\n                              if (s10 !== peg$FAILED) {\n                                peg$reportedPos = s0;\n                                s1 = peg$c18(s3, s4, s6, s9, s10);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$c0;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$c0;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$c0;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseassignmentExpression() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 13,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parseassignmentOp();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecompoundAssignmentOp();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseexistsAssignmentOp();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsebinaryExpression();\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseassignmentOp() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      var key    = peg$currPos * 204 + 14,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseAssignable();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 61) {\n            s3 = peg$c19;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c20); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s5 = peg$c19;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c20); }\n            }\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n              s4 = peg$c6;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              s6 = peg$parseTERMINDENT();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesecondaryExpression();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseDEDENT();\n                  if (s8 !== peg$FAILED) {\n                    peg$reportedPos = s5;\n                    s6 = peg$c9(s7);\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$currPos;\n                s6 = peg$parseTERMINATOR();\n                if (s6 === peg$FAILED) {\n                  s6 = peg$c1;\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parsesecondaryExpression();\n                    if (s8 !== peg$FAILED) {\n                      peg$reportedPos = s5;\n                      s6 = peg$c9(s8);\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c21(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsecompoundAssignmentOp() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      var key    = peg$currPos * 204 + 15,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseCompoundAssignable();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          if (input.charCodeAt(peg$currPos) === 63) {\n            s4 = peg$c22;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c23); }\n          }\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = peg$c6;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseCompoundAssignmentOperators();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s5 = peg$c19;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c20); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$currPos;\n                s7 = peg$parseTERMINDENT();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsesecondaryExpression();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseDEDENT();\n                    if (s9 !== peg$FAILED) {\n                      peg$reportedPos = s6;\n                      s7 = peg$c9(s8);\n                      s6 = s7;\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$c0;\n                }\n                if (s6 === peg$FAILED) {\n                  s6 = peg$currPos;\n                  s7 = peg$parseTERMINATOR();\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$c1;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse_();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsesecondaryExpression();\n                      if (s9 !== peg$FAILED) {\n                        peg$reportedPos = s6;\n                        s7 = peg$c9(s9);\n                        s6 = s7;\n                      } else {\n                        peg$currPos = s6;\n                        s6 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$c0;\n                  }\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c24(s1, s4, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseCompoundAssignmentOperators() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 16,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c25) {\n        s1 = peg$c25;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c26); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseAND();\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c27) {\n            s1 = peg$c27;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c28); }\n          }\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseOR();\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 2) === peg$c29) {\n                s1 = peg$c29;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c30); }\n              }\n              if (s1 === peg$FAILED) {\n                if (peg$c31.test(input.charAt(peg$currPos))) {\n                  s1 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c32); }\n                }\n                if (s1 === peg$FAILED) {\n                  s1 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 43) {\n                    s2 = peg$c33;\n                    peg$currPos++;\n                  } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                  }\n                  if (s2 !== peg$FAILED) {\n                    s3 = peg$currPos;\n                    peg$silentFails++;\n                    if (input.charCodeAt(peg$currPos) === 43) {\n                      s4 = peg$c33;\n                      peg$currPos++;\n                    } else {\n                      s4 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c34); }\n                    }\n                    peg$silentFails--;\n                    if (s4 === peg$FAILED) {\n                      s3 = peg$c6;\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$c0;\n                    }\n                    if (s3 !== peg$FAILED) {\n                      s2 = [s2, s3];\n                      s1 = s2;\n                    } else {\n                      peg$currPos = s1;\n                      s1 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s1;\n                    s1 = peg$c0;\n                  }\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 45) {\n                      s2 = peg$c35;\n                      peg$currPos++;\n                    } else {\n                      s2 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                    }\n                    if (s2 !== peg$FAILED) {\n                      s3 = peg$currPos;\n                      peg$silentFails++;\n                      if (input.charCodeAt(peg$currPos) === 45) {\n                        s4 = peg$c35;\n                        peg$currPos++;\n                      } else {\n                        s4 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c36); }\n                      }\n                      peg$silentFails--;\n                      if (s4 === peg$FAILED) {\n                        s3 = peg$c6;\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$c0;\n                      }\n                      if (s3 !== peg$FAILED) {\n                        s2 = [s2, s3];\n                        s1 = s2;\n                      } else {\n                        peg$currPos = s1;\n                        s1 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s1;\n                      s1 = peg$c0;\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 2) === peg$c37) {\n                        s1 = peg$c37;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 3) === peg$c39) {\n                          s1 = peg$c39;\n                          peg$currPos += 3;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c40); }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 2) === peg$c41) {\n                            s1 = peg$c41;\n                            peg$currPos += 2;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c42); }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseexistsAssignmentOp() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      var key    = peg$currPos * 204 + 17,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseCompoundAssignable();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c43) {\n            s3 = peg$c43;\n            peg$currPos += 2;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c44); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              s6 = peg$parseTERMINDENT();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesecondaryExpression();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseDEDENT();\n                  if (s8 !== peg$FAILED) {\n                    peg$reportedPos = s5;\n                    s6 = peg$c9(s7);\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$currPos;\n                s6 = peg$parseTERMINATOR();\n                if (s6 === peg$FAILED) {\n                  s6 = peg$c1;\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parsesecondaryExpression();\n                    if (s8 !== peg$FAILED) {\n                      peg$reportedPos = s5;\n                      s6 = peg$c9(s8);\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c45(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseassignmentExpressionNoImplicitObjectCall() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 18,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parseassignmentOpNoImplicitObjectCall();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecompoundAssignmentOpNoImplicitObjectCall();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseexistsAssignmentOpNoImplicitObjectCall();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsebinaryExpressionNoImplicitObjectCall();\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseassignmentOpNoImplicitObjectCall() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      var key    = peg$currPos * 204 + 19,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseAssignable();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 61) {\n            s3 = peg$c19;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c20); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s5 = peg$c19;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c20); }\n            }\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n              s4 = peg$c6;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              s6 = peg$parseTERMINDENT();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesecondaryExpressionNoImplicitObjectCall();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseDEDENT();\n                  if (s8 !== peg$FAILED) {\n                    peg$reportedPos = s5;\n                    s6 = peg$c9(s7);\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$currPos;\n                s6 = peg$parseTERMINATOR();\n                if (s6 === peg$FAILED) {\n                  s6 = peg$c1;\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parsesecondaryExpressionNoImplicitObjectCall();\n                    if (s8 !== peg$FAILED) {\n                      peg$reportedPos = s5;\n                      s6 = peg$c9(s8);\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c21(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsecompoundAssignmentOpNoImplicitObjectCall() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      var key    = peg$currPos * 204 + 20,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseCompoundAssignable();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          if (input.charCodeAt(peg$currPos) === 63) {\n            s4 = peg$c22;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c23); }\n          }\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = peg$c6;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseCompoundAssignmentOperators();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s5 = peg$c19;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c20); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$currPos;\n                s7 = peg$parseTERMINDENT();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsesecondaryExpressionNoImplicitObjectCall();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseDEDENT();\n                    if (s9 !== peg$FAILED) {\n                      peg$reportedPos = s6;\n                      s7 = peg$c9(s8);\n                      s6 = s7;\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$c0;\n                }\n                if (s6 === peg$FAILED) {\n                  s6 = peg$currPos;\n                  s7 = peg$parseTERMINATOR();\n                  if (s7 === peg$FAILED) {\n                    s7 = peg$c1;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse_();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsesecondaryExpressionNoImplicitObjectCall();\n                      if (s9 !== peg$FAILED) {\n                        peg$reportedPos = s6;\n                        s7 = peg$c9(s9);\n                        s6 = s7;\n                      } else {\n                        peg$currPos = s6;\n                        s6 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$c0;\n                  }\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c24(s1, s4, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseexistsAssignmentOpNoImplicitObjectCall() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      var key    = peg$currPos * 204 + 21,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseCompoundAssignable();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c43) {\n            s3 = peg$c43;\n            peg$currPos += 2;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c44); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              s6 = peg$parseTERMINDENT();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesecondaryExpressionNoImplicitObjectCall();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseDEDENT();\n                  if (s8 !== peg$FAILED) {\n                    peg$reportedPos = s5;\n                    s6 = peg$c9(s7);\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$currPos;\n                s6 = peg$parseTERMINATOR();\n                if (s6 === peg$FAILED) {\n                  s6 = peg$c1;\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parsesecondaryExpressionNoImplicitObjectCall();\n                    if (s8 !== peg$FAILED) {\n                      peg$reportedPos = s5;\n                      s6 = peg$c9(s8);\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c45(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsebinaryExpression() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      var key    = peg$currPos * 204 + 22,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseprefixExpression();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsebinaryOperator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseTERMINATOR();\n            if (s6 === peg$FAILED) {\n              s6 = peg$c1;\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse_();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parseexpressionworthy();\n                if (s8 === peg$FAILED) {\n                  s8 = peg$parseprefixExpression();\n                }\n                if (s8 !== peg$FAILED) {\n                  peg$reportedPos = s3;\n                  s4 = peg$c46(s5, s8);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsebinaryOperator();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseTERMINATOR();\n              if (s6 === peg$FAILED) {\n                s6 = peg$c1;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseexpressionworthy();\n                  if (s8 === peg$FAILED) {\n                    s8 = peg$parseprefixExpression();\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$reportedPos = s3;\n                    s4 = peg$c46(s5, s8);\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c47(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsebinaryOperator() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 23,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseCompoundAssignmentOperators();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 61) {\n          s4 = peg$c19;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c20); }\n        }\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c48) {\n          s0 = peg$c48;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c49); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c50) {\n            s0 = peg$c50;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c51); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c52;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c53); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 62) {\n                s0 = peg$c54;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c55); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c56) {\n                  s0 = peg$c56;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c57); }\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseIS();\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 2) === peg$c58) {\n                      s0 = peg$c58;\n                      peg$currPos += 2;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c59); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseISNT();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parseEXTENDS();\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$parseINSTANCEOF();\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$parseIN();\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$parseOF();\n                              if (s0 === peg$FAILED) {\n                                s0 = peg$currPos;\n                                s1 = peg$parseNOT();\n                                if (s1 !== peg$FAILED) {\n                                  s2 = peg$parse_();\n                                  if (s2 !== peg$FAILED) {\n                                    s3 = peg$parseINSTANCEOF();\n                                    if (s3 === peg$FAILED) {\n                                      s3 = peg$parseIN();\n                                      if (s3 === peg$FAILED) {\n                                        s3 = peg$parseOF();\n                                      }\n                                    }\n                                    if (s3 !== peg$FAILED) {\n                                      peg$reportedPos = s0;\n                                      s1 = peg$c60(s3);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$c0;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$c0;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$c0;\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsebinaryExpressionNoImplicitObjectCall() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      var key    = peg$currPos * 204 + 24,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseprefixExpressionNoImplicitObjectCall();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsebinaryOperator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseTERMINATOR();\n            if (s6 === peg$FAILED) {\n              s6 = peg$c1;\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse_();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parseexpressionworthy();\n                if (s8 === peg$FAILED) {\n                  s8 = peg$parseprefixExpressionNoImplicitObjectCall();\n                }\n                if (s8 !== peg$FAILED) {\n                  peg$reportedPos = s3;\n                  s4 = peg$c46(s5, s8);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsebinaryOperator();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseTERMINATOR();\n              if (s6 === peg$FAILED) {\n                s6 = peg$c1;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseexpressionworthy();\n                  if (s8 === peg$FAILED) {\n                    s8 = peg$parseprefixExpressionNoImplicitObjectCall();\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$reportedPos = s3;\n                    s4 = peg$c46(s5, s8);\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c47(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseprefixExpression() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 25,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsepostfixExpression();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseDO();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenfe();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseexpressionworthy();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseprefixExpression();\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c61(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = [];\n          s2 = peg$currPos;\n          s3 = peg$parsePrefixOperators();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s2;\n              s3 = peg$c62(s3);\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$c0;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c0;\n          }\n          if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n              s1.push(s2);\n              s2 = peg$currPos;\n              s3 = peg$parsePrefixOperators();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse_();\n                if (s4 !== peg$FAILED) {\n                  peg$reportedPos = s2;\n                  s3 = peg$c62(s3);\n                  s2 = s3;\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$c0;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$c0;\n              }\n            }\n          } else {\n            s1 = peg$c0;\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseexpressionworthy();\n            if (s2 === peg$FAILED) {\n              s2 = peg$parseprefixExpression();\n            }\n            if (s2 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c63(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsePrefixOperators() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 26,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (input.substr(peg$currPos, 2) === peg$c64) {\n        s0 = peg$c64;\n        peg$currPos += 2;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c65); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c66) {\n          s0 = peg$c66;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c67); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s0 = peg$c33;\n            peg$currPos++;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 45) {\n              s0 = peg$c35;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c36); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 33) {\n                s0 = peg$c68;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c69); }\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseNOT();\n                if (s0 === peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 126) {\n                    s0 = peg$c70;\n                    peg$currPos++;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c71); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseDO();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseTYPEOF();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parseDELETE();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsenfe() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      var key    = peg$currPos * 204 + 27,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      s2 = peg$parseunassignable();\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = peg$c6;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseAssignable();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c19;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c20); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsefunctionLiteral();\n                if (s6 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c72(s2, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseprefixExpressionNoImplicitObjectCall() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 28,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsepostfixExpressionNoImplicitObjectCall();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseDO();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenfe();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseexpressionworthy();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseprefixExpressionNoImplicitObjectCall();\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c61(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = [];\n          s2 = peg$currPos;\n          s3 = peg$parsePrefixOperators();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s2;\n              s3 = peg$c62(s3);\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$c0;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c0;\n          }\n          if (s2 !== peg$FAILED) {\n            while (s2 !== peg$FAILED) {\n              s1.push(s2);\n              s2 = peg$currPos;\n              s3 = peg$parsePrefixOperators();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse_();\n                if (s4 !== peg$FAILED) {\n                  peg$reportedPos = s2;\n                  s3 = peg$c62(s3);\n                  s2 = s3;\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$c0;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$c0;\n              }\n            }\n          } else {\n            s1 = peg$c0;\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseexpressionworthy();\n            if (s2 === peg$FAILED) {\n              s2 = peg$parseprefixExpressionNoImplicitObjectCall();\n            }\n            if (s2 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c63(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsepostfixExpression() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 29,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseleftHandSideExpression();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsePostfixOperators();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsePostfixOperators();\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c73(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsePostfixOperators() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 30,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (input.charCodeAt(peg$currPos) === 63) {\n        s0 = peg$c22;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c23); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4) === peg$c74) {\n          s0 = peg$c74;\n          peg$currPos += 4;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c75); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c64) {\n            s0 = peg$c64;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c65); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 2) === peg$c66) {\n              s0 = peg$c66;\n              peg$currPos += 2;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c67); }\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsepostfixExpressionNoImplicitObjectCall() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 31,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseleftHandSideExpressionNoImplicitObjectCall();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsePostfixOperators();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsePostfixOperators();\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c73(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseleftHandSideExpression() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 32,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsecallExpression();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsenewExpression();\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseargumentList() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      var key    = peg$currPos * 204 + 33,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 63) {\n        s1 = peg$c22;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c23); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s2 = peg$c76;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c77); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseargumentListContents();\n            if (s4 === peg$FAILED) {\n              s4 = peg$c1;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s6 = peg$c78;\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c79); }\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c80(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseargumentListContents() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      var key    = peg$currPos * 204 + 34,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseargument();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c13;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseTERMINATOR();\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseargument();\n              if (s7 !== peg$FAILED) {\n                peg$reportedPos = s3;\n                s4 = peg$c15(s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c13;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c14); }\n            }\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseTERMINATOR();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseargument();\n                if (s7 !== peg$FAILED) {\n                  peg$reportedPos = s3;\n                  s4 = peg$c15(s7);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c13;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseTERMINATOR();\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c81(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseTERMINDENT();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseargumentListContents();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseDEDENT();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parseTERMINATOR();\n              if (s4 === peg$FAILED) {\n                s4 = peg$c1;\n              }\n              if (s4 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c15(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseargument() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 35,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsespread();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseexpression();\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsesecondaryArgumentList() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n      var key    = peg$currPos * 204 + 36,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        peg$silentFails++;\n        s3 = peg$currPos;\n        if (peg$c82.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c83); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n          s2 = peg$c6;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsesecondaryArgument();\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$currPos;\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s7 = peg$c13;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c14); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseTERMINATOR();\n                  if (s9 === peg$FAILED) {\n                    s9 = peg$c1;\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parsesecondaryArgument();\n                      if (s11 !== peg$FAILED) {\n                        peg$reportedPos = s5;\n                        s6 = peg$c15(s11);\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$c0;\n            }\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$currPos;\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s7 = peg$c13;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c14); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseTERMINATOR();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$c1;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsesecondaryArgument();\n                        if (s11 !== peg$FAILED) {\n                          peg$reportedPos = s5;\n                          s6 = peg$c15(s11);\n                          s5 = s6;\n                        } else {\n                          peg$currPos = s5;\n                          s5 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s6 = peg$c13;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c14); }\n              }\n              if (s6 === peg$FAILED) {\n                s6 = peg$c1;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseTERMINDENT();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseimplicitObjectLiteral();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseDEDENT();\n                    if (s9 !== peg$FAILED) {\n                      peg$reportedPos = s5;\n                      s6 = peg$c62(s8);\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$c1;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c84(s3, s4, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseTERMINDENT();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseimplicitObjectLiteral();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseDEDENT();\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c85(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsesecondaryArgument() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 37,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsespread();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsesingleLineImplicitObjectLiteral();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsesecondaryExpression();\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseleftHandSideExpressionNoImplicitObjectCall() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 38,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsecallExpressionNoImplicitObjectCall();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsenewExpressionNoImplicitObjectCall();\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsesecondaryArgumentListNoImplicitObjectCall() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n      var key    = peg$currPos * 204 + 39,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        peg$silentFails++;\n        s3 = peg$currPos;\n        if (peg$c82.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c83); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n          s2 = peg$c6;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsesecondaryArgumentNoImplicitObjectCall();\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$currPos;\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s7 = peg$c13;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c14); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseTERMINATOR();\n                  if (s9 === peg$FAILED) {\n                    s9 = peg$c1;\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parsesecondaryArgumentNoImplicitObjectCall();\n                      if (s11 !== peg$FAILED) {\n                        peg$reportedPos = s5;\n                        s6 = peg$c9(s11);\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$c0;\n            }\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$currPos;\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s7 = peg$c13;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c14); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseTERMINATOR();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$c1;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsesecondaryArgumentNoImplicitObjectCall();\n                        if (s11 !== peg$FAILED) {\n                          peg$reportedPos = s5;\n                          s6 = peg$c9(s11);\n                          s5 = s6;\n                        } else {\n                          peg$currPos = s5;\n                          s5 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c81(s3, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsesecondaryArgumentNoImplicitObjectCall() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 40,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsespreadNoImplicitObjectCall();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsesecondaryExpressionNoImplicitObjectCall();\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsecallExpression() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 41,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsememberExpression();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsecallExpressionAccesses();\n        if (s2 === peg$FAILED) {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 63) {\n            s4 = peg$c22;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c23); }\n          }\n          if (s4 === peg$FAILED) {\n            s4 = peg$c1;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsesecondaryArgumentList();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c86(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsecallExpressionAccesses() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 42,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseTERMINDENT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsecallExpressionAccesses();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDEDENT();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c87(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseargumentList();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseMemberAccessOps();\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parseargumentList();\n            if (s2 === peg$FAILED) {\n              s2 = peg$parseMemberAccessOps();\n            }\n          }\n        } else {\n          s1 = peg$c0;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsecallExpressionAccesses();\n          if (s2 === peg$FAILED) {\n            s2 = peg$c1;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c88(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsecallExpressionNoImplicitObjectCall() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 43,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsememberExpressionNoImplicitObjectCall();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseargumentList();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseMemberAccessOps();\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseargumentList();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseMemberAccessOps();\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 63) {\n            s4 = peg$c22;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c23); }\n          }\n          if (s4 === peg$FAILED) {\n            s4 = peg$c1;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsesecondaryArgumentListNoImplicitObjectCall();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c86(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsenewExpression() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 44,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsememberExpression();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseNEW();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseexpressionworthy();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parsenewExpression();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseprefixExpression();\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c89(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsenewExpressionNoImplicitObjectCall() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 45,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsememberExpressionNoImplicitObjectCall();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseNEW();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseexpressionworthy();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parsenewExpressionNoImplicitObjectCall();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseprefixExpressionNoImplicitObjectCall();\n              }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c89(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsememberExpression() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 46,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseprimaryExpression();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseNEW();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsememberExpression();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseargumentList();\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s1;\n                s2 = peg$c90(s4, s5);\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$c0;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$c0;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$c0;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseMemberAccessOps();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseMemberAccessOps();\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c91(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseNEW();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsememberExpression();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parsesecondaryArgumentList();\n              if (s4 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c92(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsememberAccess() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 47,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseprimaryExpression();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseNEW();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsememberExpression();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseargumentList();\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s1;\n                s2 = peg$c90(s4, s5);\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$c0;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$c0;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$c0;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parseargumentList();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseMemberAccessOps();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseMemberAccessOps();\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$parseargumentList();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseMemberAccessOps();\n              if (s5 !== peg$FAILED) {\n                s4 = [s4, s5];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseMemberAccessOps();\n            }\n          }\n        } else {\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c93(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecontextVar();\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseMemberAccessOps() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n      var key    = peg$currPos * 204 + 48,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseTERMINDENT();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s2 = peg$c94;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c95); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseidentifierName();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parseMemberAccessOps();\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$parseMemberAccessOps();\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseDEDENT();\n                if (s6 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c96(s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseTERMINATOR();\n        if (s1 === peg$FAILED) {\n          s1 = peg$c1;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 46) {\n              s3 = peg$c94;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c95); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parseTERMINATOR();\n              if (s4 === peg$FAILED) {\n                s4 = peg$c1;\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parse_();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parseidentifierName();\n                  if (s6 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c96(s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c97) {\n            s1 = peg$c97;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c98); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse_();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseidentifierName();\n              if (s3 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c99(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 91) {\n              s1 = peg$c100;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c101); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse_();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseexpression();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse_();\n                  if (s4 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 93) {\n                      s5 = peg$c102;\n                      peg$currPos++;\n                    } else {\n                      s5 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c103); }\n                    }\n                    if (s5 !== peg$FAILED) {\n                      peg$reportedPos = s0;\n                      s1 = peg$c104(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c105) {\n                s1 = peg$c105;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c106); }\n              }\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parse_();\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parseexpression();\n                  if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 93) {\n                        s5 = peg$c102;\n                        peg$currPos++;\n                      } else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c103); }\n                      }\n                      if (s5 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c107(s3);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c108) {\n                  s1 = peg$c108;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c109); }\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$parse_();\n                  if (s2 !== peg$FAILED) {\n                    s3 = peg$parseidentifierName();\n                    if (s3 !== peg$FAILED) {\n                      peg$reportedPos = s0;\n                      s1 = peg$c110(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 3) === peg$c111) {\n                    s1 = peg$c111;\n                    peg$currPos += 3;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c112); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    s2 = peg$parse_();\n                    if (s2 !== peg$FAILED) {\n                      s3 = peg$parseexpression();\n                      if (s3 !== peg$FAILED) {\n                        s4 = peg$parse_();\n                        if (s4 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 93) {\n                            s5 = peg$c102;\n                            peg$currPos++;\n                          } else {\n                            s5 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c103); }\n                          }\n                          if (s5 !== peg$FAILED) {\n                            peg$reportedPos = s0;\n                            s1 = peg$c113(s3);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$c0;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 3) === peg$c114) {\n                      s1 = peg$c114;\n                      peg$currPos += 3;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c115); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parse_();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseidentifierName();\n                        if (s3 !== peg$FAILED) {\n                          peg$reportedPos = s0;\n                          s1 = peg$c116(s3);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c0;\n                    }\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 4) === peg$c117) {\n                        s1 = peg$c117;\n                        peg$currPos += 4;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c118); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parse_();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parseexpression();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parse_();\n                            if (s4 !== peg$FAILED) {\n                              if (input.charCodeAt(peg$currPos) === 93) {\n                                s5 = peg$c102;\n                                peg$currPos++;\n                              } else {\n                                s5 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c103); }\n                              }\n                              if (s5 !== peg$FAILED) {\n                                peg$reportedPos = s0;\n                                s1 = peg$c119(s3);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$c0;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$c0;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$c0;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c0;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 91) {\n                          s1 = peg$c100;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c101); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          s2 = peg$parse_();\n                          if (s2 !== peg$FAILED) {\n                            s3 = peg$parseassignmentExpression();\n                            if (s3 === peg$FAILED) {\n                              s3 = peg$c1;\n                            }\n                            if (s3 !== peg$FAILED) {\n                              s4 = peg$parse_();\n                              if (s4 !== peg$FAILED) {\n                                if (input.substr(peg$currPos, 2) === peg$c120) {\n                                  s5 = peg$c120;\n                                  peg$currPos += 2;\n                                } else {\n                                  s5 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c121); }\n                                }\n                                if (s5 !== peg$FAILED) {\n                                  if (input.charCodeAt(peg$currPos) === 46) {\n                                    s6 = peg$c94;\n                                    peg$currPos++;\n                                  } else {\n                                    s6 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c95); }\n                                  }\n                                  if (s6 === peg$FAILED) {\n                                    s6 = peg$c1;\n                                  }\n                                  if (s6 !== peg$FAILED) {\n                                    s7 = peg$parse_();\n                                    if (s7 !== peg$FAILED) {\n                                      s8 = peg$parseassignmentExpression();\n                                      if (s8 === peg$FAILED) {\n                                        s8 = peg$c1;\n                                      }\n                                      if (s8 !== peg$FAILED) {\n                                        s9 = peg$parse_();\n                                        if (s9 !== peg$FAILED) {\n                                          if (input.charCodeAt(peg$currPos) === 93) {\n                                            s10 = peg$c102;\n                                            peg$currPos++;\n                                          } else {\n                                            s10 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c103); }\n                                          }\n                                          if (s10 !== peg$FAILED) {\n                                            peg$reportedPos = s0;\n                                            s1 = peg$c122(s3, s6, s8);\n                                            s0 = s1;\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$c0;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$c0;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$c0;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$c0;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$c0;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$c0;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$c0;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$c0;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$c0;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c0;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsememberExpressionNoImplicitObjectCall() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 49,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseprimaryExpression();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseNEW();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsememberExpressionNoImplicitObjectCall();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseargumentList();\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s1;\n                s2 = peg$c90(s4, s5);\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$c0;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$c0;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$c0;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseMemberAccessOps();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseMemberAccessOps();\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c91(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseNEW();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsememberExpressionNoImplicitObjectCall();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parsesecondaryArgumentListNoImplicitObjectCall();\n              if (s4 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c92(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseprimaryExpression() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      var key    = peg$currPos * 204 + 50,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsemacro();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseNumbers();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsebool();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsenull();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseundefined();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecontextVar();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parseTHIS();\n                  if (s1 === peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 64) {\n                      s1 = peg$c123;\n                      peg$currPos++;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c124); }\n                    }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c125();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseidentifier();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parserange();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parsearrayLiteral();\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$parseobjectLiteral();\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$parseinterpolation();\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$parseJSLiteral();\n                              if (s0 === peg$FAILED) {\n                                s0 = peg$parsestring();\n                                if (s0 === peg$FAILED) {\n                                  s0 = peg$parseregexp();\n                                  if (s0 === peg$FAILED) {\n                                    s0 = peg$currPos;\n                                    if (input.charCodeAt(peg$currPos) === 40) {\n                                      s1 = peg$c76;\n                                      peg$currPos++;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c77); }\n                                    }\n                                    if (s1 !== peg$FAILED) {\n                                      s2 = peg$parseTERMINDENT();\n                                      if (s2 !== peg$FAILED) {\n                                        s3 = peg$parseexpression();\n                                        if (s3 !== peg$FAILED) {\n                                          s4 = peg$parseDEDENT();\n                                          if (s4 !== peg$FAILED) {\n                                            s5 = peg$parseTERMINATOR();\n                                            if (s5 === peg$FAILED) {\n                                              s5 = peg$c1;\n                                            }\n                                            if (s5 !== peg$FAILED) {\n                                              if (input.charCodeAt(peg$currPos) === 41) {\n                                                s6 = peg$c78;\n                                                peg$currPos++;\n                                              } else {\n                                                s6 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c79); }\n                                              }\n                                              if (s6 !== peg$FAILED) {\n                                                peg$reportedPos = s0;\n                                                s1 = peg$c126(s3);\n                                                s0 = s1;\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$c0;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$c0;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$c0;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$c0;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$c0;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$c0;\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      s0 = peg$currPos;\n                                      if (input.charCodeAt(peg$currPos) === 40) {\n                                        s1 = peg$c76;\n                                        peg$currPos++;\n                                      } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n                                      }\n                                      if (s1 !== peg$FAILED) {\n                                        s2 = peg$parse_();\n                                        if (s2 !== peg$FAILED) {\n                                          s3 = peg$parseexpression();\n                                          if (s3 !== peg$FAILED) {\n                                            s4 = peg$parse_();\n                                            if (s4 !== peg$FAILED) {\n                                              s5 = peg$parseTERMINATOR();\n                                              if (s5 === peg$FAILED) {\n                                                s5 = peg$c1;\n                                              }\n                                              if (s5 !== peg$FAILED) {\n                                                s6 = peg$parse_();\n                                                if (s6 !== peg$FAILED) {\n                                                  if (input.charCodeAt(peg$currPos) === 41) {\n                                                    s7 = peg$c78;\n                                                    peg$currPos++;\n                                                  } else {\n                                                    s7 = peg$FAILED;\n                                                    if (peg$silentFails === 0) { peg$fail(peg$c79); }\n                                                  }\n                                                  if (s7 !== peg$FAILED) {\n                                                    peg$reportedPos = s0;\n                                                    s1 = peg$c126(s3);\n                                                    s0 = s1;\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$c0;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$c0;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$c0;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$c0;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$c0;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$c0;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$c0;\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsecontextVar() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 204 + 51,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 64) {\n        s2 = peg$c123;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c124); }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$reportedPos = s1;\n        s2 = peg$c125();\n      }\n      s1 = s2;\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseidentifierName();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c127(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseJSLiteral() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 52,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 96) {\n        s1 = peg$c128;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c129); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = [];\n        if (peg$c130.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c131); }\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          if (peg$c130.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c131); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s3 = input.substring(s2, peg$currPos);\n        }\n        s2 = s3;\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 96) {\n            s3 = peg$c128;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c129); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c132(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsespread() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 204 + 53,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsepostfixExpression();\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c133) {\n          s2 = peg$c133;\n          peg$currPos += 3;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c134); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c135(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsespreadNoImplicitObjectCall() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 204 + 54,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsepostfixExpressionNoImplicitObjectCall();\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c133) {\n          s2 = peg$c133;\n          peg$currPos += 3;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c134); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c135(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseconditional() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 55,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseIF();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseUNLESS();\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseassignmentExpressionNoImplicitObjectCall();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseconditionalBody();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseelseClause();\n              if (s5 === peg$FAILED) {\n                s5 = peg$c1;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c136(s1, s3, s4, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseconditionalBody() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 56,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseTERMINDENT();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseblock();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseDEDENT();\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c137(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseTERMINATOR();\n        if (s1 === peg$FAILED) {\n          s1 = peg$c1;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse_();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseTHEN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse_();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsestatement();\n                if (s5 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c138(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parse_();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseTHEN();\n            if (s2 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c139();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseelseClause() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 57,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseTERMINATOR();\n        if (s2 === peg$FAILED) {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseELSE();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsefunctionBody();\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c140(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsewhile() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 58,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseWHILE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseUNTIL();\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseassignmentExpressionNoImplicitObjectCall();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseconditionalBody();\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c141(s1, s3, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseloop() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 204 + 59,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseLOOP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseconditionalBody();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c142(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsetry() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 60,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseTRY();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetryBody();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecatchClause();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsefinallyClause();\n            if (s4 === peg$FAILED) {\n              s4 = peg$c1;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c143(s2, s3, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsetryBody() {\n      var s0, s1;\n\n      var key    = peg$currPos * 204 + 61,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsefunctionBody();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c137(s1);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsecatchClause() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      var key    = peg$currPos * 204 + 62,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseTERMINATOR();\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseCATCH();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseAssignable();\n              if (s5 === peg$FAILED) {\n                s5 = peg$c1;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseconditionalBody();\n                if (s6 === peg$FAILED) {\n                  s6 = peg$c1;\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c144(s5, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsefinallyClause() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 63,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseTERMINATOR();\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseFINALLY();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsetryBody();\n            if (s4 === peg$FAILED) {\n              s4 = peg$c1;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c145(s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseclass() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      var key    = peg$currPos * 204 + 64,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseCLASS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseAssignable();\n          if (s4 !== peg$FAILED) {\n            peg$reportedPos = s2;\n            s3 = peg$c15(s4);\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c0;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c0;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseEXTENDS();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsesecondaryExpressionNoImplicitObjectCall();\n                if (s7 !== peg$FAILED) {\n                  peg$reportedPos = s3;\n                  s4 = peg$c9(s7);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseclassBody();\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c146(s2, s3, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseclassBody() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 65,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseTERMINDENT();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseclassBlock();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseDEDENT();\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c140(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseTHEN();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parse_();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parseclassStatement();\n              if (s4 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c4(s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parse_();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseTHEN();\n            if (s2 !== peg$FAILED) {\n              s1 = [s1, s2];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$c1;\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseclassBlock() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      var key    = peg$currPos * 204 + 66,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseclassStatement();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseTERMINATOR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseclassStatement();\n              if (s7 !== peg$FAILED) {\n                peg$reportedPos = s3;\n                s4 = peg$c4(s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseTERMINATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseclassStatement();\n                if (s7 !== peg$FAILED) {\n                  peg$reportedPos = s3;\n                  s4 = peg$c4(s7);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseTERMINATOR();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c5(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseclassStatement() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 67,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parseconstructor();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseclassProtoAssignment();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsestaticAssignment();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseexpression();\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseconstructor() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      var key    = peg$currPos * 204 + 68,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseObjectInitialiserKeys();\n      if (s2 !== peg$FAILED) {\n        peg$reportedPos = peg$currPos;\n        s3 = peg$c147(s2);\n        if (s3) {\n          s3 = peg$c6;\n        } else {\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s3 = peg$c148;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c149); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              s6 = peg$parseTERMINDENT();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpression();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseDEDENT();\n                  if (s8 !== peg$FAILED) {\n                    peg$reportedPos = s5;\n                    s6 = peg$c9(s7);\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$currPos;\n                s6 = peg$parseTERMINATOR();\n                if (s6 === peg$FAILED) {\n                  s6 = peg$c1;\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parseexpression();\n                    if (s8 !== peg$FAILED) {\n                      peg$reportedPos = s5;\n                      s6 = peg$c9(s8);\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c150(s2, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsestaticAssignment() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      var key    = peg$currPos * 204 + 69,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsecontextVar();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s3 = peg$c148;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c149); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              s6 = peg$parseTERMINDENT();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpression();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseDEDENT();\n                  if (s8 !== peg$FAILED) {\n                    peg$reportedPos = s5;\n                    s6 = peg$c151(s7);\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$currPos;\n                s6 = peg$parseTERMINATOR();\n                if (s6 === peg$FAILED) {\n                  s6 = peg$c1;\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parseexpression();\n                    if (s8 !== peg$FAILED) {\n                      peg$reportedPos = s5;\n                      s6 = peg$c151(s8);\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c152(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseclassProtoAssignment() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      var key    = peg$currPos * 204 + 70,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseObjectInitialiserKeys();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s3 = peg$c148;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c149); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              s6 = peg$parseTERMINDENT();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpression();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseDEDENT();\n                  if (s8 !== peg$FAILED) {\n                    peg$reportedPos = s5;\n                    s6 = peg$c151(s7);\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$currPos;\n                s6 = peg$parsesingleLineImplicitObjectLiteral();\n                if (s6 !== peg$FAILED) {\n                  peg$reportedPos = s5;\n                  s6 = peg$c151(s6);\n                }\n                s5 = s6;\n                if (s5 === peg$FAILED) {\n                  s5 = peg$currPos;\n                  s6 = peg$parseTERMINATOR();\n                  if (s6 === peg$FAILED) {\n                    s6 = peg$c1;\n                  }\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parse_();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parsesecondaryExpression();\n                      if (s8 !== peg$FAILED) {\n                        peg$reportedPos = s5;\n                        s6 = peg$c151(s8);\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c153(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseforOf() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n      var key    = peg$currPos * 204 + 71,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseFOR();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parseOWN();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseAssignable();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 44) {\n                  s7 = peg$c13;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c14); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseAssignable();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        peg$reportedPos = s6;\n                        s7 = peg$c15(s9);\n                        s6 = s7;\n                      } else {\n                        peg$currPos = s6;\n                        s6 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$c0;\n                }\n                if (s6 === peg$FAILED) {\n                  s6 = peg$c1;\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseOF();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse_();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseassignmentExpressionNoImplicitObjectCall();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse_();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$currPos;\n                          s12 = peg$parseWHEN();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse_();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parseassignmentExpressionNoImplicitObjectCall();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse_();\n                                if (s15 !== peg$FAILED) {\n                                  peg$reportedPos = s11;\n                                  s12 = peg$c9(s14);\n                                  s11 = s12;\n                                } else {\n                                  peg$currPos = s11;\n                                  s11 = peg$c0;\n                                }\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$c0;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$c0;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$c0;\n                          }\n                          if (s11 === peg$FAILED) {\n                            s11 = peg$c1;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parseconditionalBody();\n                            if (s12 !== peg$FAILED) {\n                              peg$reportedPos = s0;\n                              s1 = peg$c154(s3, s4, s6, s9, s11, s12);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$c0;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$c0;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseforIn() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n      var key    = peg$currPos * 204 + 72,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseFOR();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parseAssignable();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s7 = peg$c13;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c14); }\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseAssignable();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse_();\n                    if (s10 !== peg$FAILED) {\n                      peg$reportedPos = s6;\n                      s7 = peg$c15(s9);\n                      s6 = s7;\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$c0;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$c0;\n              }\n              if (s6 === peg$FAILED) {\n                s6 = peg$c1;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$reportedPos = s3;\n                s4 = peg$c16(s4, s6);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseIN();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseassignmentExpressionNoImplicitObjectCall();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$currPos;\n                    s9 = peg$parseBY();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse_();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseassignmentExpressionNoImplicitObjectCall();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse_();\n                          if (s12 !== peg$FAILED) {\n                            peg$reportedPos = s8;\n                            s9 = peg$c9(s11);\n                            s8 = s9;\n                          } else {\n                            peg$currPos = s8;\n                            s8 = peg$c0;\n                          }\n                        } else {\n                          peg$currPos = s8;\n                          s8 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s8;\n                        s8 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s8;\n                      s8 = peg$c0;\n                    }\n                    if (s8 === peg$FAILED) {\n                      s8 = peg$c1;\n                    }\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$currPos;\n                      s10 = peg$parseWHEN();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse_();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseassignmentExpressionNoImplicitObjectCall();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse_();\n                            if (s13 !== peg$FAILED) {\n                              peg$reportedPos = s9;\n                              s10 = peg$c9(s12);\n                              s9 = s10;\n                            } else {\n                              peg$currPos = s9;\n                              s9 = peg$c0;\n                            }\n                          } else {\n                            peg$currPos = s9;\n                            s9 = peg$c0;\n                          }\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$c0;\n                      }\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$c1;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parseconditionalBody();\n                        if (s10 !== peg$FAILED) {\n                          peg$reportedPos = s0;\n                          s1 = peg$c155(s3, s6, s8, s9, s10);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseswitch() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 73,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseSWITCH();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexpressionworthy();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseassignmentExpression();\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseswitchBody();\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c156(s3, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseswitchBody() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 74,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseTERMINDENT();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseswitchBlock();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseDEDENT();\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c157(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseTHEN();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parse_();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parsecase();\n              if (s4 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c158(s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parse_();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseTHEN();\n            if (s2 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c159();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseswitchBlock() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      var key    = peg$currPos * 204 + 75,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsecase();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseTERMINATOR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecase();\n              if (s7 !== peg$FAILED) {\n                peg$reportedPos = s3;\n                s4 = peg$c160(s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseTERMINATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecase();\n                if (s7 !== peg$FAILED) {\n                  peg$reportedPos = s3;\n                  s4 = peg$c160(s7);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseTERMINATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseelseClause();\n                if (s7 !== peg$FAILED) {\n                  peg$reportedPos = s3;\n                  s4 = peg$c9(s7);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseTERMINATOR();\n            if (s4 === peg$FAILED) {\n              s4 = peg$c1;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c161(s1, s2, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsecase() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 76,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseWHEN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecaseConditions();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseconditionalBody();\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c162(s3, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsecaseConditions() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      var key    = peg$currPos * 204 + 77,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseassignmentExpressionNoImplicitObjectCall();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c13;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseassignmentExpressionNoImplicitObjectCall();\n              if (s7 !== peg$FAILED) {\n                peg$reportedPos = s3;\n                s4 = peg$c160(s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c13;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c14); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseassignmentExpressionNoImplicitObjectCall();\n                if (s7 !== peg$FAILED) {\n                  peg$reportedPos = s3;\n                  s4 = peg$c160(s7);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c163(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsefunctionLiteral() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      var key    = peg$currPos * 204 + 78,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c76;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c77); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = peg$parseTERMINDENT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseparameterList();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseDEDENT();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parseTERMINATOR();\n                if (s8 !== peg$FAILED) {\n                  peg$reportedPos = s4;\n                  s5 = peg$c164(s6);\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c0;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c0;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c0;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = peg$parseparameterList();\n          }\n          if (s4 === peg$FAILED) {\n            s4 = peg$c1;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c78;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c79); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  peg$reportedPos = s1;\n                  s2 = peg$c164(s4);\n                  s1 = s2;\n                } else {\n                  peg$currPos = s1;\n                  s1 = peg$c0;\n                }\n              } else {\n                peg$currPos = s1;\n                s1 = peg$c0;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$c0;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$c0;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c1;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c165) {\n          s2 = peg$c165;\n          peg$currPos += 2;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c166); }\n        }\n        if (s2 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c167) {\n            s2 = peg$c167;\n            peg$currPos += 2;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c168); }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsefunctionBody();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c169(s1, s2, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsefunctionBody() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 79,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseTERMINDENT();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseblock();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseDEDENT();\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c140(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsestatement();\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c4(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseparameter() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 80,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseAssignable();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 61) {\n            s3 = peg$c19;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c20); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsesecondaryExpression();\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c170(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parserest();\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parserest() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 204 + 81,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseAssignable();\n      if (s1 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c133) {\n          s2 = peg$c133;\n          peg$currPos += 3;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c134); }\n        }\n        if (s2 === peg$FAILED) {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c171(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseparameterList() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      var key    = peg$currPos * 204 + 82,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseparameter();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s6 = peg$c13;\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseTERMINATOR();\n            if (s7 === peg$FAILED) {\n              s7 = peg$c1;\n            }\n            if (s7 !== peg$FAILED) {\n              s6 = [s6, s7];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$c0;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$c0;\n          }\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseTERMINATOR();\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparameter();\n              if (s7 !== peg$FAILED) {\n                peg$reportedPos = s3;\n                s4 = peg$c9(s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s6 = peg$c13;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c14); }\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseTERMINATOR();\n              if (s7 === peg$FAILED) {\n                s7 = peg$c1;\n              }\n              if (s7 !== peg$FAILED) {\n                s6 = [s6, s7];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$c0;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseTERMINATOR();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseparameter();\n                if (s7 !== peg$FAILED) {\n                  peg$reportedPos = s3;\n                  s4 = peg$c9(s7);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c81(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parserange() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n      var key    = peg$currPos * 204 + 83,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c100;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c101); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsesecondaryExpression();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 2) === peg$c120) {\n                s5 = peg$c120;\n                peg$currPos += 2;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c121); }\n              }\n              if (s5 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 46) {\n                  s6 = peg$c94;\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c95); }\n                }\n                if (s6 === peg$FAILED) {\n                  s6 = peg$c1;\n                }\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parsesecondaryExpression();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parse_();\n                      if (s9 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 93) {\n                          s10 = peg$c102;\n                          peg$currPos++;\n                        } else {\n                          s10 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c103); }\n                        }\n                        if (s10 !== peg$FAILED) {\n                          peg$reportedPos = s0;\n                          s1 = peg$c172(s3, s6, s8);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsearrayLiteral() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 84,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c100;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c101); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsearrayLiteralBody();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseTERMINATOR();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 93) {\n                s5 = peg$c102;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c103); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c173(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsearrayLiteralBody() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 85,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseTERMINDENT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsearrayLiteralMemberList();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDEDENT();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c174(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsearrayLiteralMemberList();\n          if (s2 === peg$FAILED) {\n            s2 = peg$c1;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c175(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsearrayLiteralMemberList() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      var key    = peg$currPos * 204 + 86,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsearrayLiteralMember();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          s5 = peg$parsearrayLiteralMemberSeparator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsearrayLiteralMember();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  peg$reportedPos = s4;\n                  s5 = peg$c9(s7);\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c0;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c0;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c0;\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            s5 = peg$parsearrayLiteralMemberSeparator();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsearrayLiteralMember();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    peg$reportedPos = s4;\n                    s5 = peg$c9(s7);\n                    s4 = s5;\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c0;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c0;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsearrayLiteralMemberSeparator();\n            if (s4 === peg$FAILED) {\n              s4 = peg$c1;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c81(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsearrayLiteralMember() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 87,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsespread();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseexpression();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseTERMINDENT();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseimplicitObjectLiteral();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseDEDENT();\n              if (s3 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c62(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsearrayLiteralMemberSeparator() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 88,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseTERMINATOR();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse_();\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s4 = peg$c13;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          if (s4 === peg$FAILED) {\n            s4 = peg$c1;\n          }\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$c0;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c13;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c14); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseTERMINATOR();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s2 = [s2, s3, s4];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$c0;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$c0;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n        if (s1 !== peg$FAILED) {\n          s1 = input.substring(s0, peg$currPos);\n        }\n        s0 = s1;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseobjectLiteral() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 89,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 123) {\n        s1 = peg$c176;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c177); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseobjectLiteralBody();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseTERMINATOR();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 125) {\n                s5 = peg$c178;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c179); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c180(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseobjectLiteralBody() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 90,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseTERMINDENT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseobjectLiteralMemberList();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDEDENT();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c174(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseobjectLiteralMemberList();\n          if (s2 === peg$FAILED) {\n            s2 = peg$c1;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c175(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseobjectLiteralMemberList() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      var key    = peg$currPos * 204 + 91,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseobjectLiteralMember();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$currPos;\n          s5 = peg$parsearrayLiteralMemberSeparator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseobjectLiteralMember();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  peg$reportedPos = s4;\n                  s5 = peg$c9(s7);\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c0;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c0;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c0;\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$currPos;\n            s5 = peg$parsearrayLiteralMemberSeparator();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseobjectLiteralMember();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    peg$reportedPos = s4;\n                    s5 = peg$c9(s7);\n                    s4 = s5;\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c0;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c0;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s4 = peg$c13;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c14); }\n            }\n            if (s4 === peg$FAILED) {\n              s4 = peg$c1;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c81(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseobjectLiteralMember() {\n      var s0, s1;\n\n      var key    = peg$currPos * 204 + 92,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parseimplicitObjectLiteralMember();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecontextVar();\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c181(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseObjectInitialiserKeys();\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c182(s1);\n          }\n          s0 = s1;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseObjectInitialiserKeys() {\n      var s0, s1;\n\n      var key    = peg$currPos * 204 + 93,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseidentifierName();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c183(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsestring();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseNumbers();\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseimplicitObjectLiteral() {\n      var s0, s1;\n\n      var key    = peg$currPos * 204 + 94,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseimplicitObjectLiteralMemberList();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c180(s1);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseimplicitObjectLiteralMemberList() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 95,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseimplicitObjectLiteralMember();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parseimplicitObjectLiteralMemberSeparator();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseimplicitObjectLiteralMember();\n          if (s5 !== peg$FAILED) {\n            peg$reportedPos = s3;\n            s4 = peg$c9(s5);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parseimplicitObjectLiteralMemberSeparator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseimplicitObjectLiteralMember();\n            if (s5 !== peg$FAILED) {\n              peg$reportedPos = s3;\n              s4 = peg$c9(s5);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c81(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseimplicitObjectLiteralMemberSeparator() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 96,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseTERMINATOR();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c13;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c14); }\n        }\n        if (s2 === peg$FAILED) {\n          s2 = peg$c1;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s2 = peg$c13;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseTERMINATOR();\n            if (s3 === peg$FAILED) {\n              s3 = peg$c1;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse_();\n              if (s4 !== peg$FAILED) {\n                s1 = [s1, s2, s3, s4];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseimplicitObjectLiteralMember() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 97,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseObjectInitialiserKeys();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s3 = peg$c148;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c149); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseimplicitObjectLiteralMemberValue();\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c184(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseimplicitObjectLiteralMemberValue() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 98,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsesingleLineImplicitObjectLiteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseexpression();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseTERMINDENT();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseexpression();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseDEDENT();\n              if (s3 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c62(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsesingleLineImplicitObjectLiteral() {\n      var s0, s1;\n\n      var key    = peg$currPos * 204 + 99,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsesingleLineImplicitObjectLiteralMemberList();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c180(s1);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsesingleLineImplicitObjectLiteralMemberList() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 100,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseimplicitObjectLiteralMember();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parsesingleLineImplicitObjectLiteralMemberSeparator();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseimplicitObjectLiteralMember();\n          if (s5 !== peg$FAILED) {\n            peg$reportedPos = s3;\n            s4 = peg$c9(s5);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parsesingleLineImplicitObjectLiteralMemberSeparator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseimplicitObjectLiteralMember();\n            if (s5 !== peg$FAILED) {\n              peg$reportedPos = s3;\n              s4 = peg$c9(s5);\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c81(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsesingleLineImplicitObjectLiteralMemberSeparator() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 101,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 44) {\n          s2 = peg$c13;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c14); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsemacro() {\n      var s0, s1;\n\n      var key    = peg$currPos * 204 + 102,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 8) === peg$c185) {\n        s1 = peg$c185;\n        peg$currPos += 8;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c186); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c187();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 12) === peg$c188) {\n          s1 = peg$c188;\n          peg$currPos += 12;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c189); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c190();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 8) === peg$c191) {\n            s1 = peg$c191;\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c192); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c193();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 8) === peg$c194) {\n              s1 = peg$c194;\n              peg$currPos += 8;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c195); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c196();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 14) === peg$c197) {\n                s1 = peg$c197;\n                peg$currPos += 14;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c198); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c199();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 18) === peg$c200) {\n                  s1 = peg$c200;\n                  peg$currPos += 18;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c201); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c202();\n                }\n                s0 = s1;\n              }\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsebool() {\n      var s0, s1;\n\n      var key    = peg$currPos * 204 + 103,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseTRUE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseYES();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseON();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c203();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseFALSE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseNO();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseOFF();\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c204();\n        }\n        s0 = s1;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseNumbers() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 104,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c205) {\n        s1 = peg$c205;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c206); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = [];\n        s4 = peg$parsebit();\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsebit();\n          }\n        } else {\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s3 = input.substring(s2, peg$currPos);\n        }\n        s2 = s3;\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c207(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c208) {\n          s1 = peg$c208;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c209); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = [];\n          s4 = peg$parseoctalDigit();\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parseoctalDigit();\n            }\n          } else {\n            s3 = peg$c0;\n          }\n          if (s3 !== peg$FAILED) {\n            s3 = input.substring(s2, peg$currPos);\n          }\n          s2 = s3;\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c210(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c211) {\n            s1 = peg$c211;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c212); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = [];\n            s4 = peg$parsehexDigit();\n            if (s4 !== peg$FAILED) {\n              while (s4 !== peg$FAILED) {\n                s3.push(s4);\n                s4 = peg$parsehexDigit();\n              }\n            } else {\n              s3 = peg$c0;\n            }\n            if (s3 !== peg$FAILED) {\n              s3 = input.substring(s2, peg$currPos);\n            }\n            s2 = s3;\n            if (s2 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c213(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsedecimal();\n            if (s1 !== peg$FAILED) {\n              if (peg$c214.test(input.charAt(peg$currPos))) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c215); }\n              }\n              if (s2 !== peg$FAILED) {\n                if (peg$c216.test(input.charAt(peg$currPos))) {\n                  s3 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c217); }\n                }\n                if (s3 === peg$FAILED) {\n                  s3 = peg$c1;\n                }\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parsedecimal();\n                  if (s4 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c218(s1, s2, s3, s4);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsedecimal();\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsedecimal() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      var key    = peg$currPos * 204 + 105,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseinteger();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s4 = peg$c94;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c95); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsedecimalDigit();\n          if (s6 !== peg$FAILED) {\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsedecimalDigit();\n            }\n          } else {\n            s5 = peg$c0;\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = peg$c1;\n        }\n        if (s3 !== peg$FAILED) {\n          s3 = input.substring(s2, peg$currPos);\n        }\n        s2 = s3;\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c219(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseinteger() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 106,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (input.charCodeAt(peg$currPos) === 48) {\n        s0 = peg$c220;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c221); }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (peg$c222.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c223); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parsedecimalDigit();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsedecimalDigit();\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$c0;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n        if (s1 !== peg$FAILED) {\n          s1 = input.substring(s0, peg$currPos);\n        }\n        s0 = s1;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsedecimalDigit() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 107,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (peg$c224.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c225); }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsehexDigit() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 108,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (peg$c226.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c227); }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseoctalDigit() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 109,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (peg$c228.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c229); }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsebit() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 110,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (peg$c230.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c231); }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsestring() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      var key    = peg$currPos * 204 + 111,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c232) {\n        s1 = peg$c232;\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c233); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsestringData();\n        if (s3 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s3 = peg$c234;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c235); }\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$currPos;\n            s4 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 34) {\n              s5 = peg$c236;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c237); }\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c236;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c237); }\n              }\n              if (s6 === peg$FAILED) {\n                s6 = peg$c1;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                peg$silentFails++;\n                if (input.charCodeAt(peg$currPos) === 34) {\n                  s8 = peg$c236;\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                }\n                peg$silentFails--;\n                if (s8 === peg$FAILED) {\n                  s7 = peg$c6;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$c0;\n                }\n                if (s7 !== peg$FAILED) {\n                  s5 = [s5, s6, s7];\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c0;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$c0;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n            if (s4 !== peg$FAILED) {\n              s4 = input.substring(s3, peg$currPos);\n            }\n            s3 = s4;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parsestringData();\n            if (s3 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 39) {\n                s3 = peg$c234;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c235); }\n              }\n              if (s3 === peg$FAILED) {\n                s3 = peg$currPos;\n                s4 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 34) {\n                  s5 = peg$c236;\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                }\n                if (s5 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 34) {\n                    s6 = peg$c236;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                  }\n                  if (s6 === peg$FAILED) {\n                    s6 = peg$c1;\n                  }\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$currPos;\n                    peg$silentFails++;\n                    if (input.charCodeAt(peg$currPos) === 34) {\n                      s8 = peg$c236;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                    }\n                    peg$silentFails--;\n                    if (s8 === peg$FAILED) {\n                      s7 = peg$c6;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$c0;\n                    }\n                    if (s7 !== peg$FAILED) {\n                      s5 = [s5, s6, s7];\n                      s4 = s5;\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c0;\n                }\n                if (s4 !== peg$FAILED) {\n                  s4 = input.substring(s3, peg$currPos);\n                }\n                s3 = s4;\n              }\n            }\n          }\n        } else {\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 3) === peg$c232) {\n            s3 = peg$c232;\n            peg$currPos += 3;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c233); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c238(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 3) === peg$c239) {\n          s1 = peg$c239;\n          peg$currPos += 3;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c240); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parsestringData();\n          if (s3 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 34) {\n              s3 = peg$c236;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c237); }\n            }\n            if (s3 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 35) {\n                s3 = peg$c241;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c242); }\n              }\n              if (s3 === peg$FAILED) {\n                s3 = peg$currPos;\n                s4 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 39) {\n                  s5 = peg$c234;\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c235); }\n                }\n                if (s5 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 39) {\n                    s6 = peg$c234;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c235); }\n                  }\n                  if (s6 === peg$FAILED) {\n                    s6 = peg$c1;\n                  }\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$currPos;\n                    peg$silentFails++;\n                    if (input.charCodeAt(peg$currPos) === 39) {\n                      s8 = peg$c234;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c235); }\n                    }\n                    peg$silentFails--;\n                    if (s8 === peg$FAILED) {\n                      s7 = peg$c6;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$c0;\n                    }\n                    if (s7 !== peg$FAILED) {\n                      s5 = [s5, s6, s7];\n                      s4 = s5;\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s4;\n                    s4 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$c0;\n                }\n                if (s4 !== peg$FAILED) {\n                  s4 = input.substring(s3, peg$currPos);\n                }\n                s3 = s4;\n              }\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n              s2.push(s3);\n              s3 = peg$parsestringData();\n              if (s3 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 34) {\n                  s3 = peg$c236;\n                  peg$currPos++;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                }\n                if (s3 === peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 35) {\n                    s3 = peg$c241;\n                    peg$currPos++;\n                  } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c242); }\n                  }\n                  if (s3 === peg$FAILED) {\n                    s3 = peg$currPos;\n                    s4 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 39) {\n                      s5 = peg$c234;\n                      peg$currPos++;\n                    } else {\n                      s5 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c235); }\n                    }\n                    if (s5 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 39) {\n                        s6 = peg$c234;\n                        peg$currPos++;\n                      } else {\n                        s6 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c235); }\n                      }\n                      if (s6 === peg$FAILED) {\n                        s6 = peg$c1;\n                      }\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$currPos;\n                        peg$silentFails++;\n                        if (input.charCodeAt(peg$currPos) === 39) {\n                          s8 = peg$c234;\n                          peg$currPos++;\n                        } else {\n                          s8 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c235); }\n                        }\n                        peg$silentFails--;\n                        if (s8 === peg$FAILED) {\n                          s7 = peg$c6;\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$c0;\n                        }\n                        if (s7 !== peg$FAILED) {\n                          s5 = [s5, s6, s7];\n                          s4 = s5;\n                        } else {\n                          peg$currPos = s4;\n                          s4 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s4;\n                        s4 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s4;\n                      s4 = peg$c0;\n                    }\n                    if (s4 !== peg$FAILED) {\n                      s4 = input.substring(s3, peg$currPos);\n                    }\n                    s3 = s4;\n                  }\n                }\n              }\n            }\n          } else {\n            s2 = peg$c0;\n          }\n          if (s2 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c239) {\n              s3 = peg$c239;\n              peg$currPos += 3;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c240); }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c238(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s1 = peg$c236;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c237); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$parsestringData();\n            if (s3 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 39) {\n                s3 = peg$c234;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c235); }\n              }\n            }\n            while (s3 !== peg$FAILED) {\n              s2.push(s3);\n              s3 = peg$parsestringData();\n              if (s3 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 39) {\n                  s3 = peg$c234;\n                  peg$currPos++;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c235); }\n                }\n              }\n            }\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s3 = peg$c236;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c237); }\n              }\n              if (s3 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c243(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s1 = peg$c234;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c235); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = [];\n              s3 = peg$parsestringData();\n              if (s3 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 34) {\n                  s3 = peg$c236;\n                  peg$currPos++;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                }\n                if (s3 === peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 35) {\n                    s3 = peg$c241;\n                    peg$currPos++;\n                  } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c242); }\n                  }\n                }\n              }\n              while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$parsestringData();\n                if (s3 === peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 34) {\n                    s3 = peg$c236;\n                    peg$currPos++;\n                  } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                  }\n                  if (s3 === peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 35) {\n                      s3 = peg$c241;\n                      peg$currPos++;\n                    } else {\n                      s3 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c242); }\n                    }\n                  }\n                }\n              }\n              if (s2 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 39) {\n                  s3 = peg$c234;\n                  peg$currPos++;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c235); }\n                }\n                if (s3 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c243(s2);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsestringData() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 112,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (peg$c244.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c245); }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseUnicodeEscapeSequence();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c246) {\n            s1 = peg$c246;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c247); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = peg$currPos;\n            s4 = peg$parsehexDigit();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsehexDigit();\n              if (s5 !== peg$FAILED) {\n                s4 = [s4, s5];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n            if (s3 !== peg$FAILED) {\n              s3 = input.substring(s2, peg$currPos);\n            }\n            s2 = s3;\n            if (s2 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c248(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c249) {\n              s1 = peg$c249;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c250); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$currPos;\n              peg$silentFails++;\n              s3 = peg$parsedecimalDigit();\n              peg$silentFails--;\n              if (s3 === peg$FAILED) {\n                s2 = peg$c6;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$c0;\n              }\n              if (s2 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c251();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c249) {\n                s1 = peg$c249;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c250); }\n              }\n              if (s1 !== peg$FAILED) {\n                s2 = peg$currPos;\n                peg$silentFails++;\n                s3 = peg$parsedecimalDigit();\n                peg$silentFails--;\n                if (s3 !== peg$FAILED) {\n                  peg$currPos = s2;\n                  s2 = peg$c6;\n                } else {\n                  s2 = peg$c0;\n                }\n                if (s2 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c252();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c253) {\n                  s1 = peg$c253;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c254); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c255();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c256) {\n                    s1 = peg$c256;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c257); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c258();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c259) {\n                      s1 = peg$c259;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c260); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$reportedPos = s0;\n                      s1 = peg$c261();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c262) {\n                        s1 = peg$c262;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c263); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c264();\n                      }\n                      s0 = s1;\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.substr(peg$currPos, 2) === peg$c265) {\n                          s1 = peg$c265;\n                          peg$currPos += 2;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c266); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$reportedPos = s0;\n                          s1 = peg$c267();\n                        }\n                        s0 = s1;\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          if (input.substr(peg$currPos, 2) === peg$c268) {\n                            s1 = peg$c268;\n                            peg$currPos += 2;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c269); }\n                          }\n                          if (s1 !== peg$FAILED) {\n                            peg$reportedPos = s0;\n                            s1 = peg$c270();\n                          }\n                          s0 = s1;\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 92) {\n                              s1 = peg$c271;\n                              peg$currPos++;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c272); }\n                            }\n                            if (s1 !== peg$FAILED) {\n                              if (input.length > peg$currPos) {\n                                s2 = input.charAt(peg$currPos);\n                                peg$currPos++;\n                              } else {\n                                s2 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c273); }\n                              }\n                              if (s2 !== peg$FAILED) {\n                                peg$reportedPos = s0;\n                                s1 = peg$c160(s2);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$c0;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$c0;\n                            }\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$currPos;\n                              if (input.charCodeAt(peg$currPos) === 35) {\n                                s1 = peg$c241;\n                                peg$currPos++;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c242); }\n                              }\n                              if (s1 !== peg$FAILED) {\n                                s2 = peg$currPos;\n                                peg$silentFails++;\n                                if (input.charCodeAt(peg$currPos) === 123) {\n                                  s3 = peg$c176;\n                                  peg$currPos++;\n                                } else {\n                                  s3 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c177); }\n                                }\n                                peg$silentFails--;\n                                if (s3 === peg$FAILED) {\n                                  s2 = peg$c6;\n                                } else {\n                                  peg$currPos = s2;\n                                  s2 = peg$c0;\n                                }\n                                if (s2 !== peg$FAILED) {\n                                  peg$reportedPos = s0;\n                                  s1 = peg$c160(s1);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$c0;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$c0;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseinterpolation() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n      var key    = peg$currPos * 204 + 113,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c232) {\n        s1 = peg$c232;\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c233); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = [];\n        s5 = peg$parsestringData();\n        if (s5 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s5 = peg$c234;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c235); }\n          }\n          if (s5 === peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 34) {\n              s7 = peg$c236;\n              peg$currPos++;\n            } else {\n              s7 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c237); }\n            }\n            if (s7 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s8 = peg$c236;\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c237); }\n              }\n              if (s8 === peg$FAILED) {\n                s8 = peg$c1;\n              }\n              if (s8 !== peg$FAILED) {\n                s9 = peg$currPos;\n                peg$silentFails++;\n                if (input.charCodeAt(peg$currPos) === 34) {\n                  s10 = peg$c236;\n                  peg$currPos++;\n                } else {\n                  s10 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                }\n                peg$silentFails--;\n                if (s10 === peg$FAILED) {\n                  s9 = peg$c6;\n                } else {\n                  peg$currPos = s9;\n                  s9 = peg$c0;\n                }\n                if (s9 !== peg$FAILED) {\n                  s7 = [s7, s8, s9];\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$c0;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$c0;\n              }\n            } else {\n              peg$currPos = s6;\n              s6 = peg$c0;\n            }\n            if (s6 !== peg$FAILED) {\n              s6 = input.substring(s5, peg$currPos);\n            }\n            s5 = s6;\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsestringData();\n            if (s5 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 39) {\n                s5 = peg$c234;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c235); }\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$currPos;\n                s6 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 34) {\n                  s7 = peg$c236;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 34) {\n                    s8 = peg$c236;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = peg$c1;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    peg$silentFails++;\n                    if (input.charCodeAt(peg$currPos) === 34) {\n                      s10 = peg$c236;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                    }\n                    peg$silentFails--;\n                    if (s10 === peg$FAILED) {\n                      s9 = peg$c6;\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$c0;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s7 = [s7, s8, s9];\n                      s6 = s7;\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$c0;\n                }\n                if (s6 !== peg$FAILED) {\n                  s6 = input.substring(s5, peg$currPos);\n                }\n                s5 = s6;\n              }\n            }\n          }\n        } else {\n          s4 = peg$c0;\n        }\n        if (s4 !== peg$FAILED) {\n          peg$reportedPos = s3;\n          s4 = peg$c243(s4);\n        }\n        s3 = s4;\n        if (s3 === peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c274) {\n            s4 = peg$c274;\n            peg$currPos += 2;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c275); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseexpression();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 125) {\n                    s8 = peg$c178;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c179); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$reportedPos = s3;\n                    s4 = peg$c9(s6);\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = [];\n            s5 = peg$parsestringData();\n            if (s5 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 39) {\n                s5 = peg$c234;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c235); }\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$currPos;\n                s6 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 34) {\n                  s7 = peg$c236;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 34) {\n                    s8 = peg$c236;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = peg$c1;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    peg$silentFails++;\n                    if (input.charCodeAt(peg$currPos) === 34) {\n                      s10 = peg$c236;\n                      peg$currPos++;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                    }\n                    peg$silentFails--;\n                    if (s10 === peg$FAILED) {\n                      s9 = peg$c6;\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$c0;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s7 = [s7, s8, s9];\n                      s6 = s7;\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$c0;\n                }\n                if (s6 !== peg$FAILED) {\n                  s6 = input.substring(s5, peg$currPos);\n                }\n                s5 = s6;\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              while (s5 !== peg$FAILED) {\n                s4.push(s5);\n                s5 = peg$parsestringData();\n                if (s5 === peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 39) {\n                    s5 = peg$c234;\n                    peg$currPos++;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c235); }\n                  }\n                  if (s5 === peg$FAILED) {\n                    s5 = peg$currPos;\n                    s6 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 34) {\n                      s7 = peg$c236;\n                      peg$currPos++;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 34) {\n                        s8 = peg$c236;\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                      }\n                      if (s8 === peg$FAILED) {\n                        s8 = peg$c1;\n                      }\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$currPos;\n                        peg$silentFails++;\n                        if (input.charCodeAt(peg$currPos) === 34) {\n                          s10 = peg$c236;\n                          peg$currPos++;\n                        } else {\n                          s10 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c237); }\n                        }\n                        peg$silentFails--;\n                        if (s10 === peg$FAILED) {\n                          s9 = peg$c6;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$c0;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s7 = [s7, s8, s9];\n                          s6 = s7;\n                        } else {\n                          peg$currPos = s6;\n                          s6 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s6;\n                        s6 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$c0;\n                    }\n                    if (s6 !== peg$FAILED) {\n                      s6 = input.substring(s5, peg$currPos);\n                    }\n                    s5 = s6;\n                  }\n                }\n              }\n            } else {\n              s4 = peg$c0;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s3;\n              s4 = peg$c243(s4);\n            }\n            s3 = s4;\n            if (s3 === peg$FAILED) {\n              s3 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c274) {\n                s4 = peg$c274;\n                peg$currPos += 2;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c275); }\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parse_();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parseexpression();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parse_();\n                    if (s7 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 125) {\n                        s8 = peg$c178;\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c179); }\n                      }\n                      if (s8 !== peg$FAILED) {\n                        peg$reportedPos = s3;\n                        s4 = peg$c9(s6);\n                        s3 = s4;\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            }\n          }\n        } else {\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 3) === peg$c232) {\n            s3 = peg$c232;\n            peg$currPos += 3;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c233); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c276(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s1 = peg$c236;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c237); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$currPos;\n          s4 = [];\n          s5 = peg$parsestringData();\n          if (s5 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s5 = peg$c234;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c235); }\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parsestringData();\n              if (s5 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 39) {\n                  s5 = peg$c234;\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c235); }\n                }\n              }\n            }\n          } else {\n            s4 = peg$c0;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$reportedPos = s3;\n            s4 = peg$c243(s4);\n          }\n          s3 = s4;\n          if (s3 === peg$FAILED) {\n            s3 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c274) {\n              s4 = peg$c274;\n              peg$currPos += 2;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c275); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseexpression();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 125) {\n                      s8 = peg$c178;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c179); }\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$reportedPos = s3;\n                      s4 = peg$c9(s6);\n                      s3 = s4;\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n              s2.push(s3);\n              s3 = peg$currPos;\n              s4 = [];\n              s5 = peg$parsestringData();\n              if (s5 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 39) {\n                  s5 = peg$c234;\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c235); }\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                while (s5 !== peg$FAILED) {\n                  s4.push(s5);\n                  s5 = peg$parsestringData();\n                  if (s5 === peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 39) {\n                      s5 = peg$c234;\n                      peg$currPos++;\n                    } else {\n                      s5 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c235); }\n                    }\n                  }\n                }\n              } else {\n                s4 = peg$c0;\n              }\n              if (s4 !== peg$FAILED) {\n                peg$reportedPos = s3;\n                s4 = peg$c243(s4);\n              }\n              s3 = s4;\n              if (s3 === peg$FAILED) {\n                s3 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c274) {\n                  s4 = peg$c274;\n                  peg$currPos += 2;\n                } else {\n                  s4 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c275); }\n                }\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parse_();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parseexpression();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parse_();\n                      if (s7 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 125) {\n                          s8 = peg$c178;\n                          peg$currPos++;\n                        } else {\n                          s8 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c179); }\n                        }\n                        if (s8 !== peg$FAILED) {\n                          peg$reportedPos = s3;\n                          s4 = peg$c9(s6);\n                          s3 = s4;\n                        } else {\n                          peg$currPos = s3;\n                          s3 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              }\n            }\n          } else {\n            s2 = peg$c0;\n          }\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 34) {\n              s3 = peg$c236;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c237); }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c277(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseregexp() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      var key    = peg$currPos * 204 + 114,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c278) {\n        s1 = peg$c278;\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c279); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = [];\n        if (peg$c280.test(input.charAt(peg$currPos))) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c281); }\n        }\n        if (s5 !== peg$FAILED) {\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            if (peg$c280.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c281); }\n            }\n          }\n        } else {\n          s4 = peg$c0;\n        }\n        if (s4 !== peg$FAILED) {\n          peg$reportedPos = s3;\n          s4 = peg$c282();\n        }\n        s3 = s4;\n        if (s3 === peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          s5 = [];\n          if (peg$c283.test(input.charAt(peg$currPos))) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c284); }\n          }\n          if (s6 !== peg$FAILED) {\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              if (peg$c283.test(input.charAt(peg$currPos))) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c284); }\n              }\n            }\n          } else {\n            s5 = peg$c0;\n          }\n          if (s5 !== peg$FAILED) {\n            s5 = input.substring(s4, peg$currPos);\n          }\n          s4 = s5;\n          if (s4 !== peg$FAILED) {\n            peg$reportedPos = s3;\n            s4 = peg$c285(s4);\n          }\n          s3 = s4;\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsehereregexpData();\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = [];\n            if (peg$c280.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c281); }\n            }\n            if (s5 !== peg$FAILED) {\n              while (s5 !== peg$FAILED) {\n                s4.push(s5);\n                if (peg$c280.test(input.charAt(peg$currPos))) {\n                  s5 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c281); }\n                }\n              }\n            } else {\n              s4 = peg$c0;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s3;\n              s4 = peg$c282();\n            }\n            s3 = s4;\n            if (s3 === peg$FAILED) {\n              s3 = peg$currPos;\n              s4 = peg$currPos;\n              s5 = [];\n              if (peg$c283.test(input.charAt(peg$currPos))) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c284); }\n              }\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  if (peg$c283.test(input.charAt(peg$currPos))) {\n                    s6 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c284); }\n                  }\n                }\n              } else {\n                s5 = peg$c0;\n              }\n              if (s5 !== peg$FAILED) {\n                s5 = input.substring(s4, peg$currPos);\n              }\n              s4 = s5;\n              if (s4 !== peg$FAILED) {\n                peg$reportedPos = s3;\n                s4 = peg$c285(s4);\n              }\n              s3 = s4;\n              if (s3 === peg$FAILED) {\n                s3 = peg$parsehereregexpData();\n              }\n            }\n          }\n        } else {\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 3) === peg$c278) {\n            s3 = peg$c278;\n            peg$currPos += 3;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c279); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            if (peg$c286.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c287); }\n            }\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              if (peg$c286.test(input.charAt(peg$currPos))) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c287); }\n              }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c288(s2, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 47) {\n          s1 = peg$c289;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c290); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = [];\n          s4 = peg$parseregexpData();\n          if (s4 === peg$FAILED) {\n            s4 = [];\n            if (peg$c291.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c292); }\n            }\n            if (s5 !== peg$FAILED) {\n              while (s5 !== peg$FAILED) {\n                s4.push(s5);\n                if (peg$c291.test(input.charAt(peg$currPos))) {\n                  s5 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c292); }\n                }\n              }\n            } else {\n              s4 = peg$c0;\n            }\n          }\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parseregexpData();\n            if (s4 === peg$FAILED) {\n              s4 = [];\n              if (peg$c291.test(input.charAt(peg$currPos))) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c292); }\n              }\n              if (s5 !== peg$FAILED) {\n                while (s5 !== peg$FAILED) {\n                  s4.push(s5);\n                  if (peg$c291.test(input.charAt(peg$currPos))) {\n                    s5 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c292); }\n                  }\n                }\n              } else {\n                s4 = peg$c0;\n              }\n            }\n          }\n          if (s3 !== peg$FAILED) {\n            s3 = input.substring(s2, peg$currPos);\n          }\n          s2 = s3;\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 47) {\n              s3 = peg$c289;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c290); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = [];\n              if (peg$c286.test(input.charAt(peg$currPos))) {\n                s5 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c287); }\n              }\n              while (s5 !== peg$FAILED) {\n                s4.push(s5);\n                if (peg$c286.test(input.charAt(peg$currPos))) {\n                  s5 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c287); }\n                }\n              }\n              if (s4 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c293(s2, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseregexpData() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 115,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c100;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c101); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c294.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c295); }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseregexpData();\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c294.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c295); }\n          }\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseregexpData();\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s3 = peg$c102;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c103); }\n          }\n          if (s3 !== peg$FAILED) {\n            s1 = [s1, s2, s3];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 92) {\n          s1 = peg$c271;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c272); }\n        }\n        if (s1 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c273); }\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsehereregexpData() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      var key    = peg$currPos * 204 + 116,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c100;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c101); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parsehereregexpData();\n        if (s4 !== peg$FAILED) {\n          peg$reportedPos = s3;\n          s4 = peg$c296(s4);\n        }\n        s3 = s4;\n        if (s3 === peg$FAILED) {\n          s3 = peg$currPos;\n          if (peg$c297.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c298); }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$reportedPos = s3;\n            s4 = peg$c299(s4);\n          }\n          s3 = s4;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parsehereregexpData();\n          if (s4 !== peg$FAILED) {\n            peg$reportedPos = s3;\n            s4 = peg$c296(s4);\n          }\n          s3 = s4;\n          if (s3 === peg$FAILED) {\n            s3 = peg$currPos;\n            if (peg$c297.test(input.charAt(peg$currPos))) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c298); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s3;\n              s4 = peg$c299(s4);\n            }\n            s3 = s4;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s3 = peg$c102;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c103); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c300(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 92) {\n          s3 = peg$c271;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c272); }\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c273); }\n          }\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c0;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          s2 = input.substring(s1, peg$currPos);\n        }\n        s1 = s2;\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c301(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$currPos;\n          s2 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 47) {\n            s3 = peg$c289;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c290); }\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 47) {\n              s4 = peg$c289;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c290); }\n            }\n            if (s4 === peg$FAILED) {\n              s4 = peg$c1;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              peg$silentFails++;\n              if (input.charCodeAt(peg$currPos) === 47) {\n                s6 = peg$c289;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c290); }\n              }\n              peg$silentFails--;\n              if (s6 === peg$FAILED) {\n                s5 = peg$c6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n              if (s5 !== peg$FAILED) {\n                s3 = [s3, s4, s5];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$c0;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$c0;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c0;\n          }\n          if (s2 !== peg$FAILED) {\n            s2 = input.substring(s1, peg$currPos);\n          }\n          s1 = s2;\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c302(s1);\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 35) {\n              s1 = peg$c241;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c242); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$currPos;\n              peg$silentFails++;\n              if (input.charCodeAt(peg$currPos) === 123) {\n                s3 = peg$c176;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c177); }\n              }\n              peg$silentFails--;\n              if (s3 === peg$FAILED) {\n                s2 = peg$c6;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$c0;\n              }\n              if (s2 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c303(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c274) {\n                s1 = peg$c274;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c275); }\n              }\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parse_();\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parseexpression();\n                  if (s3 !== peg$FAILED) {\n                    s4 = peg$parse_();\n                    if (s4 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 125) {\n                        s5 = peg$c178;\n                        peg$currPos++;\n                      } else {\n                        s5 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c179); }\n                      }\n                      if (s5 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c304(s3);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsethrow() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 117,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseTHROW();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsesecondaryExpression();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c305(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsereturn() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 118,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseRETURN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsesecondaryExpression();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c306(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsecontinue() {\n      var s0, s1;\n\n      var key    = peg$currPos * 204 + 119,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseCONTINUE();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c307();\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsebreak() {\n      var s0, s1;\n\n      var key    = peg$currPos * 204 + 120,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseBREAK();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c308();\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsedebugger() {\n      var s0, s1;\n\n      var key    = peg$currPos * 204 + 121,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseDEBUGGER();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c309();\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseundefined() {\n      var s0, s1;\n\n      var key    = peg$currPos * 204 + 122,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseUNDEFINED();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c310();\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsenull() {\n      var s0, s1;\n\n      var key    = peg$currPos * 204 + 123,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseNULL();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c311();\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseunassignable() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 124,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9) === peg$c312) {\n        s1 = peg$c312;\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c313); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4) === peg$c314) {\n          s1 = peg$c314;\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c315); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        peg$silentFails++;\n        s3 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n          s2 = peg$c6;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseCompoundAssignable() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 204 + 125,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsememberAccess();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        peg$silentFails++;\n        s2 = peg$parseunassignable();\n        peg$silentFails--;\n        if (s2 === peg$FAILED) {\n          s1 = peg$c6;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseidentifier();\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c316(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseAssignable() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 204 + 126,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsememberAccess();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        peg$silentFails++;\n        s2 = peg$parseunassignable();\n        peg$silentFails--;\n        if (s2 === peg$FAILED) {\n          s1 = peg$c6;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseidentifier();\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c316(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsepositionalDestructuring();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsenamedDestructuring();\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsepositionalDestructuring() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 127,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c100;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c101); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsepositionalDestructuringBody();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseTERMINATOR();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 93) {\n                s5 = peg$c102;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c103); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c173(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsepositionalDestructuringBody() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 128,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseTERMINDENT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsepositionalDestructuringMemberList();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDEDENT();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c174(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsepositionalDestructuringMemberList();\n          if (s2 === peg$FAILED) {\n            s2 = peg$c1;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c175(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsepositionalDestructuringMemberList() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      var key    = peg$currPos * 204 + 129,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsepositionalDestructuringMember();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s5 = peg$c13;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse_();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsepositionalDestructuringMember();\n              if (s7 !== peg$FAILED) {\n                peg$reportedPos = s3;\n                s4 = peg$c9(s7);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse_();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s5 = peg$c13;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c14); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse_();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsepositionalDestructuringMember();\n                if (s7 !== peg$FAILED) {\n                  peg$reportedPos = s3;\n                  s4 = peg$c9(s7);\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c81(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsepositionalDestructuringMember() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 130,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parserest();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseAssignable();\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsenamedDestructuring() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 131,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 123) {\n        s1 = peg$c176;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c177); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsenamedDestructuringBody();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseTERMINATOR();\n          if (s3 === peg$FAILED) {\n            s3 = peg$c1;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 125) {\n                s5 = peg$c178;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c179); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c180(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsenamedDestructuringBody() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 132,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseTERMINDENT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsenamedDestructuringMemberList();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDEDENT();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c174(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parse_();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsenamedDestructuringMemberList();\n          if (s2 === peg$FAILED) {\n            s2 = peg$c1;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c175(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsenamedDestructuringMemberList() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      var key    = peg$currPos * 204 + 133,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsenamedDestructuringMember();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parseTERMINATOR();\n        if (s4 === peg$FAILED) {\n          s4 = peg$c1;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s6 = peg$c13;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c14); }\n            }\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseTERMINATOR();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseTERMINATOR();\n              if (s7 === peg$FAILED) {\n                s7 = peg$c1;\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse_();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsenamedDestructuringMember();\n                  if (s9 !== peg$FAILED) {\n                    peg$reportedPos = s3;\n                    s4 = peg$c9(s9);\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parseTERMINATOR();\n          if (s4 === peg$FAILED) {\n            s4 = peg$c1;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s6 = peg$c13;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c14); }\n              }\n              if (s6 === peg$FAILED) {\n                s6 = peg$parseTERMINATOR();\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseTERMINATOR();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$c1;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse_();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsenamedDestructuringMember();\n                    if (s9 !== peg$FAILED) {\n                      peg$reportedPos = s3;\n                      s4 = peg$c9(s9);\n                      s3 = s4;\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$c0;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c0;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c0;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c81(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsenamedDestructuringMember() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 134,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseObjectInitialiserKeys();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s3 = peg$c148;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c149); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseAssignable();\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c184(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecontextVar();\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c317(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$currPos;\n          peg$silentFails++;\n          s2 = peg$parseunassignable();\n          peg$silentFails--;\n          if (s2 === peg$FAILED) {\n            s1 = peg$c6;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$c0;\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseidentifier();\n            if (s2 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c318(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseidentifier() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 204 + 135,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      s2 = peg$parsereserved();\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = peg$c6;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseidentifierName();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c183(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseidentifierName() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 136,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseidentifierStart();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parseidentifierPart();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parseidentifierPart();\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseidentifierStart() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 137,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parseUnicodeLetter();\n      if (s0 === peg$FAILED) {\n        if (peg$c319.test(input.charAt(peg$currPos))) {\n          s0 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c320); }\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseUnicodeEscapeSequence();\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseidentifierPart() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 138,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parseidentifierStart();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseUnicodeCombiningMark();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseUnicodeDigit();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseUnicodeConnectorPunctuation();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseZWNJ();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseZWJ();\n              }\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parse__() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      var key    = peg$currPos * 204 + 139,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = [];\n      s3 = peg$parsewhitespace();\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsewhitespace();\n        }\n      } else {\n        s2 = peg$c0;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parseblockComment();\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsewhitespace();\n          if (s6 !== peg$FAILED) {\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsewhitespace();\n            }\n          } else {\n            s5 = peg$c0;\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c0;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 === peg$FAILED) {\n          s3 = peg$c1;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parse_() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 140,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parse__();\n      if (s0 === peg$FAILED) {\n        s0 = peg$c1;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsecomment() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 141,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parseblockComment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsesingleLineComment();\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsesingleLineComment() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      var key    = peg$currPos * 204 + 142,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 35) {\n        s2 = peg$c241;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c242); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$currPos;\n        peg$silentFails++;\n        s6 = peg$parseTERM();\n        peg$silentFails--;\n        if (s6 === peg$FAILED) {\n          s5 = peg$c6;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$c0;\n        }\n        if (s5 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c273); }\n          }\n          if (s6 !== peg$FAILED) {\n            s5 = [s5, s6];\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c0;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$c0;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$currPos;\n          peg$silentFails++;\n          s6 = peg$parseTERM();\n          peg$silentFails--;\n          if (s6 === peg$FAILED) {\n            s5 = peg$c6;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$c0;\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c273); }\n            }\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c0;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c0;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseblockComment() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n      var key    = peg$currPos * 204 + 143,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c321) {\n        s2 = peg$c321;\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c322); }\n      }\n      if (s2 !== peg$FAILED) {\n        if (peg$c323.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c324); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          if (peg$c323.test(input.charAt(peg$currPos))) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c324); }\n          }\n          if (s5 === peg$FAILED) {\n            s5 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 35) {\n              s6 = peg$c241;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c242); }\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 35) {\n                s7 = peg$c241;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c242); }\n              }\n              if (s7 === peg$FAILED) {\n                s7 = peg$c1;\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$currPos;\n                peg$silentFails++;\n                if (input.charCodeAt(peg$currPos) === 35) {\n                  s9 = peg$c241;\n                  peg$currPos++;\n                } else {\n                  s9 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c242); }\n                }\n                peg$silentFails--;\n                if (s9 === peg$FAILED) {\n                  s8 = peg$c6;\n                } else {\n                  peg$currPos = s8;\n                  s8 = peg$c0;\n                }\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$c0;\n            }\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            if (peg$c323.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c324); }\n            }\n            if (s5 === peg$FAILED) {\n              s5 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 35) {\n                s6 = peg$c241;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c242); }\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 35) {\n                  s7 = peg$c241;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c242); }\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = peg$c1;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$currPos;\n                  peg$silentFails++;\n                  if (input.charCodeAt(peg$currPos) === 35) {\n                    s9 = peg$c241;\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c242); }\n                  }\n                  peg$silentFails--;\n                  if (s9 === peg$FAILED) {\n                    s8 = peg$c6;\n                  } else {\n                    peg$currPos = s8;\n                    s8 = peg$c0;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s6 = [s6, s7, s8];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$c0;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$c0;\n              }\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c321) {\n              s5 = peg$c321;\n              peg$currPos += 3;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c322); }\n            }\n            if (s5 !== peg$FAILED) {\n              s2 = [s2, s3, s4, s5];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$c0;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$c0;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsewhitespace() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 144,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (peg$c325.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c326); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 13) {\n          s0 = peg$c327;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c328); }\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 92) {\n            s2 = peg$c271;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c272); }\n          }\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 13) {\n              s3 = peg$c327;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c328); }\n            }\n            if (s3 === peg$FAILED) {\n              s3 = peg$c1;\n            }\n            if (s3 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 10) {\n                s4 = peg$c329;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c330); }\n              }\n              if (s4 !== peg$FAILED) {\n                s2 = [s2, s3, s4];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$c0;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$c0;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$c0;\n          }\n          if (s1 !== peg$FAILED) {\n            s1 = input.substring(s0, peg$currPos);\n          }\n          s0 = s1;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseINDENT() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 204 + 145,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61423) {\n          s2 = peg$c331;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c332); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c333(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseDEDENT() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 146,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$currPos;\n      s3 = peg$parseTERMINATOR();\n      if (s3 === peg$FAILED) {\n        s3 = peg$c1;\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parse_();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c0;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$c0;\n      }\n      if (s2 !== peg$FAILED) {\n        s2 = input.substring(s1, peg$currPos);\n      }\n      s1 = s2;\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 61438) {\n          s2 = peg$c334;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c335); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c333(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseTERM() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 147,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 13) {\n        s2 = peg$c327;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c328); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = peg$c1;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 10) {\n          s3 = peg$c329;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c330); }\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 61439) {\n          s1 = peg$c336;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c337); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c338();\n        }\n        s0 = s1;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseTERMINATOR() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      var key    = peg$currPos * 204 + 148,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$currPos;\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsecomment();\n        if (s4 === peg$FAILED) {\n          s4 = peg$c1;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseTERM();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseblockComment();\n            if (s6 === peg$FAILED) {\n              s6 = peg$c1;\n            }\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$c0;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c0;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c0;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$c0;\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$currPos;\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsecomment();\n            if (s4 === peg$FAILED) {\n              s4 = peg$c1;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseTERM();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseblockComment();\n                if (s6 === peg$FAILED) {\n                  s6 = peg$c1;\n                }\n                if (s6 !== peg$FAILED) {\n                  s3 = [s3, s4, s5, s6];\n                  s2 = s3;\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$c0;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$c0;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$c0;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c0;\n          }\n        }\n      } else {\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseTERMINDENT() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 149,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseTERMINATOR();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseINDENT();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseAND() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 150,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c339) {\n        s2 = peg$c339;\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c340); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseBREAK() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 151,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 5) === peg$c341) {\n        s2 = peg$c341;\n        peg$currPos += 5;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c342); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseBY() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 152,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c343) {\n        s2 = peg$c343;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c344); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseCATCH() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 153,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 5) === peg$c345) {\n        s2 = peg$c345;\n        peg$currPos += 5;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c346); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseCONTINUE() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 154,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 8) === peg$c347) {\n        s2 = peg$c347;\n        peg$currPos += 8;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c348); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseCLASS() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 155,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 5) === peg$c349) {\n        s2 = peg$c349;\n        peg$currPos += 5;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c350); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseDELETE() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 156,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c351) {\n        s2 = peg$c351;\n        peg$currPos += 6;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c352); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseDEBUGGER() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 157,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 8) === peg$c353) {\n        s2 = peg$c353;\n        peg$currPos += 8;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c354); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseDO() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 158,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c355) {\n        s2 = peg$c355;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c356); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseELSE() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 159,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c357) {\n        s2 = peg$c357;\n        peg$currPos += 4;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c358); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseEXTENDS() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 160,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 7) === peg$c359) {\n        s2 = peg$c359;\n        peg$currPos += 7;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c360); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseFALSE() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 161,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 5) === peg$c361) {\n        s2 = peg$c361;\n        peg$currPos += 5;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c362); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseFINALLY() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 162,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 7) === peg$c363) {\n        s2 = peg$c363;\n        peg$currPos += 7;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c364); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseFOR() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 163,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c365) {\n        s2 = peg$c365;\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c366); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseIF() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 164,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c367) {\n        s2 = peg$c367;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c368); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseIN() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 165,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c369) {\n        s2 = peg$c369;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c370); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseINSTANCEOF() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 166,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 10) === peg$c371) {\n        s2 = peg$c371;\n        peg$currPos += 10;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c372); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseIS() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 167,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c373) {\n        s2 = peg$c373;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c374); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseISNT() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 168,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c375) {\n        s2 = peg$c375;\n        peg$currPos += 4;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c376); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseLOOP() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 169,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c377) {\n        s2 = peg$c377;\n        peg$currPos += 4;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c378); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseNEW() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 170,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c379) {\n        s2 = peg$c379;\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c380); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseNO() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 171,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c381) {\n        s2 = peg$c381;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c382); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseNOT() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 172,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c383) {\n        s2 = peg$c383;\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c384); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseNULL() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 173,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c385) {\n        s2 = peg$c385;\n        peg$currPos += 4;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c386); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseOF() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 174,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c387) {\n        s2 = peg$c387;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c388); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseOFF() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 175,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c389) {\n        s2 = peg$c389;\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c390); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseON() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 176,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c391) {\n        s2 = peg$c391;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c392); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseOR() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 177,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c393) {\n        s2 = peg$c393;\n        peg$currPos += 2;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c394); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseOWN() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 178,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c395) {\n        s2 = peg$c395;\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c396); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseRETURN() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 179,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c397) {\n        s2 = peg$c397;\n        peg$currPos += 6;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c398); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseSWITCH() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 180,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c399) {\n        s2 = peg$c399;\n        peg$currPos += 6;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c400); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseTHEN() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 181,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c401) {\n        s2 = peg$c401;\n        peg$currPos += 4;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c402); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseTHIS() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 182,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c403) {\n        s2 = peg$c403;\n        peg$currPos += 4;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c404); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseTHROW() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 183,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 5) === peg$c405) {\n        s2 = peg$c405;\n        peg$currPos += 5;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c406); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseTRUE() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 184,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c407) {\n        s2 = peg$c407;\n        peg$currPos += 4;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c408); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseTRY() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 185,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c409) {\n        s2 = peg$c409;\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c410); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseTYPEOF() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 186,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c411) {\n        s2 = peg$c411;\n        peg$currPos += 6;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c412); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseUNDEFINED() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 187,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 9) === peg$c413) {\n        s2 = peg$c413;\n        peg$currPos += 9;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c414); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseUNLESS() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 188,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c415) {\n        s2 = peg$c415;\n        peg$currPos += 6;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c416); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseUNTIL() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 189,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 5) === peg$c417) {\n        s2 = peg$c417;\n        peg$currPos += 5;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c418); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseWHEN() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 190,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c419) {\n        s2 = peg$c419;\n        peg$currPos += 4;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c420); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseWHILE() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 191,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 5) === peg$c421) {\n        s2 = peg$c421;\n        peg$currPos += 5;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c422); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseYES() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 204 + 192,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c423) {\n        s2 = peg$c423;\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c424); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = peg$c6;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c0;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c0;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c0;\n      }\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseSharedKeywords() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 193,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c407) {\n        s1 = peg$c407;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c408); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 5) === peg$c361) {\n          s1 = peg$c361;\n          peg$currPos += 5;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c362); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4) === peg$c385) {\n            s1 = peg$c385;\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c386); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 4) === peg$c403) {\n              s1 = peg$c403;\n              peg$currPos += 4;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c404); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3) === peg$c379) {\n                s1 = peg$c379;\n                peg$currPos += 3;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c380); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 6) === peg$c351) {\n                  s1 = peg$c351;\n                  peg$currPos += 6;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c352); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 6) === peg$c411) {\n                    s1 = peg$c411;\n                    peg$currPos += 6;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c412); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 10) === peg$c371) {\n                      s1 = peg$c371;\n                      peg$currPos += 10;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c372); }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 2) === peg$c369) {\n                        s1 = peg$c369;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c370); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 6) === peg$c397) {\n                          s1 = peg$c397;\n                          peg$currPos += 6;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c398); }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 5) === peg$c405) {\n                            s1 = peg$c405;\n                            peg$currPos += 5;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c406); }\n                          }\n                          if (s1 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 5) === peg$c341) {\n                              s1 = peg$c341;\n                              peg$currPos += 5;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c342); }\n                            }\n                            if (s1 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 8) === peg$c347) {\n                                s1 = peg$c347;\n                                peg$currPos += 8;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c348); }\n                              }\n                              if (s1 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 8) === peg$c353) {\n                                  s1 = peg$c353;\n                                  peg$currPos += 8;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c354); }\n                                }\n                                if (s1 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 2) === peg$c367) {\n                                    s1 = peg$c367;\n                                    peg$currPos += 2;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c368); }\n                                  }\n                                  if (s1 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 4) === peg$c357) {\n                                      s1 = peg$c357;\n                                      peg$currPos += 4;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c358); }\n                                    }\n                                    if (s1 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 6) === peg$c399) {\n                                        s1 = peg$c399;\n                                        peg$currPos += 6;\n                                      } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c400); }\n                                      }\n                                      if (s1 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 3) === peg$c365) {\n                                          s1 = peg$c365;\n                                          peg$currPos += 3;\n                                        } else {\n                                          s1 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c366); }\n                                        }\n                                        if (s1 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 5) === peg$c421) {\n                                            s1 = peg$c421;\n                                            peg$currPos += 5;\n                                          } else {\n                                            s1 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c422); }\n                                          }\n                                          if (s1 === peg$FAILED) {\n                                            if (input.substr(peg$currPos, 2) === peg$c355) {\n                                              s1 = peg$c355;\n                                              peg$currPos += 2;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c356); }\n                                            }\n                                            if (s1 === peg$FAILED) {\n                                              if (input.substr(peg$currPos, 3) === peg$c409) {\n                                                s1 = peg$c409;\n                                                peg$currPos += 3;\n                                              } else {\n                                                s1 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c410); }\n                                              }\n                                              if (s1 === peg$FAILED) {\n                                                if (input.substr(peg$currPos, 5) === peg$c345) {\n                                                  s1 = peg$c345;\n                                                  peg$currPos += 5;\n                                                } else {\n                                                  s1 = peg$FAILED;\n                                                  if (peg$silentFails === 0) { peg$fail(peg$c346); }\n                                                }\n                                                if (s1 === peg$FAILED) {\n                                                  if (input.substr(peg$currPos, 7) === peg$c363) {\n                                                    s1 = peg$c363;\n                                                    peg$currPos += 7;\n                                                  } else {\n                                                    s1 = peg$FAILED;\n                                                    if (peg$silentFails === 0) { peg$fail(peg$c364); }\n                                                  }\n                                                  if (s1 === peg$FAILED) {\n                                                    if (input.substr(peg$currPos, 5) === peg$c349) {\n                                                      s1 = peg$c349;\n                                                      peg$currPos += 5;\n                                                    } else {\n                                                      s1 = peg$FAILED;\n                                                      if (peg$silentFails === 0) { peg$fail(peg$c350); }\n                                                    }\n                                                    if (s1 === peg$FAILED) {\n                                                      if (input.substr(peg$currPos, 7) === peg$c359) {\n                                                        s1 = peg$c359;\n                                                        peg$currPos += 7;\n                                                      } else {\n                                                        s1 = peg$FAILED;\n                                                        if (peg$silentFails === 0) { peg$fail(peg$c360); }\n                                                      }\n                                                      if (s1 === peg$FAILED) {\n                                                        if (input.substr(peg$currPos, 5) === peg$c425) {\n                                                          s1 = peg$c425;\n                                                          peg$currPos += 5;\n                                                        } else {\n                                                          s1 = peg$FAILED;\n                                                          if (peg$silentFails === 0) { peg$fail(peg$c426); }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        peg$silentFails++;\n        s3 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n          s2 = peg$c6;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseJSKeywords() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 194,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c427) {\n        s1 = peg$c427;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c428); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 7) === peg$c429) {\n          s1 = peg$c429;\n          peg$currPos += 7;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c430); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8) === peg$c431) {\n            s1 = peg$c431;\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c432); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c433) {\n              s1 = peg$c433;\n              peg$currPos += 3;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c434); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 4) === peg$c435) {\n                s1 = peg$c435;\n                peg$currPos += 4;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c436); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 4) === peg$c437) {\n                  s1 = peg$c437;\n                  peg$currPos += 4;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c438); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 5) === peg$c439) {\n                    s1 = peg$c439;\n                    peg$currPos += 5;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c440); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 3) === peg$c441) {\n                      s1 = peg$c441;\n                      peg$currPos += 3;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c442); }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 4) === peg$c443) {\n                        s1 = peg$c443;\n                        peg$currPos += 4;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c444); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 6) === peg$c445) {\n                          s1 = peg$c445;\n                          peg$currPos += 6;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c446); }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 6) === peg$c447) {\n                            s1 = peg$c447;\n                            peg$currPos += 6;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c448); }\n                          }\n                          if (s1 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 6) === peg$c449) {\n                              s1 = peg$c449;\n                              peg$currPos += 6;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c450); }\n                            }\n                            if (s1 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 10) === peg$c451) {\n                                s1 = peg$c451;\n                                peg$currPos += 10;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c452); }\n                              }\n                              if (s1 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 9) === peg$c453) {\n                                  s1 = peg$c453;\n                                  peg$currPos += 9;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c454); }\n                                }\n                                if (s1 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 7) === peg$c455) {\n                                    s1 = peg$c455;\n                                    peg$currPos += 7;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c456); }\n                                  }\n                                  if (s1 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 7) === peg$c457) {\n                                      s1 = peg$c457;\n                                      peg$currPos += 7;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c458); }\n                                    }\n                                    if (s1 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 9) === peg$c459) {\n                                        s1 = peg$c459;\n                                        peg$currPos += 9;\n                                      } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c460); }\n                                      }\n                                      if (s1 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 6) === peg$c461) {\n                                          s1 = peg$c461;\n                                          peg$currPos += 6;\n                                        } else {\n                                          s1 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c462); }\n                                        }\n                                        if (s1 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 6) === peg$c463) {\n                                            s1 = peg$c463;\n                                            peg$currPos += 6;\n                                          } else {\n                                            s1 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c464); }\n                                          }\n                                          if (s1 === peg$FAILED) {\n                                            if (input.substr(peg$currPos, 5) === peg$c465) {\n                                              s1 = peg$c465;\n                                              peg$currPos += 5;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c466); }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        peg$silentFails++;\n        s3 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n          s2 = peg$c6;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseCSKeywords() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 204 + 195,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9) === peg$c413) {\n        s1 = peg$c413;\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c414); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4) === peg$c401) {\n          s1 = peg$c401;\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c402); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6) === peg$c415) {\n            s1 = peg$c415;\n            peg$currPos += 6;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c416); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 5) === peg$c417) {\n              s1 = peg$c417;\n              peg$currPos += 5;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c418); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 4) === peg$c377) {\n                s1 = peg$c377;\n                peg$currPos += 4;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c378); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 3) === peg$c389) {\n                  s1 = peg$c389;\n                  peg$currPos += 3;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c390); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 2) === peg$c343) {\n                    s1 = peg$c343;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c344); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 4) === peg$c419) {\n                      s1 = peg$c419;\n                      peg$currPos += 4;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c420); }\n                    }\n                    if (s1 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 3) === peg$c339) {\n                        s1 = peg$c339;\n                        peg$currPos += 3;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c340); }\n                      }\n                      if (s1 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 2) === peg$c393) {\n                          s1 = peg$c393;\n                          peg$currPos += 2;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c394); }\n                        }\n                        if (s1 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 4) === peg$c375) {\n                            s1 = peg$c375;\n                            peg$currPos += 4;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c376); }\n                          }\n                          if (s1 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 2) === peg$c373) {\n                              s1 = peg$c373;\n                              peg$currPos += 2;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c374); }\n                            }\n                            if (s1 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 3) === peg$c383) {\n                                s1 = peg$c383;\n                                peg$currPos += 3;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c384); }\n                              }\n                              if (s1 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 3) === peg$c423) {\n                                  s1 = peg$c423;\n                                  peg$currPos += 3;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c424); }\n                                }\n                                if (s1 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 2) === peg$c381) {\n                                    s1 = peg$c381;\n                                    peg$currPos += 2;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c382); }\n                                  }\n                                  if (s1 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 2) === peg$c391) {\n                                      s1 = peg$c391;\n                                      peg$currPos += 2;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c392); }\n                                    }\n                                    if (s1 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 2) === peg$c387) {\n                                        s1 = peg$c387;\n                                        peg$currPos += 2;\n                                      } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c388); }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        peg$silentFails++;\n        s3 = peg$parseidentifierPart();\n        peg$silentFails--;\n        if (s3 === peg$FAILED) {\n          s2 = peg$c6;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c0;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsereserved() {\n      var s0, s1;\n\n      var key    = peg$currPos * 204 + 196,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsemacro();\n      if (s1 !== peg$FAILED) {\n        s1 = input.substring(s0, peg$currPos);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseSharedKeywords();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseCSKeywords();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseJSKeywords();\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseUnicodeEscapeSequence() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 204 + 197,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c467) {\n        s1 = peg$c467;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c468); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsehexDigit();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsehexDigit();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsehexDigit();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsehexDigit();\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c469(s2, s3, s4, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c0;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseUnicodeLetter() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 204 + 198,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (peg$c470.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c471); }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 55340) {\n          s1 = peg$c472;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c473); }\n        }\n        if (s1 !== peg$FAILED) {\n          if (peg$c474.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c475); }\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 55304) {\n            s1 = peg$c476;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c477); }\n          }\n          if (s1 !== peg$FAILED) {\n            if (peg$c478.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c479); }\n            }\n            if (s2 !== peg$FAILED) {\n              s1 = [s1, s2];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 55401) {\n              s1 = peg$c480;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c481); }\n            }\n            if (s1 !== peg$FAILED) {\n              if (peg$c482.test(input.charAt(peg$currPos))) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c483); }\n              }\n              if (s2 !== peg$FAILED) {\n                s1 = [s1, s2];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 55305) {\n                s1 = peg$c484;\n                peg$currPos++;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c485); }\n              }\n              if (s1 !== peg$FAILED) {\n                if (peg$c486.test(input.charAt(peg$currPos))) {\n                  s2 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s2 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c487); }\n                }\n                if (s2 !== peg$FAILED) {\n                  s1 = [s1, s2];\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 55349) {\n                  s1 = peg$c488;\n                  peg$currPos++;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c489); }\n                }\n                if (s1 !== peg$FAILED) {\n                  if (peg$c490.test(input.charAt(peg$currPos))) {\n                    s2 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c491); }\n                  }\n                  if (s2 !== peg$FAILED) {\n                    s1 = [s1, s2];\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 55300) {\n                    s1 = peg$c492;\n                    peg$currPos++;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c493); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    if (peg$c494.test(input.charAt(peg$currPos))) {\n                      s2 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s2 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c495); }\n                    }\n                    if (s2 !== peg$FAILED) {\n                      s1 = [s1, s2];\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c0;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 55296) {\n                      s1 = peg$c496;\n                      peg$currPos++;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c497); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      if (peg$c498.test(input.charAt(peg$currPos))) {\n                        s2 = input.charAt(peg$currPos);\n                        peg$currPos++;\n                      } else {\n                        s2 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c499); }\n                      }\n                      if (s2 !== peg$FAILED) {\n                        s1 = [s1, s2];\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c0;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c0;\n                    }\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.charCodeAt(peg$currPos) === 55308) {\n                        s1 = peg$c500;\n                        peg$currPos++;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c501); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        if (peg$c502.test(input.charAt(peg$currPos))) {\n                          s2 = input.charAt(peg$currPos);\n                          peg$currPos++;\n                        } else {\n                          s2 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c503); }\n                        }\n                        if (s2 !== peg$FAILED) {\n                          s1 = [s1, s2];\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c0;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c0;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 55297) {\n                          s1 = peg$c504;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c505); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          if (peg$c506.test(input.charAt(peg$currPos))) {\n                            s2 = input.charAt(peg$currPos);\n                            peg$currPos++;\n                          } else {\n                            s2 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c507); }\n                          }\n                          if (s2 !== peg$FAILED) {\n                            s1 = [s1, s2];\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$c0;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$c0;\n                        }\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 55406) {\n                            s1 = peg$c508;\n                            peg$currPos++;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c509); }\n                          }\n                          if (s1 !== peg$FAILED) {\n                            if (peg$c510.test(input.charAt(peg$currPos))) {\n                              s2 = input.charAt(peg$currPos);\n                              peg$currPos++;\n                            } else {\n                              s2 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c511); }\n                            }\n                            if (s2 !== peg$FAILED) {\n                              s1 = [s1, s2];\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$c0;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$c0;\n                          }\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 55299) {\n                              s1 = peg$c512;\n                              peg$currPos++;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c513); }\n                            }\n                            if (s1 !== peg$FAILED) {\n                              if (peg$c514.test(input.charAt(peg$currPos))) {\n                                s2 = input.charAt(peg$currPos);\n                                peg$currPos++;\n                              } else {\n                                s2 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c515); }\n                              }\n                              if (s2 !== peg$FAILED) {\n                                s1 = [s1, s2];\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$c0;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$c0;\n                            }\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$currPos;\n                              if (input.charCodeAt(peg$currPos) === 55360) {\n                                s1 = peg$c516;\n                                peg$currPos++;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c517); }\n                              }\n                              if (s1 !== peg$FAILED) {\n                                if (peg$c518.test(input.charAt(peg$currPos))) {\n                                  s2 = input.charAt(peg$currPos);\n                                  peg$currPos++;\n                                } else {\n                                  s2 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c519); }\n                                }\n                                if (s2 !== peg$FAILED) {\n                                  s1 = [s1, s2];\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$c0;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$c0;\n                              }\n                              if (s0 === peg$FAILED) {\n                                s0 = peg$currPos;\n                                if (input.charCodeAt(peg$currPos) === 55422) {\n                                  s1 = peg$c520;\n                                  peg$currPos++;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c521); }\n                                }\n                                if (s1 !== peg$FAILED) {\n                                  if (peg$c522.test(input.charAt(peg$currPos))) {\n                                    s2 = input.charAt(peg$currPos);\n                                    peg$currPos++;\n                                  } else {\n                                    s2 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c523); }\n                                  }\n                                  if (s2 !== peg$FAILED) {\n                                    s1 = [s1, s2];\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$c0;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$c0;\n                                }\n                                if (s0 === peg$FAILED) {\n                                  s0 = peg$currPos;\n                                  if (input.charCodeAt(peg$currPos) === 55405) {\n                                    s1 = peg$c524;\n                                    peg$currPos++;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c525); }\n                                  }\n                                  if (s1 !== peg$FAILED) {\n                                    if (peg$c526.test(input.charAt(peg$currPos))) {\n                                      s2 = input.charAt(peg$currPos);\n                                      peg$currPos++;\n                                    } else {\n                                      s2 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c527); }\n                                    }\n                                    if (s2 !== peg$FAILED) {\n                                      s1 = [s1, s2];\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$c0;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$c0;\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    s0 = peg$currPos;\n                                    if (input.charCodeAt(peg$currPos) === 55322) {\n                                      s1 = peg$c528;\n                                      peg$currPos++;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c529); }\n                                    }\n                                    if (s1 !== peg$FAILED) {\n                                      if (peg$c530.test(input.charAt(peg$currPos))) {\n                                        s2 = input.charAt(peg$currPos);\n                                        peg$currPos++;\n                                      } else {\n                                        s2 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c531); }\n                                      }\n                                      if (s2 !== peg$FAILED) {\n                                        s1 = [s1, s2];\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$c0;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$c0;\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      s0 = peg$currPos;\n                                      if (input.charCodeAt(peg$currPos) === 55298) {\n                                        s1 = peg$c532;\n                                        peg$currPos++;\n                                      } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c533); }\n                                      }\n                                      if (s1 !== peg$FAILED) {\n                                        if (peg$c534.test(input.charAt(peg$currPos))) {\n                                          s2 = input.charAt(peg$currPos);\n                                          peg$currPos++;\n                                        } else {\n                                          s2 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c535); }\n                                        }\n                                        if (s2 !== peg$FAILED) {\n                                          s1 = [s1, s2];\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$c0;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$c0;\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        s0 = peg$currPos;\n                                        if (input.charCodeAt(peg$currPos) === 55309) {\n                                          s1 = peg$c536;\n                                          peg$currPos++;\n                                        } else {\n                                          s1 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c537); }\n                                        }\n                                        if (s1 !== peg$FAILED) {\n                                          if (peg$c538.test(input.charAt(peg$currPos))) {\n                                            s2 = input.charAt(peg$currPos);\n                                            peg$currPos++;\n                                          } else {\n                                            s2 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c539); }\n                                          }\n                                          if (s2 !== peg$FAILED) {\n                                            s1 = [s1, s2];\n                                            s0 = s1;\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$c0;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$c0;\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseUnicodeCombiningMark() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 204 + 199,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (peg$c540.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c541); }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 56128) {\n          s1 = peg$c542;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c543); }\n        }\n        if (s1 !== peg$FAILED) {\n          if (peg$c544.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c545); }\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 55348) {\n            s1 = peg$c546;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c547); }\n          }\n          if (s1 !== peg$FAILED) {\n            if (peg$c548.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c549); }\n            }\n            if (s2 !== peg$FAILED) {\n              s1 = [s1, s2];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 55300) {\n              s1 = peg$c492;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c493); }\n            }\n            if (s1 !== peg$FAILED) {\n              if (peg$c550.test(input.charAt(peg$currPos))) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c551); }\n              }\n              if (s2 !== peg$FAILED) {\n                s1 = [s1, s2];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 55296) {\n                s1 = peg$c496;\n                peg$currPos++;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c497); }\n              }\n              if (s1 !== peg$FAILED) {\n                if (peg$c552.test(input.charAt(peg$currPos))) {\n                  s2 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s2 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c553); }\n                }\n                if (s2 !== peg$FAILED) {\n                  s1 = [s1, s2];\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 55298) {\n                  s1 = peg$c532;\n                  peg$currPos++;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c533); }\n                }\n                if (s1 !== peg$FAILED) {\n                  if (peg$c554.test(input.charAt(peg$currPos))) {\n                    s2 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s2 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c555); }\n                  }\n                  if (s2 !== peg$FAILED) {\n                    s1 = [s1, s2];\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c0;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c0;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseUnicodeDigit() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 204 + 200,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (peg$c556.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c557); }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 55349) {\n          s1 = peg$c488;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c489); }\n        }\n        if (s1 !== peg$FAILED) {\n          if (peg$c558.test(input.charAt(peg$currPos))) {\n            s2 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c559); }\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c0;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 55300) {\n            s1 = peg$c492;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c493); }\n          }\n          if (s1 !== peg$FAILED) {\n            if (peg$c560.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c561); }\n            }\n            if (s2 !== peg$FAILED) {\n              s1 = [s1, s2];\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c0;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 55297) {\n              s1 = peg$c504;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c505); }\n            }\n            if (s1 !== peg$FAILED) {\n              if (peg$c562.test(input.charAt(peg$currPos))) {\n                s2 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c563); }\n              }\n              if (s2 !== peg$FAILED) {\n                s1 = [s1, s2];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c0;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c0;\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseUnicodeConnectorPunctuation() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 201,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (peg$c564.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c565); }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseZWNJ() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 202,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (input.charCodeAt(peg$currPos) === 8204) {\n        s0 = peg$c566;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c567); }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseZWJ() {\n      var s0;\n\n      var key    = peg$currPos * 204 + 203,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (input.charCodeAt(peg$currPos) === 8205) {\n        s0 = peg$c568;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c569); }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    // Generated by CoffeeScript 2.0.0-beta9-dev\n    var associativities, c, chainableComparisonOps, constructorLookup, createInterpolation, createMemberExpression, CS, foldBinaryExpr, foldl, foldr, id, isValidRegExpFlags, LEFT_ASSOCIATIVE, negatableOps, op, p, postfixConstructorLookup, precedenceHierarchy, precedenceTable, prefixConstructorLookup, r, RIGHT_ASSOCIATIVE, rightAssocOps, rp, stripLeadingWhitespace, stripLeadingWhitespaceInterpolation;\n    CS = require('./nodes');\n    constructorLookup = {\n      '||': CS.LogicalOrOp,\n      or: CS.LogicalOrOp,\n      '&&': CS.LogicalAndOp,\n      and: CS.LogicalAndOp,\n      '|': CS.BitOrOp,\n      '^': CS.BitXorOp,\n      '&': CS.BitAndOp,\n      '?': CS.ExistsOp,\n      '==': CS.EQOp,\n      is: CS.EQOp,\n      '!=': CS.NEQOp,\n      isnt: CS.NEQOp,\n      '<=': CS.LTEOp,\n      '>=': CS.GTEOp,\n      '<': CS.LTOp,\n      '>': CS.GTOp,\n      'extends': CS.ExtendsOp,\n      'instanceof': CS.InstanceofOp,\n      'in': CS.InOp,\n      of: CS.OfOp,\n      '<<': CS.LeftShiftOp,\n      '>>': CS.SignedRightShiftOp,\n      '>>>': CS.UnsignedRightShiftOp,\n      '+': CS.PlusOp,\n      '-': CS.SubtractOp,\n      '*': CS.MultiplyOp,\n      '/': CS.DivideOp,\n      '%': CS.RemOp,\n      '**': CS.ExpOp\n    };\n    negatableOps = [\n      'instanceof',\n      'in',\n      'of'\n    ];\n    chainableComparisonOps = [\n      '<=',\n      '>=',\n      '<',\n      '>',\n      '==',\n      'is',\n      '!=',\n      'isnt'\n    ];\n    rightAssocOps = [\n      ';',\n      '=',\n      '?',\n      '**'\n    ];\n    precedenceHierarchy = [\n      [\n        'or',\n        '||'\n      ],\n      [\n        'and',\n        '&&'\n      ],\n      ['|'],\n      ['^'],\n      ['&'],\n      ['?'],\n      [\n        'is',\n        '==',\n        'isnt',\n        '!='\n      ],\n      [\n        'instanceof',\n        'in',\n        'of',\n        '<=',\n        '>=',\n        '<',\n        '>'\n      ],\n      [\n        '<<',\n        '>>',\n        '>>>'\n      ],\n      [\n        '+',\n        '-'\n      ],\n      [\n        '*',\n        '/',\n        '%'\n      ],\n      ['**']\n    ];\n    precedenceTable = function () {\n      var level, op, ops, table;\n      table = {};\n      for (var i$ = 0, length$ = precedenceHierarchy.length; i$ < length$; ++i$) {\n        ops = precedenceHierarchy[i$];\n        level = i$;\n        for (var i$1 = 0, length$1 = ops.length; i$1 < length$1; ++i$1) {\n          op = ops[i$1];\n          table[op] = level;\n        }\n      }\n      return table;\n    }();\n    RIGHT_ASSOCIATIVE = {};\n    LEFT_ASSOCIATIVE = {};\n    associativities = function () {\n      var op, result, rightAssocOp;\n      result = {};\n      for (op in precedenceTable) {\n        if (!isOwn$(precedenceTable, op))\n          continue;\n        result[op] = LEFT_ASSOCIATIVE;\n      }\n      for (var i$ = 0, length$ = rightAssocOps.length; i$ < length$; ++i$) {\n        rightAssocOp = rightAssocOps[i$];\n        result[rightAssocOp] = RIGHT_ASSOCIATIVE;\n      }\n      return result;\n    }();\n    for (var i$ = 0, length$ = negatableOps.length; i$ < length$; ++i$) {\n      op = negatableOps[i$];\n      (function (op) {\n        var fn, negatedOp;\n        fn = function (a, b) {\n          return new CS.LogicalNotOp(new constructorLookup[op](a, b));\n        };\n        fn.prototype = constructorLookup[op].prototype;\n        negatedOp = 'not ' + op;\n        constructorLookup[negatedOp] = fn;\n        precedenceTable[negatedOp] = precedenceTable[op];\n        return associativities[negatedOp] = associativities[op];\n      }(op));\n    }\n    prefixConstructorLookup = {\n      '++': CS.PreIncrementOp,\n      '--': CS.PreDecrementOp,\n      '+': CS.UnaryPlusOp,\n      '-': CS.UnaryNegateOp,\n      '!': CS.LogicalNotOp,\n      not: CS.LogicalNotOp,\n      '~': CS.BitNotOp,\n      'do': CS.DoOp,\n      'typeof': CS.TypeofOp,\n      'delete': CS.DeleteOp\n    };\n    postfixConstructorLookup = {\n      '?': CS.UnaryExistsOp,\n      '[..]': CS.ShallowCopyArray,\n      '++': CS.PostIncrementOp,\n      '--': CS.PostDecrementOp\n    };\n    foldl = function (fn, memo, list) {\n      var item;\n      for (var i$1 = 0, length$1 = list.length; i$1 < length$1; ++i$1) {\n        item = list[i$1];\n        memo = fn(memo, item);\n      }\n      return memo;\n    };\n    foldr = function (fn, memo, list) {\n      var i, item;\n      i = list.length;\n      while (i--) {\n        item = list[i];\n        memo = fn(memo, item);\n      }\n      return memo;\n    };\n    foldBinaryExpr = function (parts, ignoreChains) {\n      var chainStack, expr, leftOperand, nextOp, nextPrec, operator, prec, rightOperand, stack;\n      if (parts.length < 3)\n        return parts[0];\n      stack = [].slice.call(parts, 0, 3);\n      parts = [].slice.call(parts, 3);\n      while (parts.length > 0) {\n        nextOp = parts[0];\n        if (!ignoreChains && stack.length > 2) {\n          operator = stack[stack.length - 2];\n          if (in$(operator, chainableComparisonOps) && in$(nextOp, chainableComparisonOps)) {\n            chainStack = stack.slice(-3);\n            stack = stack.slice(0, stack.length - 3);\n            while (true) {\n              operator = nextOp;\n              chainStack.push(parts.shift(), parts.shift());\n              nextOp = parts[0];\n              if (nextOp) {\n                nextPrec = precedenceTable[nextOp];\n                prec = precedenceTable[operator];\n              }\n              if (!(null != nextOp && (nextPrec > prec || in$(nextOp, chainableComparisonOps))))\n                break;\n            }\n            stack.push(new CS.ChainedComparisonOp(foldBinaryExpr(chainStack, true)));\n            continue;\n          }\n        }\n        while (stack.length > 2 && (operator = stack[stack.length - 2], (prec = precedenceTable[operator], (nextPrec = precedenceTable[nextOp], nextPrec < prec || in$(operator, chainableComparisonOps) && in$(nextOp, chainableComparisonOps) || nextPrec === prec && associativities[operator] === LEFT_ASSOCIATIVE)))) {\n          rightOperand = stack.pop();\n          stack.pop();\n          leftOperand = stack.pop();\n          stack.push(new constructorLookup[operator](leftOperand, rightOperand));\n        }\n        stack.push(parts.shift());\n        stack.push(parts.shift());\n      }\n      expr = stack.pop();\n      while (stack.length > 0) {\n        expr = new constructorLookup[(stack.pop())](stack.pop(), expr);\n      }\n      return expr;\n    };\n    createInterpolation = function (es) {\n      var init;\n      init = new CS.String('').g().r('');\n      return foldl(function (memo, s) {\n        var left;\n        if (s instanceof CS.String) {\n          left = memo;\n          while (left) {\n            if (left instanceof CS.String) {\n              if (left === init) {\n                c(left, s);\n                left.raw = s.raw;\n                delete left.generated;\n              }\n              left.data = '' + left.data + s.data;\n              return memo;\n            } else if (left instanceof CS.ConcatOp) {\n              left = left.right;\n            } else {\n              break;\n            }\n          }\n        }\n        return new CS.ConcatOp(memo, s);\n      }, init, es);\n    };\n    createMemberExpression = function (e, accesses) {\n      return foldl(function (left, access) {\n        var F, o;\n        F = function () {\n        };\n        F.prototype = access.op.prototype;\n        o = new F;\n        access.op.call.apply(access.op, [\n          o,\n          left\n        ].concat([].slice.call(access.operands)));\n        return c(o.r(left.raw + access.raw), e);\n      }, e, accesses);\n    };\n    isValidRegExpFlags = function (flags) {\n      var f, flag;\n      if (!flags)\n        return true;\n      if (flags.length > 4)\n        return false;\n      flags.sort();\n      flag = null;\n      for (var i$1 = 0, length$1 = flags.length; i$1 < length$1; ++i$1) {\n        f = flags[i$1];\n        if (flag === f)\n          return false;\n        flag = f;\n      }\n      return true;\n    };\n    stripLeadingWhitespace = function (str) {\n      var attempt, cache$, indent, match, matchStr, wholeMatch;\n      str = str.trimRight();\n      matchStr = str;\n      indent = null;\n      while (match = /\\n+([^\\n\\S]*)/.exec(matchStr)) {\n        cache$ = match;\n        wholeMatch = cache$[0];\n        attempt = cache$[1];\n        matchStr = matchStr.slice(match.index + wholeMatch.length);\n        if (!(null != indent) || 0 < attempt.length && attempt.length < indent.length)\n          indent = attempt;\n      }\n      if (indent)\n        str = str.replace(new RegExp('\\\\n' + indent, 'g'), '\\n');\n      str = str.replace(/^\\n/, '');\n      return str;\n    };\n    stripLeadingWhitespaceInterpolation = function (pieces) {\n      var attempt, cache$, indent, index, match, matchStr, piece, wholeMatch;\n      indent = null;\n      for (var i$1 = 0, length$1 = pieces.length; i$1 < length$1; ++i$1) {\n        piece = pieces[i$1];\n        index = i$1;\n        if (piece instanceof CS.String) {\n          if (index === pieces.length - 1)\n            piece.data = piece.data.replace(/\\s+$/, '');\n          matchStr = piece.data;\n          while (match = /\\n+([^\\n\\S]*)/.exec(matchStr)) {\n            cache$ = match;\n            wholeMatch = cache$[0];\n            attempt = cache$[1];\n            matchStr = matchStr.slice(match.index + wholeMatch.length);\n            if (!(null != indent) || 0 < attempt.length && attempt.length < indent.length)\n              indent = attempt;\n          }\n        }\n      }\n      if (indent)\n        for (var i$2 = 0, length$2 = pieces.length; i$2 < length$2; ++i$2) {\n          piece = pieces[i$2];\n          index = i$2;\n          if (piece instanceof CS.String) {\n            piece.data = piece.data.replace(new RegExp('\\\\n' + indent, 'g'), '\\n');\n            if (index === pieces.length - 1)\n              piece.data = piece.data.replace(/(\\n\\s*)+$/, '');\n            if (index === 0)\n              piece.data = piece.data.replace(/^\\n/, '');\n          }\n        }\n      return pieces;\n    };\n    r = function (node) {\n      node.raw = text().replace(/[\\uEFEF\\uEFFE\\uEFFF]/g, '');\n      return node;\n    };\n    p = function (node) {\n      node.line = line();\n      node.column = column();\n      node.offset = offset();\n      return node;\n    };\n    rp = function (node) {\n      return r(p(node));\n    };\n    c = function (to, from) {\n      to.line = from.line;\n      to.column = from.column;\n      to.offset = from.offset;\n      return to;\n    };\n    id = function (x) {\n      return x;\n    };\n    if (!options.raw)\n      r = p = rp = id;\n    eval('\\n  // XXX: The functions below override the default code generated by PEGjs.\\n  // CoffeeScriptRedux has a preprocessor that adds control characters to\\n  // mark indents/outdents/etc for PEGjs. These characters cause the line,\\n  // column, and offset values to differ from the original input source code,\\n  // so this section exists to properly hide those control characters when\\n  // reporting location information. See #117 & #335.\\n\\n  var csr$controlCharacterCount = 0;\\n\\n  function offset() {\\n    return peg$reportedPos - csr$controlCharacterCount;\\n  }\\n\\n  function peg$computePosDetails(pos) {\\n    function advance(details, startPos, endPos) {\\n      var p, ch;\\n\\n      for (p = startPos; p < endPos; p++) {\\n        ch = input.charAt(p);\\n        if (ch === \"\\\\n\") {\\n          if (!details.seenCR) { details.line++; }\\n          details.column = 1;\\n          details.seenCR = false;\\n        } else if (ch === \"\\\\r\" || ch === \"\\\\u2028\" || ch === \"\\\\u2029\") {\\n          details.line++;\\n          details.column = 1;\\n          details.seenCR = true;\\n        } else if(!/[\\\\uEFEF\\\\uEFFE\\\\uEFFF]/.test(ch)) {\\n          details.column++;\\n          details.seenCR = false;\\n        } else {\\n          csr$controlCharacterCount++;\\n        }\\n      }\\n    }\\n\\n    if (peg$cachedPos !== pos) {\\n      if (peg$cachedPos > pos) {\\n        csr$controlCharacterCount = 0;\\n        peg$cachedPos = 0;\\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\\n      }\\n      advance(peg$cachedPosDetails, peg$cachedPos, pos);\\n      peg$cachedPos = pos;\\n    }\\n\\n    return peg$cachedPosDetails;\\n  }\\n  ');\n    function isOwn$(o, p) {\n      return {}.hasOwnProperty.call(o, p);\n    }\n    function in$(member, list) {\n      for (var i = 0, length = list.length; i < length; ++i)\n        if (i in list && list[i] === member)\n          return true;\n      return false;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();\n\n},{\"../package.json\":30,\"./nodes\":6}],9:[function(require,module,exports){\n// Generated by CoffeeScript 2.0.0-beta9-dev\nvar DEDENT, INDENT, pointToErrorLocation, Preprocessor, StringScanner, TERM, ws;\npointToErrorLocation = require('./helpers').pointToErrorLocation;\nStringScanner = require('StringScanner');\nthis.Preprocessor = Preprocessor = function () {\n  ws = '\\\\t\\\\x0B\\\\f\\\\r \\\\xA0\\\\u1680\\\\u180E\\\\u2000-\\\\u200A\\\\u202F\\\\u205F\\\\u3000\\\\uFEFF';\n  INDENT = '\\uEFEF';\n  DEDENT = '\\uEFFE';\n  TERM = '\\uEFFF';\n  function Preprocessor(param$) {\n    if (null == param$)\n      param$ = {};\n    this.options = param$;\n    this.preprocessed = '';\n    this.base = null;\n    this.indents = [];\n    this.context = [];\n  }\n  Preprocessor.process = function (input, options) {\n    if (null == options)\n      options = {};\n    return new Preprocessor(options).process(input);\n  };\n  Preprocessor.prototype.err = function (c) {\n    var columns, context, lines, token;\n    token = function () {\n      switch (c) {\n      case INDENT:\n        return 'INDENT';\n      case DEDENT:\n        return 'DEDENT';\n      case TERM:\n        return 'TERM';\n      default:\n        return '\"' + c.replace(/\"/g, '\\\\\"') + '\"';\n      }\n    }.call(this);\n    lines = this.ss.str.substr(0, this.ss.pos).split(/\\n/) || [''];\n    columns = null != lines[lines.length - 1] ? lines[lines.length - 1].length : 0;\n    context = pointToErrorLocation(this.ss.str, lines.length, columns);\n    throw new Error('Unexpected ' + token + '\\n' + context);\n  };\n  Preprocessor.prototype.peek = function () {\n    if (this.context.length) {\n      return this.context[this.context.length - 1];\n    } else {\n      return null;\n    }\n  };\n  Preprocessor.prototype.observe = function (c) {\n    var top;\n    top = this.peek();\n    switch (c) {\n    case '\"\"\"':\n    case \"'''\":\n    case '\"':\n    case \"'\":\n    case '###':\n    case '`':\n    case '///':\n    case '/':\n      if (top === c) {\n        this.context.pop();\n      } else {\n        this.context.push(c);\n      }\n      break;\n    case INDENT:\n    case '#':\n    case '#{':\n    case '[':\n    case '(':\n    case '{':\n    case '\\\\':\n    case 'regexp-[':\n    case 'regexp-(':\n    case 'regexp-{':\n    case 'heregexp-#':\n    case 'heregexp-[':\n    case 'heregexp-(':\n    case 'heregexp-{':\n      this.context.push(c);\n      break;\n    case DEDENT:\n      if (!(top === INDENT))\n        this.err(c);\n      this.indents.pop();\n      this.context.pop();\n      break;\n    case '\\n':\n      if (!(top === '#' || top === 'heregexp-#'))\n        this.err(c);\n      this.context.pop();\n      break;\n    case ']':\n      if (!(top === '[' || top === 'regexp-[' || top === 'heregexp-['))\n        this.err(c);\n      this.context.pop();\n      break;\n    case ')':\n      if (!(top === '(' || top === 'regexp-(' || top === 'heregexp-('))\n        this.err(c);\n      this.context.pop();\n      break;\n    case '}':\n      if (!(top === '#{' || top === '{' || top === 'regexp-{' || top === 'heregexp-{'))\n        this.err(c);\n      this.context.pop();\n      break;\n    case 'end-\\\\':\n      if (!(top === '\\\\'))\n        this.err(c);\n      this.context.pop();\n      break;\n    default:\n      throw new Error('undefined token observed: ' + c);\n    }\n    return this.context;\n  };\n  Preprocessor.prototype.p = function (s) {\n    if (null != s)\n      this.preprocessed = '' + this.preprocessed + s;\n    return s;\n  };\n  Preprocessor.prototype.scan = function (r) {\n    return this.p(this.ss.scan(r));\n  };\n  Preprocessor.prototype.consumeIndentation = function () {\n    var context, indent, indentIndex, lineLen, lines, message;\n    if (this.ss.bol() || this.scan(new RegExp('(?:[' + ws + ']*\\\\n)+'))) {\n      this.scan(new RegExp('(?:[' + ws + ']*(\\\\#\\\\#?(?!\\\\#)[^\\\\n]*)?\\\\n)+'));\n      if (null != this.base) {\n        if (!(this.ss.eos() || null != this.scan(this.base))) {\n          throw new Error('inconsistent base indentation');\n        }\n      } else {\n        this.base = new RegExp('' + this.scan(new RegExp('[' + ws + ']*')) + '');\n      }\n      indentIndex = 0;\n      while (indentIndex < this.indents.length) {\n        indent = this.indents[indentIndex];\n        if (this.ss.check(new RegExp('' + indent + ''))) {\n          this.scan(new RegExp('' + indent + ''));\n        } else if (this.ss.eos() || this.ss.check(new RegExp('[^' + ws + ']'))) {\n          --indentIndex;\n          this.p('' + DEDENT + TERM);\n          this.observe(DEDENT);\n        } else {\n          lines = this.ss.str.substr(0, this.ss.pos).split(/\\n/) || [''];\n          message = 'Syntax error on line ' + lines.length + ': indentation is ambiguous';\n          lineLen = this.indents.reduce(function (l, r) {\n            return l + r.length;\n          }, 0);\n          context = pointToErrorLocation(this.ss.str, lines.length, lineLen);\n          throw new Error('' + message + '\\n' + context);\n        }\n        ++indentIndex;\n      }\n      if (this.ss.check(new RegExp('[' + ws + ']+[^' + ws + '#]'))) {\n        this.indents.push(this.scan(new RegExp('[' + ws + ']+')));\n        this.p(INDENT);\n        return this.observe(INDENT);\n      }\n    }\n  };\n  Preprocessor.prototype.introduceContext = function () {\n    var impliedRegexp, lastChar, pos, spaceBefore, tok;\n    if (tok = this.scan(/\"\"\"|'''|\\/\\/\\/|###|[\"'`#[({\\\\]/)) {\n      return this.observe(tok);\n    } else if (tok = this.scan(/\\//)) {\n      pos = this.ss.position();\n      if (pos > 1) {\n        lastChar = this.ss.string()[pos - 2];\n        spaceBefore = new RegExp('[' + ws + ']').test(lastChar);\n        impliedRegexp = /[;,=><*%^&|[(+!~-]/.test(lastChar);\n      }\n      if (pos === 1 || impliedRegexp || spaceBefore && !this.ss.check(new RegExp('[' + ws + '=]')) && this.ss.check(/[^\\r\\n]*\\//))\n        return this.observe('/');\n    }\n  };\n  Preprocessor.prototype.process = function (input) {\n    var tok;\n    if (this.options.literate)\n      input = input.replace(/^( {0,3}\\S)/gm, '    #$1');\n    this.ss = new StringScanner(input);\n    while (!this.ss.eos()) {\n      switch (this.peek()) {\n      case null:\n      case INDENT:\n        this.consumeIndentation();\n        this.scan(/[^\\n'\"\\\\\\/#`[(){}\\]]+/);\n        if (this.ss.check(/[})\\]]/)) {\n          while (this.peek() === INDENT) {\n            this.p('' + DEDENT + TERM);\n            this.observe(DEDENT);\n          }\n          this.observe(this.scan(/[})\\]]/));\n        } else {\n          this.introduceContext();\n        }\n        break;\n      case '#{':\n      case '{':\n        this.scan(/[^\\n'\"\\\\\\/#`[({}]+/);\n        if (tok = this.scan(/\\}/)) {\n          this.observe(tok);\n        } else {\n          this.consumeIndentation();\n          this.introduceContext();\n        }\n        break;\n      case '[':\n        this.scan(/[^\\n'\"\\\\\\/#`[({\\]]+/);\n        if (tok = this.scan(/\\]/)) {\n          this.observe(tok);\n        } else {\n          this.consumeIndentation();\n          this.introduceContext();\n        }\n        break;\n      case '(':\n        this.scan(/[^\\n'\"\\\\\\/#`[({)]+/);\n        if (tok = this.scan(/\\)/)) {\n          this.observe(tok);\n        } else {\n          this.consumeIndentation();\n          this.introduceContext();\n        }\n        break;\n      case '\\\\':\n        if (this.scan(/[\\s\\S]/))\n          this.observe('end-\\\\');\n        break;\n      case '\"\"\"':\n        this.scan(/(?:[^\"#\\\\]+|\"\"?(?!\")|#(?!{)|\\\\.)+/);\n        this.ss.scan(/\\\\\\n/);\n        if (tok = this.scan(/#{|\"\"\"/)) {\n          this.observe(tok);\n        } else if (tok = this.scan(/#{|\"\"\"/)) {\n          this.observe(tok);\n        }\n        break;\n      case '\"':\n        this.scan(/(?:[^\"#\\\\]+|#(?!{)|\\\\.)+/);\n        this.ss.scan(/\\\\\\n/);\n        if (tok = this.scan(/#{|\"/))\n          this.observe(tok);\n        break;\n      case \"'''\":\n        this.scan(/(?:[^'\\\\]+|''?(?!')|\\\\.)+/);\n        this.ss.scan(/\\\\\\n/);\n        if (tok = this.scan(/'''/))\n          this.observe(tok);\n        break;\n      case \"'\":\n        this.scan(/(?:[^'\\\\]+|\\\\.)+/);\n        this.ss.scan(/\\\\\\n/);\n        if (tok = this.scan(/'/))\n          this.observe(tok);\n        break;\n      case '###':\n        this.scan(/(?:[^#]+|##?(?!#))+/);\n        if (tok = this.scan(/###/))\n          this.observe(tok);\n        break;\n      case '#':\n        this.scan(/[^\\n]+/);\n        if (tok = this.scan(/\\n/))\n          this.observe(tok);\n        break;\n      case '`':\n        this.scan(/[^`]+/);\n        if (tok = this.scan(/`/))\n          this.observe(tok);\n        break;\n      case '///':\n        this.scan(/(?:[^[/#\\\\]+|\\/\\/?(?!\\/)|\\\\.)+/);\n        if (tok = this.scan(/#{|\\/\\/\\/|\\\\/)) {\n          this.observe(tok);\n        } else if (this.ss.scan(/#/)) {\n          this.observe('heregexp-#');\n        } else if (tok = this.scan(/[\\[]/)) {\n          this.observe('heregexp-' + tok);\n        }\n        break;\n      case 'heregexp-[':\n        this.scan(/(?:[^\\]\\/\\\\]+|\\/\\/?(?!\\/))+/);\n        if (tok = this.scan(/[\\]\\\\]|#{|\\/\\/\\//))\n          this.observe(tok);\n        break;\n      case 'heregexp-#':\n        this.ss.scan(/(?:[^\\n/]+|\\/\\/?(?!\\/))+/);\n        if (tok = this.scan(/\\n|\\/\\/\\//))\n          this.observe(tok);\n        break;\n      case '/':\n        this.scan(/[^[/\\\\]+/);\n        if (tok = this.scan(/[\\/\\\\]/)) {\n          this.observe(tok);\n        } else if (tok = this.scan(/\\[/)) {\n          this.observe('regexp-' + tok);\n        }\n        break;\n      case 'regexp-[':\n        this.scan(/[^\\]\\\\]+/);\n        if (tok = this.scan(/[\\]\\\\]/))\n          this.observe(tok);\n      }\n    }\n    this.scan(new RegExp('[' + ws + '\\\\n]*$'));\n    while (this.context.length) {\n      switch (this.peek()) {\n      case INDENT:\n        this.p('' + DEDENT + TERM);\n        this.observe(DEDENT);\n        break;\n      case '#':\n        this.p('\\n');\n        this.observe('\\n');\n        break;\n      default:\n        throw new Error('Unclosed \"' + this.peek().replace(/\"/g, '\\\\\"') + '\" at EOF');\n      }\n    }\n    return this.preprocessed;\n  };\n  return Preprocessor;\n}();\n\n},{\"./helpers\":3,\"StringScanner\":12}],10:[function(require,module,exports){\n// Generated by CoffeeScript 2.0.0-beta9-dev\nvar child_process, coffeeBinary, CoffeeScript, fork, fs, path, runModule;\nchild_process = require('child_process');\nfs = require('fs');\npath = require('path');\nCoffeeScript = require('./module');\nrunModule = require('./run').runModule;\nmodule.exports = !(null != require.extensions['.coffee']);\nrequire.extensions['.coffee'] = function (module, filename) {\n  var csAst, input, js, jsAst;\n  input = fs.readFileSync(filename, 'utf8');\n  csAst = CoffeeScript.parse(input, { raw: true });\n  jsAst = CoffeeScript.compile(csAst);\n  js = CoffeeScript.js(jsAst);\n  return runModule(module, js, jsAst, filename);\n};\nrequire.extensions['.litcoffee'] = function (module, filename) {\n  var csAst, input, js, jsAst;\n  input = fs.readFileSync(filename, 'utf8');\n  csAst = CoffeeScript.parse(input, {\n    raw: true,\n    literate: true\n  });\n  jsAst = CoffeeScript.compile(csAst);\n  js = CoffeeScript.js(jsAst);\n  return runModule(module, js, jsAst, filename);\n};\nfork = child_process.fork;\nif (!fork.coffeePatched) {\n  coffeeBinary = path.resolve('bin', 'coffee');\n  child_process.fork = function (file, args, options) {\n    if (null == args)\n      args = [];\n    if (null == options)\n      options = {};\n    if (in$(path.extname(file), [\n        '.coffee',\n        '.litcoffee'\n      ])) {\n      if (!Array.isArray(args)) {\n        args = [];\n        options = args || {};\n      }\n      options.execPath || (options.execPath = coffeeBinary);\n    }\n    return fork(file, args, options);\n  };\n  child_process.fork.coffeePatched = true;\n}\ndelete require.cache[__filename];\nfunction in$(member, list) {\n  for (var i = 0, length = list.length; i < length; ++i)\n    if (i in list && list[i] === member)\n      return true;\n  return false;\n}\n\n},{\"./module\":5,\"./run\":11,\"child_process\":32,\"fs\":32,\"path\":33}],11:[function(require,module,exports){\n(function (process){\n// Generated by CoffeeScript 2.0.0-beta9-dev\nvar CoffeeScript, formatSourcePosition, Module, patched, patchStackTrace, path, runMain, runModule, SourceMapConsumer;\npath = require('path');\nModule = require('module');\nCoffeeScript = require('./module');\nSourceMapConsumer = require('source-map').SourceMapConsumer;\npatched = false;\npatchStackTrace = function () {\n  if (patched)\n    return;\n  patched = true;\n  if (null != Module._sourceMaps)\n    Module._sourceMaps;\n  else\n    Module._sourceMaps = {};\n  return Error.prepareStackTrace = function (err, stack) {\n    var frame, frames, getSourceMapping, sourceFiles;\n    sourceFiles = {};\n    getSourceMapping = function (filename, line, column) {\n      var mapString, sourceMap;\n      mapString = 'function' === typeof Module._sourceMaps[filename] ? Module._sourceMaps[filename]() : void 0;\n      if (mapString) {\n        sourceMap = null != sourceFiles[filename] ? sourceFiles[filename] : sourceFiles[filename] = new SourceMapConsumer(mapString);\n        return sourceMap.originalPositionFor({\n          line: line,\n          column: column - 1\n        });\n      }\n    };\n    frames = function (accum$) {\n      for (var i$ = 0, length$ = stack.length; i$ < length$; ++i$) {\n        frame = stack[i$];\n        if (frame.getFunction() === exports.runMain)\n          break;\n        accum$.push('  at ' + formatSourcePosition(frame, getSourceMapping));\n      }\n      return accum$;\n    }.call(this, []);\n    return '' + err.toString() + '\\n' + frames.join('\\n') + '\\n';\n  };\n};\nformatSourcePosition = function (frame, getSourceMapping) {\n  var as, column, fileLocation, fileName, functionName, isConstructor, isMethodCall, line, methodName, source, tp, typeName;\n  fileName = void 0;\n  fileLocation = '';\n  if (frame.isNative()) {\n    fileLocation = 'native';\n  } else {\n    if (frame.isEval()) {\n      fileName = frame.getScriptNameOrSourceURL();\n      if (!fileName)\n        fileLocation = '' + frame.getEvalOrigin() + ', ';\n    } else {\n      fileName = frame.getFileName();\n    }\n    fileName || (fileName = '<anonymous>');\n    line = frame.getLineNumber();\n    column = frame.getColumnNumber();\n    source = getSourceMapping(fileName, line, column);\n    fileLocation = source ? null != source.line ? '' + fileName + ':' + source.line + ':' + (source.column + 1) + ', <js>:' + line + ':' + column : '' + fileName + ' <js>:' + line + ':' + column : '' + fileName + ':' + line + ':' + column;\n  }\n  functionName = frame.getFunctionName();\n  isConstructor = frame.isConstructor();\n  isMethodCall = !(frame.isToplevel() || isConstructor);\n  if (isMethodCall) {\n    methodName = frame.getMethodName();\n    typeName = frame.getTypeName();\n    if (functionName) {\n      tp = as = '';\n      if (typeName && functionName.indexOf(typeName))\n        tp = '' + typeName + '.';\n      if (methodName && functionName.indexOf('.' + methodName) !== functionName.length - methodName.length - 1)\n        as = ' [as ' + methodName + ']';\n      return '' + tp + functionName + as + ' (' + fileLocation + ')';\n    } else {\n      return '' + typeName + '.' + (methodName || '<anonymous>') + ' (' + fileLocation + ')';\n    }\n  } else if (isConstructor) {\n    return 'new ' + (functionName || '<anonymous>') + ' (' + fileLocation + ')';\n  } else if (functionName) {\n    return '' + functionName + ' (' + fileLocation + ')';\n  } else {\n    return fileLocation;\n  }\n};\nrunMain = function (csSource, jsSource, jsAst, filename) {\n  var mainModule;\n  mainModule = new Module('.');\n  mainModule.filename = process.argv[1] = filename;\n  process.mainModule = mainModule;\n  Module._cache[mainModule.filename] = mainModule;\n  mainModule.paths = Module._nodeModulePaths(path.dirname(filename));\n  return runModule(mainModule, jsSource, jsAst, filename);\n};\nrunModule = function (module, jsSource, jsAst, filename) {\n  patchStackTrace();\n  Module._sourceMaps[filename] = function () {\n    return '' + CoffeeScript.sourceMap(jsAst, filename);\n  };\n  return module._compile(jsSource, filename);\n};\nmodule.exports = {\n  runMain: runMain,\n  runModule: runModule\n};\n\n}).call(this,require(\"JkpR2F\"))\n},{\"./module\":5,\"JkpR2F\":34,\"module\":32,\"path\":33,\"source-map\":19}],12:[function(require,module,exports){\n(function() {\n  var StringScanner;\n  StringScanner = (function() {\n    function StringScanner(str) {\n      this.str = str != null ? str : '';\n      this.str = '' + this.str;\n      this.pos = 0;\n      this.lastMatch = {\n        reset: function() {\n          this.str = null;\n          this.captures = [];\n          return this;\n        }\n      }.reset();\n      this;\n    }\n    StringScanner.prototype.bol = function() {\n      return this.pos <= 0 || (this.str[this.pos - 1] === \"\\n\");\n    };\n    StringScanner.prototype.captures = function() {\n      return this.lastMatch.captures;\n    };\n    StringScanner.prototype.check = function(pattern) {\n      var matches;\n      if (this.str.substr(this.pos).search(pattern) !== 0) {\n        this.lastMatch.reset();\n        return null;\n      }\n      matches = this.str.substr(this.pos).match(pattern);\n      this.lastMatch.str = matches[0];\n      this.lastMatch.captures = matches.slice(1);\n      return this.lastMatch.str;\n    };\n    StringScanner.prototype.checkUntil = function(pattern) {\n      var matches, patternPos;\n      patternPos = this.str.substr(this.pos).search(pattern);\n      if (patternPos < 0) {\n        this.lastMatch.reset();\n        return null;\n      }\n      matches = this.str.substr(this.pos + patternPos).match(pattern);\n      this.lastMatch.captures = matches.slice(1);\n      return this.lastMatch.str = this.str.substr(this.pos, patternPos) + matches[0];\n    };\n    StringScanner.prototype.clone = function() {\n      var clone, prop, value, _ref;\n      clone = new this.constructor(this.str);\n      clone.pos = this.pos;\n      clone.lastMatch = {};\n      _ref = this.lastMatch;\n      for (prop in _ref) {\n        value = _ref[prop];\n        clone.lastMatch[prop] = value;\n      }\n      return clone;\n    };\n    StringScanner.prototype.concat = function(str) {\n      this.str += str;\n      return this;\n    };\n    StringScanner.prototype.eos = function() {\n      return this.pos === this.str.length;\n    };\n    StringScanner.prototype.exists = function(pattern) {\n      var matches, patternPos;\n      patternPos = this.str.substr(this.pos).search(pattern);\n      if (patternPos < 0) {\n        this.lastMatch.reset();\n        return null;\n      }\n      matches = this.str.substr(this.pos + patternPos).match(pattern);\n      this.lastMatch.str = matches[0];\n      this.lastMatch.captures = matches.slice(1);\n      return patternPos;\n    };\n    StringScanner.prototype.getch = function() {\n      return this.scan(/./);\n    };\n    StringScanner.prototype.match = function() {\n      return this.lastMatch.str;\n    };\n    StringScanner.prototype.matches = function(pattern) {\n      this.check(pattern);\n      return this.matchSize();\n    };\n    StringScanner.prototype.matched = function() {\n      return this.lastMatch.str != null;\n    };\n    StringScanner.prototype.matchSize = function() {\n      if (this.matched()) {\n        return this.match().length;\n      } else {\n        return null;\n      }\n    };\n    StringScanner.prototype.peek = function(len) {\n      return this.str.substr(this.pos, len);\n    };\n    StringScanner.prototype.pointer = function() {\n      return this.pos;\n    };\n    StringScanner.prototype.setPointer = function(pos) {\n      pos = +pos;\n      if (pos < 0) {\n        pos = 0;\n      }\n      if (pos > this.str.length) {\n        pos = this.str.length;\n      }\n      return this.pos = pos;\n    };\n    StringScanner.prototype.reset = function() {\n      this.lastMatch.reset();\n      this.pos = 0;\n      return this;\n    };\n    StringScanner.prototype.rest = function() {\n      return this.str.substr(this.pos);\n    };\n    StringScanner.prototype.scan = function(pattern) {\n      var chk;\n      chk = this.check(pattern);\n      if (chk != null) {\n        this.pos += chk.length;\n      }\n      return chk;\n    };\n    StringScanner.prototype.scanUntil = function(pattern) {\n      var chk;\n      chk = this.checkUntil(pattern);\n      if (chk != null) {\n        this.pos += chk.length;\n      }\n      return chk;\n    };\n    StringScanner.prototype.skip = function(pattern) {\n      this.scan(pattern);\n      return this.matchSize();\n    };\n    StringScanner.prototype.skipUntil = function(pattern) {\n      this.scanUntil(pattern);\n      return this.matchSize();\n    };\n    StringScanner.prototype.string = function() {\n      return this.str;\n    };\n    StringScanner.prototype.terminate = function() {\n      this.pos = this.str.length;\n      this.lastMatch.reset();\n      return this;\n    };\n    StringScanner.prototype.toString = function() {\n      return \"#<StringScanner \" + (this.eos() ? 'fin' : \"\" + this.pos + \"/\" + this.str.length + \" @ \" + (this.str.length > 8 ? \"\" + (this.str.substr(0, 5)) + \"...\" : this.str)) + \">\";\n    };\n    return StringScanner;\n  })();\n  StringScanner.prototype.beginningOfLine = StringScanner.prototype.bol;\n  StringScanner.prototype.clear = StringScanner.prototype.terminate;\n  StringScanner.prototype.dup = StringScanner.prototype.clone;\n  StringScanner.prototype.endOfString = StringScanner.prototype.eos;\n  StringScanner.prototype.exist = StringScanner.prototype.exists;\n  StringScanner.prototype.getChar = StringScanner.prototype.getch;\n  StringScanner.prototype.position = StringScanner.prototype.pointer;\n  StringScanner.StringScanner = StringScanner;\n  module.exports = StringScanner;\n}).call(this);\n\n},{}],13:[function(require,module,exports){\n// Generated by CoffeeScript 1.3.3\n(function() {\n  var __hasProp = {}.hasOwnProperty,\n    __slice = [].slice,\n    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  (function(exports) {\n    var TAB, clone, eq, formatInterpolation, formatStringData, generate, indent, levels, needsParensWhenOnLeft, operators, parens, precedence;\n    TAB = '  ';\n    indent = function(code) {\n      var line;\n      return ((function() {\n        var _i, _len, _ref, _results;\n        _ref = code.split('\\n');\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          line = _ref[_i];\n          _results.push(\"\" + TAB + line);\n        }\n        return _results;\n      })()).join('\\n');\n    };\n    parens = function(code) {\n      return \"(\" + code + \")\";\n    };\n    formatStringData = function(data) {\n      return data.replace(/[^\\x20-\\x7e]|['\\\\]/, function(c) {\n        var escape, pad;\n        switch (c) {\n          case '\\0':\n            return '\\\\0';\n          case '\\b':\n            return '\\\\b';\n          case '\\t':\n            return '\\\\t';\n          case '\\n':\n            return '\\\\n';\n          case '\\f':\n            return '\\\\f';\n          case '\\r':\n            return '\\\\r';\n          case '\\'':\n            return '\\\\\\'';\n          case '\\\\':\n            return '\\\\\\\\';\n          default:\n            escape = (c.charCodeAt(0)).toString(16);\n            pad = \"0000\".slice(escape.length);\n            return \"\\\\u\" + pad + escape;\n        }\n      });\n    };\n    formatInterpolation = function(ast, options) {\n      var left, right;\n      switch (ast.className) {\n        case \"ConcatOp\":\n          left = formatInterpolation(ast.left, options);\n          right = formatInterpolation(ast.right, options);\n          return \"\" + left + right;\n        case \"String\":\n          return formatStringData(ast.data);\n        default:\n          return \"\\#{\" + (generate(ast, options)) + \"}\";\n      }\n    };\n    needsParensWhenOnLeft = function(ast) {\n      switch (ast.className) {\n        case 'Function':\n        case 'BoundFunction':\n        case 'NewOp':\n          return true;\n        case 'Conditional':\n        case 'Switch':\n        case 'While':\n        case 'Block':\n          return true;\n        case 'PreIncrementOp':\n        case 'PreDecrementOp':\n        case 'UnaryPlusOp':\n        case 'UnaryNegateOp':\n        case 'LogicalNotOp':\n        case 'BitNotOp':\n        case 'DoOp':\n        case 'TypeofOp':\n        case 'DeleteOp':\n          return needsParensWhenOnLeft(ast.expression);\n        case 'FunctionApplication':\n          return ast[\"arguments\"].length > 0;\n        default:\n          return false;\n      }\n    };\n    eq = function(nodeA, nodeB) {\n      var i, prop, v, val, _i, _len;\n      for (prop in nodeA) {\n        if (!__hasProp.call(nodeA, prop)) continue;\n        val = nodeA[prop];\n        if (prop === 'raw' || prop === 'line' || prop === 'column') {\n          continue;\n        }\n        switch (Object.prototype.toString.call(val)) {\n          case '[object Object]':\n            if (!eq(nodeB[prop], val)) {\n              return false;\n            }\n            break;\n          case '[object Array]':\n            for (i = _i = 0, _len = val.length; _i < _len; i = ++_i) {\n              v = val[i];\n              if (!eq(nodeB[prop][i], v)) {\n                return false;\n              }\n            }\n            break;\n          default:\n            if (nodeB[prop] !== val) {\n              return false;\n            }\n        }\n      }\n      return true;\n    };\n    clone = function(obj, overrides) {\n      var newObj, prop, val;\n      if (overrides == null) {\n        overrides = {};\n      }\n      newObj = {};\n      for (prop in obj) {\n        if (!__hasProp.call(obj, prop)) continue;\n        val = obj[prop];\n        newObj[prop] = val;\n      }\n      for (prop in overrides) {\n        if (!__hasProp.call(overrides, prop)) continue;\n        val = overrides[prop];\n        newObj[prop] = val;\n      }\n      return newObj;\n    };\n    levels = [['SeqOp'], ['Conditional', 'ForIn', 'ForOf', 'While'], ['FunctionApplication', 'SoakedFunctionApplication'], ['AssignOp', 'CompoundAssignOp', 'ExistsAssignOp'], ['LogicalOrOp'], ['LogicalAndOp'], ['BitOrOp'], ['BitXorOp'], ['BitAndOp'], ['ExistsOp'], ['EQOp', 'NEQOp'], ['LTOp', 'LTEOp', 'GTOp', 'GTEOp', 'InOp', 'OfOp', 'InstanceofOp'], ['LeftShiftOp', 'SignedRightShiftOp', 'UnsignedRightShiftOp'], ['PlusOp', 'SubtractOp'], ['MultiplyOp', 'DivideOp', 'RemOp'], ['UnaryPlusOp', 'UnaryNegateOp', 'LogicalNotOp', 'BitNotOp', 'DoOp', 'TypeofOp', 'PreIncrementOp', 'PreDecrementOp', 'DeleteOp'], ['UnaryExistsOp', 'ShallowCopyArray', 'PostIncrementOp', 'PostDecrementOp', 'Spread'], ['NewOp'], ['MemberAccessOp', 'SoakedMemberAccessOp', 'DynamicMemberAccessOp', 'SoakedDynamicMemberAccessOp', 'ProtoMemberAccessOp', 'DynamicProtoMemberAccessOp', 'SoakedProtoMemberAccessOp', 'SoakedDynamicProtoMemberAccessOp']];\n    precedence = {};\n    (function() {\n      var level, op, ops, _i, _len, _results;\n      _results = [];\n      for (level = _i = 0, _len = levels.length; _i < _len; level = ++_i) {\n        ops = levels[level];\n        _results.push((function() {\n          var _j, _len1, _results1;\n          _results1 = [];\n          for (_j = 0, _len1 = ops.length; _j < _len1; _j++) {\n            op = ops[_j];\n            _results1.push(precedence[op] = level);\n          }\n          return _results1;\n        })());\n      }\n      return _results;\n    })();\n    operators = {\n      SeqOp: ';',\n      LogicalOrOp: 'or',\n      LogicalAndOp: 'and',\n      BitOrOp: '|',\n      BitXorOp: '^',\n      BitAndOp: '&',\n      EQOp: 'is',\n      NEQOp: 'isnt',\n      LTOp: '<',\n      LTEOp: '<=',\n      GTOp: '>',\n      GTEOp: '>=',\n      InOp: 'in',\n      OfOp: 'of',\n      InstanceofOp: 'instanceof',\n      LeftShiftOp: '<<',\n      SignedRightShiftOp: '>>',\n      UnsignedRightShiftOp: '>>>',\n      PlusOp: '+',\n      SubtractOp: '-',\n      MultiplyOp: '*',\n      DivideOp: '/',\n      RemOp: '%',\n      UnaryPlusOp: '+',\n      UnaryNegateOp: '-',\n      LogicalNotOp: 'not ',\n      BitNotOp: '~',\n      DoOp: 'do ',\n      NewOp: 'new ',\n      TypeofOp: 'typeof ',\n      PreIncrementOp: '++',\n      PreDecrementOp: '--',\n      UnaryExistsOp: '?',\n      ShallowCopyArray: '[..]',\n      PostIncrementOp: '++',\n      PostDecrementOp: '--',\n      Spread: '...',\n      FunctionApplication: '',\n      SoakedFunctionApplication: '?',\n      MemberAccessOp: '.',\n      SoakedMemberAccessOp: '?.',\n      ProtoMemberAccessOp: '::',\n      SoakedProtoMemberAccessOp: '?::',\n      DynamicMemberAccessOp: '',\n      SoakedDynamicMemberAccessOp: '?',\n      DynamicProtoMemberAccessOp: '::',\n      SoakedDynamicProtoMemberAccessOp: '?::'\n    };\n    return exports.generate = generate = function(ast, options) {\n      var a, absNum, arg, args, expression_, hasAlternate, i, isMultiline, key_, m, memberAccessOps, members_, needsParens, p, parameters, parent, parentClassName, prec, s, sep, src, usedAsExpression, _alternate, _argList, _args, _assignee, _block, _body, _consequent, _ctor, _expr, _fn, _indexingExpr, _left, _op, _paramList, _ref, _ref1, _right;\n      if (options == null) {\n        options = {};\n      }\n      needsParens = false;\n      if ((_ref = options.precedence) == null) {\n        options.precedence = 0;\n      }\n      if ((_ref1 = options.ancestors) == null) {\n        options.ancestors = [];\n      }\n      parent = options.ancestors[0];\n      parentClassName = parent != null ? parent.className : void 0;\n      usedAsExpression = (parent != null) && parentClassName !== 'Block';\n      src = (function() {\n        var _i, _len, _ref2, _ref3, _ref4, _ref5, _ref6;\n        switch (ast.className) {\n          case 'Program':\n            options.ancestors = [ast].concat(__slice.call(options.ancestors));\n            if (ast.body != null) {\n              return generate(ast.body, options);\n            } else {\n              return '';\n            }\n            break;\n          case 'Block':\n            options = clone(options, {\n              ancestors: [ast].concat(__slice.call(options.ancestors)),\n              precedence: 0\n            });\n            if (ast.statements.length === 0) {\n              return generate((new Undefined).g(), options);\n            } else {\n              sep = parentClassName === 'Program' ? '\\n\\n' : '\\n';\n              return ((function() {\n                var _i, _len, _ref2, _results;\n                _ref2 = ast.statements;\n                _results = [];\n                for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n                  s = _ref2[_i];\n                  _results.push(generate(s, options));\n                }\n                return _results;\n              })()).join(sep);\n            }\n            break;\n          case 'Conditional':\n            options.ancestors.unshift(ast);\n            options.precedence = 0;\n            hasAlternate = (ast.consequent != null) && (ast.alternate != null);\n            _consequent = generate((_ref2 = ast.consequent) != null ? _ref2 : (new Undefined).g(), options);\n            _alternate = hasAlternate ? generate(ast.alternate, options) : \"\";\n            isMultiline = _consequent.length > 90 || _alternate.length > 90 || __indexOf.call(_alternate, '\\n') >= 0 || __indexOf.call(_consequent, '\\n') >= 0;\n            _consequent = isMultiline ? \"\\n\" + (indent(_consequent)) : \" then \" + _consequent;\n            if (hasAlternate) {\n              _alternate = isMultiline ? \"\\nelse\\n\" + (indent(_alternate)) : \" else \" + _alternate;\n            }\n            return \"if \" + (generate(ast.condition, options)) + _consequent + _alternate;\n          case 'Identifier':\n            return ast.data;\n          case 'Null':\n            return 'null';\n          case 'This':\n            return 'this';\n          case 'Undefined':\n            return 'undefined';\n          case 'Int':\n            absNum = ast.data < 0 ? -ast.data : ast.data;\n            if (absNum >= 1e12 || (absNum >= 0x10 && 0 === (absNum & (absNum - 1)))) {\n              return \"0x\" + (ast.data.toString(16));\n            } else {\n              return ast.data.toString(10);\n            }\n            break;\n          case 'Float':\n            return ast.data.toString(10);\n          case 'String':\n            return \"'\" + (formatStringData(ast.data)) + \"'\";\n          case 'ArrayInitialiser':\n            options = clone(options, {\n              ancestors: [ast].concat(__slice.call(options.ancestors)),\n              precedence: precedence.AssignmentExpression\n            });\n            members_ = (function() {\n              var _i, _len, _ref3, _results;\n              _ref3 = ast.members;\n              _results = [];\n              for (_i = 0, _len = _ref3.length; _i < _len; _i++) {\n                m = _ref3[_i];\n                _results.push(generate(m, options));\n              }\n              return _results;\n            })();\n            switch (ast.members.length) {\n              case 0:\n                return '[]';\n              case 1:\n              case 2:\n                for (i = _i = 0, _len = members_.length; _i < _len; i = ++_i) {\n                  m = members_[i];\n                  if (i + 1 !== members_.length) {\n                    if (needsParensWhenOnLeft(ast.members[i])) {\n                      members_[i] = parens(m);\n                    }\n                  }\n                }\n                return \"[\" + (members_.join(', ')) + \"]\";\n              default:\n                return \"[\\n\" + (indent(members_.join('\\n'))) + \"\\n]\";\n            }\n            break;\n          case 'ObjectInitialiser':\n            options.ancestors = [ast].concat(__slice.call(options.ancestors));\n            members_ = (function() {\n              var _j, _len1, _ref3, _results;\n              _ref3 = ast.members;\n              _results = [];\n              for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {\n                m = _ref3[_j];\n                _results.push(generate(m, options));\n              }\n              return _results;\n            })();\n            switch (ast.members.length) {\n              case 0:\n                return '{}';\n              case 1:\n                return \"{\" + (members_.join(', ')) + \"}\";\n              default:\n                return \"{\\n\" + (indent(members_.join('\\n'))) + \"\\n}\";\n            }\n            break;\n          case 'ObjectInitialiserMember':\n            options = clone(options, {\n              ancestors: [ast].concat(__slice.call(options.ancestors)),\n              precedence: precedence.AssignmentExpression\n            });\n            key_ = generate(ast.key, options);\n            expression_ = generate(ast.expression, options);\n            memberAccessOps = ['MemberAccessOp', 'ProtoMemberAccessOp', 'SoakedMemberAccessOp', 'SoakedProtoMemberAccessOp'];\n            if (eq(ast.key, ast.expression)) {\n              return \"\" + key_;\n            } else if ((_ref3 = ast.expression.className, __indexOf.call(memberAccessOps, _ref3) >= 0) && ast.key.data === ast.expression.memberName) {\n              return \"\" + expression_;\n            } else {\n              return \"\" + key_ + \": \" + expression_;\n            }\n            break;\n          case 'Function':\n          case 'BoundFunction':\n            options = clone(options, {\n              ancestors: [ast].concat(__slice.call(options.ancestors)),\n              precedence: precedence.AssignmentExpression\n            });\n            parameters = (function() {\n              var _j, _len1, _ref4, _results;\n              _ref4 = ast.parameters;\n              _results = [];\n              for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {\n                p = _ref4[_j];\n                _results.push(generate(p, options));\n              }\n              return _results;\n            })();\n            options.precedence = 0;\n            _body = !(ast.body != null) || ast.body.className === 'Undefined' ? '' : generate(ast.body, options);\n            _paramList = ast.parameters.length > 0 ? \"(\" + (parameters.join(', ')) + \") \" : '';\n            _block = _body.length === 0 ? '' : _paramList.length + _body.length < 100 && __indexOf.call(_body, '\\n') < 0 ? \" \" + _body : \"\\n\" + (indent(_body));\n            switch (ast.className) {\n              case 'Function':\n                return \"\" + _paramList + \"->\" + _block;\n              case 'BoundFunction':\n                return \"\" + _paramList + \"=>\" + _block;\n            }\n            break;\n          case 'AssignOp':\n            prec = precedence[ast.className];\n            needsParens = prec < options.precedence;\n            options = clone(options, {\n              ancestors: [ast].concat(__slice.call(options.ancestors)),\n              precedence: prec\n            });\n            _assignee = generate(ast.assignee, options);\n            _expr = generate(ast.expression, options);\n            return \"\" + _assignee + \" = \" + _expr;\n          case 'CompoundAssignOp':\n            prec = precedence[ast.className];\n            needsParens = prec < options.precedence;\n            options = clone(options, {\n              ancestors: [ast].concat(__slice.call(options.ancestors)),\n              precedence: prec\n            });\n            _op = operators[ast.op.prototype.className];\n            _assignee = generate(ast.assignee, options);\n            _expr = generate(ast.expression, options);\n            return \"\" + _assignee + \" \" + _op + \"= \" + _expr;\n          case 'SeqOp':\n            prec = precedence[ast.className];\n            needsParens = prec < options.precedence;\n            options = clone(options, {\n              ancestors: [ast].concat(__slice.call(options.ancestors)),\n              precedence: prec\n            });\n            _left = generate(ast.left, options);\n            _right = generate(ast.right, options);\n            return \"\" + _left + \"; \" + _right;\n          case 'LogicalOrOp':\n          case 'LogicalAndOp':\n          case 'BitOrOp':\n          case 'BitXorOp':\n          case 'BitAndOp':\n          case 'LeftShiftOp':\n          case 'SignedRightShiftOp':\n          case 'UnsignedRightShiftOp':\n          case 'EQOp':\n          case 'NEQOp':\n          case 'LTOp':\n          case 'LTEOp':\n          case 'GTOp':\n          case 'GTEOp':\n          case 'InOp':\n          case 'OfOp':\n          case 'InstanceofOp':\n          case 'PlusOp':\n          case 'SubtractOp':\n          case 'MultiplyOp':\n          case 'DivideOp':\n          case 'RemOp':\n          case 'ExistsOp':\n            _op = operators[ast.className];\n            if (((_ref4 = ast.className) === 'InOp' || _ref4 === 'OfOp' || _ref4 === 'InstanceofOp') && parentClassName === 'LogicalNotOp') {\n              _op = \"not \" + _op;\n            }\n            prec = precedence[ast.className];\n            needsParens = prec < options.precedence;\n            options = clone(options, {\n              ancestors: [ast].concat(__slice.call(options.ancestors)),\n              precedence: prec\n            });\n            _left = generate(ast.left, options);\n            if (needsParensWhenOnLeft(ast.left)) {\n              _left = parens(_left);\n            }\n            _right = generate(ast.right, options);\n            return \"\" + _left + \" \" + _op + \" \" + _right;\n          case 'UnaryPlusOp':\n          case 'UnaryNegateOp':\n          case 'LogicalNotOp':\n          case 'BitNotOp':\n          case 'DoOp':\n          case 'TypeofOp':\n          case 'PreIncrementOp':\n          case 'PreDecrementOp':\n            _op = operators[ast.className];\n            prec = precedence[ast.className];\n            if (ast.className === 'LogicalNotOp') {\n              if ((_ref5 = ast.expression.className) === 'InOp' || _ref5 === 'OfOp' || _ref5 === 'InstanceofOp') {\n                _op = '';\n                prec = precedence[ast.expression.className];\n              }\n              if ('LogicalNotOp' === parentClassName || 'LogicalNotOp' === ast.expression.className) {\n                _op = '!';\n              }\n            }\n            needsParens = prec < options.precedence;\n            if (parentClassName === ast.className && ((_ref6 = ast.className) === 'UnaryPlusOp' || _ref6 === 'UnaryNegateOp')) {\n              needsParens = true;\n            }\n            options = clone(options, {\n              ancestors: [ast].concat(__slice.call(options.ancestors)),\n              precedence: prec\n            });\n            return \"\" + _op + (generate(ast.expression, options));\n          case 'UnaryExistsOp':\n          case 'PostIncrementOp':\n          case 'PostDecrementOp':\n          case 'Spread':\n            _op = operators[ast.className];\n            prec = precedence[ast.className];\n            needsParens = prec < options.precedence;\n            options = clone(options, {\n              ancestors: [ast].concat(__slice.call(options.ancestors)),\n              precedence: prec\n            });\n            _expr = generate(ast.expression, options);\n            if (needsParensWhenOnLeft(ast.expression)) {\n              _expr = parens(_expr);\n            }\n            return \"\" + _expr + _op;\n          case 'NewOp':\n            _op = operators[ast.className];\n            prec = precedence[ast.className];\n            options = clone(options, {\n              ancestors: [ast].concat(__slice.call(options.ancestors)),\n              precedence: prec\n            });\n            _ctor = generate(ast.ctor, options);\n            if (ast[\"arguments\"].length > 0 && needsParensWhenOnLeft(ast.ctor)) {\n              _ctor = parens(_ctor);\n            }\n            options.precedence = precedence['AssignOp'];\n            args = (function() {\n              var _j, _len1, _ref7, _results;\n              _ref7 = ast[\"arguments\"];\n              _results = [];\n              for (i = _j = 0, _len1 = _ref7.length; _j < _len1; i = ++_j) {\n                a = _ref7[i];\n                arg = generate(a, options);\n                if ((needsParensWhenOnLeft(a)) && i + 1 !== ast[\"arguments\"].length) {\n                  arg = parens(arg);\n                }\n                _results.push(arg);\n              }\n              return _results;\n            })();\n            _args = ast[\"arguments\"].length === 0 ? '' : \" \" + (args.join(', '));\n            return \"\" + _op + _ctor + _args;\n          case 'FunctionApplication':\n          case 'SoakedFunctionApplication':\n            if (ast.className === 'FunctionApplication' && ast[\"arguments\"].length === 0 && !usedAsExpression) {\n              return generate(new DoOp(ast[\"function\"]), options);\n            } else {\n              options = clone(options, {\n                ancestors: [ast].concat(__slice.call(options.ancestors)),\n                precedence: precedence[ast.className]\n              });\n              _op = operators[ast.className];\n              _fn = generate(ast[\"function\"], options);\n              if (needsParensWhenOnLeft(ast[\"function\"])) {\n                _fn = parens(_fn);\n              }\n              args = (function() {\n                var _j, _len1, _ref7, _results;\n                _ref7 = ast[\"arguments\"];\n                _results = [];\n                for (i = _j = 0, _len1 = _ref7.length; _j < _len1; i = ++_j) {\n                  a = _ref7[i];\n                  arg = generate(a, options);\n                  if ((needsParensWhenOnLeft(a)) && i + 1 !== ast[\"arguments\"].length) {\n                    arg = parens(arg);\n                  }\n                  _results.push(arg);\n                }\n                return _results;\n              })();\n              _argList = ast[\"arguments\"].length === 0 ? '()' : \" \" + (args.join(', '));\n              return \"\" + _fn + _op + _argList;\n            }\n            break;\n          case 'MemberAccessOp':\n          case 'SoakedMemberAccessOp':\n          case 'ProtoMemberAccessOp':\n          case 'SoakedProtoMemberAccessOp':\n            _op = operators[ast.className];\n            prec = precedence[ast.className];\n            needsParens = prec < options.precedence;\n            options = clone(options, {\n              ancestors: [ast].concat(__slice.call(options.ancestors)),\n              precedence: prec\n            });\n            if (ast.expression.className === 'This') {\n              _expr = '@';\n              if (ast.className === 'MemberAccessOp') {\n                _op = '';\n              }\n            } else {\n              _expr = generate(ast.expression, options);\n              if (needsParensWhenOnLeft(ast.expression)) {\n                _expr = parens(_expr);\n              }\n            }\n            return \"\" + _expr + _op + ast.memberName;\n          case 'DynamicMemberAccessOp':\n          case 'SoakedDynamicMemberAccessOp':\n          case 'DynamicProtoMemberAccessOp':\n          case 'SoakedDynamicProtoMemberAccessOp':\n            _op = operators[ast.className];\n            prec = precedence[ast.className];\n            needsParens = prec < options.precedence;\n            options = clone(options, {\n              ancestors: [ast].concat(__slice.call(options.ancestors)),\n              precedence: prec\n            });\n            if (ast.expression.className === 'This') {\n              _expr = '@';\n            } else {\n              _expr = generate(ast.expression, options);\n              if (needsParensWhenOnLeft(ast.expression)) {\n                _expr = parens(_expr);\n              }\n            }\n            options.precedence = 0;\n            _indexingExpr = generate(ast.indexingExpr, options);\n            return \"\" + _expr + _op + \"[\" + _indexingExpr + \"]\";\n          case 'ConcatOp':\n            _left = formatInterpolation(ast.left, options);\n            _right = formatInterpolation(ast.right, options);\n            return \"\\\"\" + _left + _right + \"\\\"\";\n          default:\n            throw new Error(\"Non-exhaustive patterns in case: \" + ast.className);\n        }\n      })();\n      if (needsParens) {\n        return parens(src);\n      } else {\n        return src;\n      }\n    };\n  })(typeof exports !== \"undefined\" && exports !== null ? exports : this.cscodegen = {});\n\n}).call(this);\n\n},{}],14:[function(require,module,exports){\n(function (global){\n/*\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>\n  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>\n  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>\n  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>\n  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>\n  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>\n  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>\n  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/*global exports:true, generateStatement:true, generateExpression:true, require:true, global:true*/\n(function () {\n    'use strict';\n\n    var Syntax,\n        Precedence,\n        BinaryPrecedence,\n        SourceNode,\n        estraverse,\n        esutils,\n        isArray,\n        base,\n        indent,\n        json,\n        renumber,\n        hexadecimal,\n        quotes,\n        escapeless,\n        newline,\n        space,\n        parentheses,\n        semicolons,\n        safeConcatenation,\n        directive,\n        extra,\n        parse,\n        sourceMap,\n        FORMAT_MINIFY,\n        FORMAT_DEFAULTS;\n\n    estraverse = require('estraverse');\n    esutils = require('esutils');\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ComprehensionBlock: 'ComprehensionBlock',\n        ComprehensionExpression: 'ComprehensionExpression',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DirectiveStatement: 'DirectiveStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExportDeclaration: 'ExportDeclaration',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        ForOfStatement: 'ForOfStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        GeneratorExpression: 'GeneratorExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n    };\n\n    Precedence = {\n        Sequence: 0,\n        Yield: 1,\n        Assignment: 1,\n        Conditional: 2,\n        ArrowFunction: 2,\n        LogicalOR: 3,\n        LogicalAND: 4,\n        BitwiseOR: 5,\n        BitwiseXOR: 6,\n        BitwiseAND: 7,\n        Equality: 8,\n        Relational: 9,\n        BitwiseSHIFT: 10,\n        Additive: 11,\n        Multiplicative: 12,\n        Unary: 13,\n        Postfix: 14,\n        Call: 15,\n        New: 16,\n        Member: 17,\n        Primary: 18\n    };\n\n    BinaryPrecedence = {\n        '||': Precedence.LogicalOR,\n        '&&': Precedence.LogicalAND,\n        '|': Precedence.BitwiseOR,\n        '^': Precedence.BitwiseXOR,\n        '&': Precedence.BitwiseAND,\n        '==': Precedence.Equality,\n        '!=': Precedence.Equality,\n        '===': Precedence.Equality,\n        '!==': Precedence.Equality,\n        'is': Precedence.Equality,\n        'isnt': Precedence.Equality,\n        '<': Precedence.Relational,\n        '>': Precedence.Relational,\n        '<=': Precedence.Relational,\n        '>=': Precedence.Relational,\n        'in': Precedence.Relational,\n        'instanceof': Precedence.Relational,\n        '<<': Precedence.BitwiseSHIFT,\n        '>>': Precedence.BitwiseSHIFT,\n        '>>>': Precedence.BitwiseSHIFT,\n        '+': Precedence.Additive,\n        '-': Precedence.Additive,\n        '*': Precedence.Multiplicative,\n        '%': Precedence.Multiplicative,\n        '/': Precedence.Multiplicative\n    };\n\n    function getDefaultOptions() {\n        // default options\n        return {\n            indent: null,\n            base: null,\n            parse: null,\n            comment: false,\n            format: {\n                indent: {\n                    style: '    ',\n                    base: 0,\n                    adjustMultilineComment: false\n                },\n                newline: '\\n',\n                space: ' ',\n                json: false,\n                renumber: false,\n                hexadecimal: false,\n                quotes: 'single',\n                escapeless: false,\n                compact: false,\n                parentheses: true,\n                semicolons: true,\n                safeConcatenation: false\n            },\n            moz: {\n                comprehensionExpressionStartsWithAssignment: false,\n                starlessGenerator: false,\n                parenthesizedComprehensionBlock: false\n            },\n            sourceMap: null,\n            sourceMapRoot: null,\n            sourceMapWithCode: false,\n            directive: false,\n            verbatim: null\n        };\n    }\n\n    function stringRepeat(str, num) {\n        var result = '';\n\n        for (num |= 0; num > 0; num >>>= 1, str += str) {\n            if (num & 1) {\n                result += str;\n            }\n        }\n\n        return result;\n    }\n\n    isArray = Array.isArray;\n    if (!isArray) {\n        isArray = function isArray(array) {\n            return Object.prototype.toString.call(array) === '[object Array]';\n        };\n    }\n\n    function hasLineTerminator(str) {\n        return (/[\\r\\n]/g).test(str);\n    }\n\n    function endsWithLineTerminator(str) {\n        var len = str.length;\n        return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));\n    }\n\n    function updateDeeply(target, override) {\n        var key, val;\n\n        function isHashObject(target) {\n            return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);\n        }\n\n        for (key in override) {\n            if (override.hasOwnProperty(key)) {\n                val = override[key];\n                if (isHashObject(val)) {\n                    if (isHashObject(target[key])) {\n                        updateDeeply(target[key], val);\n                    } else {\n                        target[key] = updateDeeply({}, val);\n                    }\n                } else {\n                    target[key] = val;\n                }\n            }\n        }\n        return target;\n    }\n\n    function generateNumber(value) {\n        var result, point, temp, exponent, pos;\n\n        if (value !== value) {\n            throw new Error('Numeric literal whose value is NaN');\n        }\n        if (value < 0 || (value === 0 && 1 / value < 0)) {\n            throw new Error('Numeric literal whose value is negative');\n        }\n\n        if (value === 1 / 0) {\n            return json ? 'null' : renumber ? '1e400' : '1e+400';\n        }\n\n        result = '' + value;\n        if (!renumber || result.length < 3) {\n            return result;\n        }\n\n        point = result.indexOf('.');\n        if (!json && result.charCodeAt(0) === 0x30  /* 0 */ && point === 1) {\n            point = 0;\n            result = result.slice(1);\n        }\n        temp = result;\n        result = result.replace('e+', 'e');\n        exponent = 0;\n        if ((pos = temp.indexOf('e')) > 0) {\n            exponent = +temp.slice(pos + 1);\n            temp = temp.slice(0, pos);\n        }\n        if (point >= 0) {\n            exponent -= temp.length - point - 1;\n            temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';\n        }\n        pos = 0;\n        while (temp.charCodeAt(temp.length + pos - 1) === 0x30  /* 0 */) {\n            --pos;\n        }\n        if (pos !== 0) {\n            exponent -= pos;\n            temp = temp.slice(0, pos);\n        }\n        if (exponent !== 0) {\n            temp += 'e' + exponent;\n        }\n        if ((temp.length < result.length ||\n                    (hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length)) &&\n                +temp === value) {\n            result = temp;\n        }\n\n        return result;\n    }\n\n    // Generate valid RegExp expression.\n    // This function is based on https://github.com/Constellation/iv Engine\n\n    function escapeRegExpCharacter(ch, previousIsBackslash) {\n        // not handling '\\' and handling \\u2028 or \\u2029 to unicode escape sequence\n        if ((ch & ~1) === 0x2028) {\n            return (previousIsBackslash ? 'u' : '\\\\u') + ((ch === 0x2028) ? '2028' : '2029');\n        } else if (ch === 10 || ch === 13) {  // \\n, \\r\n            return (previousIsBackslash ? '' : '\\\\') + ((ch === 10) ? 'n' : 'r');\n        }\n        return String.fromCharCode(ch);\n    }\n\n    function generateRegExp(reg) {\n        var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;\n\n        result = reg.toString();\n\n        if (reg.source) {\n            // extract flag from toString result\n            match = result.match(/\\/([^/]*)$/);\n            if (!match) {\n                return result;\n            }\n\n            flags = match[1];\n            result = '';\n\n            characterInBrack = false;\n            previousIsBackslash = false;\n            for (i = 0, iz = reg.source.length; i < iz; ++i) {\n                ch = reg.source.charCodeAt(i);\n\n                if (!previousIsBackslash) {\n                    if (characterInBrack) {\n                        if (ch === 93) {  // ]\n                            characterInBrack = false;\n                        }\n                    } else {\n                        if (ch === 47) {  // /\n                            result += '\\\\';\n                        } else if (ch === 91) {  // [\n                            characterInBrack = true;\n                        }\n                    }\n                    result += escapeRegExpCharacter(ch, previousIsBackslash);\n                    previousIsBackslash = ch === 92;  // \\\n                } else {\n                    // if new RegExp(\"\\\\\\n') is provided, create /\\n/\n                    result += escapeRegExpCharacter(ch, previousIsBackslash);\n                    // prevent like /\\\\[/]/\n                    previousIsBackslash = false;\n                }\n            }\n\n            return '/' + result + '/' + flags;\n        }\n\n        return result;\n    }\n\n    function escapeAllowedCharacter(code, next) {\n        var hex, result = '\\\\';\n\n        switch (code) {\n        case 0x08  /* \\b */:\n            result += 'b';\n            break;\n        case 0x0C  /* \\f */:\n            result += 'f';\n            break;\n        case 0x09  /* \\t */:\n            result += 't';\n            break;\n        default:\n            hex = code.toString(16).toUpperCase();\n            if (json || code > 0xFF) {\n                result += 'u' + '0000'.slice(hex.length) + hex;\n            } else if (code === 0x0000 && !esutils.code.isDecimalDigit(next)) {\n                result += '0';\n            } else if (code === 0x000B  /* \\v */) { // '\\v'\n                result += 'x0B';\n            } else {\n                result += 'x' + '00'.slice(hex.length) + hex;\n            }\n            break;\n        }\n\n        return result;\n    }\n\n    function escapeDisallowedCharacter(code) {\n        var result = '\\\\';\n        switch (code) {\n        case 0x5C  /* \\ */:\n            result += '\\\\';\n            break;\n        case 0x0A  /* \\n */:\n            result += 'n';\n            break;\n        case 0x0D  /* \\r */:\n            result += 'r';\n            break;\n        case 0x2028:\n            result += 'u2028';\n            break;\n        case 0x2029:\n            result += 'u2029';\n            break;\n        default:\n            throw new Error('Incorrectly classified character');\n        }\n\n        return result;\n    }\n\n    function escapeDirective(str) {\n        var i, iz, code, quote;\n\n        quote = quotes === 'double' ? '\"' : '\\'';\n        for (i = 0, iz = str.length; i < iz; ++i) {\n            code = str.charCodeAt(i);\n            if (code === 0x27  /* ' */) {\n                quote = '\"';\n                break;\n            } else if (code === 0x22  /* \" */) {\n                quote = '\\'';\n                break;\n            } else if (code === 0x5C  /* \\ */) {\n                ++i;\n            }\n        }\n\n        return quote + str + quote;\n    }\n\n    function escapeString(str) {\n        var result = '', i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;\n\n        for (i = 0, len = str.length; i < len; ++i) {\n            code = str.charCodeAt(i);\n            if (code === 0x27  /* ' */) {\n                ++singleQuotes;\n            } else if (code === 0x22  /* \" */) {\n                ++doubleQuotes;\n            } else if (code === 0x2F  /* / */ && json) {\n                result += '\\\\';\n            } else if (esutils.code.isLineTerminator(code) || code === 0x5C  /* \\ */) {\n                result += escapeDisallowedCharacter(code);\n                continue;\n            } else if ((json && code < 0x20  /* SP */) || !(json || escapeless || (code >= 0x20  /* SP */ && code <= 0x7E  /* ~ */))) {\n                result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));\n                continue;\n            }\n            result += String.fromCharCode(code);\n        }\n\n        single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));\n        quote = single ? '\\'' : '\"';\n\n        if (!(single ? singleQuotes : doubleQuotes)) {\n            return quote + result + quote;\n        }\n\n        str = result;\n        result = quote;\n\n        for (i = 0, len = str.length; i < len; ++i) {\n            code = str.charCodeAt(i);\n            if ((code === 0x27  /* ' */ && single) || (code === 0x22  /* \" */ && !single)) {\n                result += '\\\\';\n            }\n            result += String.fromCharCode(code);\n        }\n\n        return result + quote;\n    }\n\n    /**\n     * flatten an array to a string, where the array can contain\n     * either strings or nested arrays\n     */\n    function flattenToString(arr) {\n        var i, iz, elem, result = '';\n        for (i = 0, iz = arr.length; i < iz; ++i) {\n            elem = arr[i];\n            result += isArray(elem) ? flattenToString(elem) : elem;\n        }\n        return result;\n    }\n\n    /**\n     * convert generated to a SourceNode when source maps are enabled.\n     */\n    function toSourceNodeWhenNeeded(generated, node) {\n        if (!sourceMap) {\n            // with no source maps, generated is either an\n            // array or a string.  if an array, flatten it.\n            // if a string, just return it\n            if (isArray(generated)) {\n                return flattenToString(generated);\n            } else {\n                return generated;\n            }\n        }\n        if (node == null) {\n            if (generated instanceof SourceNode) {\n                return generated;\n            } else {\n                node = {};\n            }\n        }\n        if (node.loc == null) {\n            return new SourceNode(null, null, sourceMap, generated, node.name || null);\n        }\n        return new SourceNode(node.loc.start.line, node.loc.start.column, (sourceMap === true ? node.loc.source || null : sourceMap), generated, node.name || null);\n    }\n\n    function noEmptySpace() {\n        return (space) ? space : ' ';\n    }\n\n    function join(left, right) {\n        var leftSource = toSourceNodeWhenNeeded(left).toString(),\n            rightSource = toSourceNodeWhenNeeded(right).toString(),\n            leftCharCode = leftSource.charCodeAt(leftSource.length - 1),\n            rightCharCode = rightSource.charCodeAt(0);\n\n        if ((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode ||\n        esutils.code.isIdentifierPart(leftCharCode) && esutils.code.isIdentifierPart(rightCharCode) ||\n        leftCharCode === 0x2F  /* / */ && rightCharCode === 0x69  /* i */) { // infix word operators all start with `i`\n            return [left, noEmptySpace(), right];\n        } else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) ||\n                esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) {\n            return [left, right];\n        }\n        return [left, space, right];\n    }\n\n    function addIndent(stmt) {\n        return [base, stmt];\n    }\n\n    function withIndent(fn) {\n        var previousBase, result;\n        previousBase = base;\n        base += indent;\n        result = fn.call(this, base);\n        base = previousBase;\n        return result;\n    }\n\n    function calculateSpaces(str) {\n        var i;\n        for (i = str.length - 1; i >= 0; --i) {\n            if (esutils.code.isLineTerminator(str.charCodeAt(i))) {\n                break;\n            }\n        }\n        return (str.length - 1) - i;\n    }\n\n    function adjustMultilineComment(value, specialBase) {\n        var array, i, len, line, j, spaces, previousBase, sn;\n\n        array = value.split(/\\r\\n|[\\r\\n]/);\n        spaces = Number.MAX_VALUE;\n\n        // first line doesn't have indentation\n        for (i = 1, len = array.length; i < len; ++i) {\n            line = array[i];\n            j = 0;\n            while (j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))) {\n                ++j;\n            }\n            if (spaces > j) {\n                spaces = j;\n            }\n        }\n\n        if (typeof specialBase !== 'undefined') {\n            // pattern like\n            // {\n            //   var t = 20;  /*\n            //                 * this is comment\n            //                 */\n            // }\n            previousBase = base;\n            if (array[1][spaces] === '*') {\n                specialBase += ' ';\n            }\n            base = specialBase;\n        } else {\n            if (spaces & 1) {\n                // /*\n                //  *\n                //  */\n                // If spaces are odd number, above pattern is considered.\n                // We waste 1 space.\n                --spaces;\n            }\n            previousBase = base;\n        }\n\n        for (i = 1, len = array.length; i < len; ++i) {\n            sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));\n            array[i] = sourceMap ? sn.join('') : sn;\n        }\n\n        base = previousBase;\n\n        return array.join('\\n');\n    }\n\n    function generateComment(comment, specialBase) {\n        if (comment.type === 'Line') {\n            if (endsWithLineTerminator(comment.value)) {\n                return '//' + comment.value;\n            } else {\n                // Always use LineTerminator\n                return '//' + comment.value + '\\n';\n            }\n        }\n        if (extra.format.indent.adjustMultilineComment && /[\\n\\r]/.test(comment.value)) {\n            return adjustMultilineComment('/*' + comment.value + '*/', specialBase);\n        }\n        return '/*' + comment.value + '*/';\n    }\n\n    function addCommentsToStatement(stmt, result) {\n        var i, len, comment, save, tailingToStatement, specialBase, fragment;\n\n        if (stmt.leadingComments && stmt.leadingComments.length > 0) {\n            save = result;\n\n            comment = stmt.leadingComments[0];\n            result = [];\n            if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {\n                result.push('\\n');\n            }\n            result.push(generateComment(comment));\n            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push('\\n');\n            }\n\n            for (i = 1, len = stmt.leadingComments.length; i < len; ++i) {\n                comment = stmt.leadingComments[i];\n                fragment = [generateComment(comment)];\n                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                    fragment.push('\\n');\n                }\n                result.push(addIndent(fragment));\n            }\n\n            result.push(addIndent(save));\n        }\n\n        if (stmt.trailingComments) {\n            tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());\n            specialBase = stringRepeat(' ', calculateSpaces(toSourceNodeWhenNeeded([base, result, indent]).toString()));\n            for (i = 0, len = stmt.trailingComments.length; i < len; ++i) {\n                comment = stmt.trailingComments[i];\n                if (tailingToStatement) {\n                    // We assume target like following script\n                    //\n                    // var t = 20;  /**\n                    //               * This is comment of t\n                    //               */\n                    if (i === 0) {\n                        // first case\n                        result = [result, indent];\n                    } else {\n                        result = [result, specialBase];\n                    }\n                    result.push(generateComment(comment, specialBase));\n                } else {\n                    result = [result, addIndent(generateComment(comment))];\n                }\n                if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                    result = [result, '\\n'];\n                }\n            }\n        }\n\n        return result;\n    }\n\n    function parenthesize(text, current, should) {\n        if (current < should) {\n            return ['(', text, ')'];\n        }\n        return text;\n    }\n\n    function maybeBlock(stmt, semicolonOptional, functionBody) {\n        var result, noLeadingComment;\n\n        noLeadingComment = !extra.comment || !stmt.leadingComments;\n\n        if (stmt.type === Syntax.BlockStatement && noLeadingComment) {\n            return [space, generateStatement(stmt, { functionBody: functionBody })];\n        }\n\n        if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {\n            return ';';\n        }\n\n        withIndent(function () {\n            result = [newline, addIndent(generateStatement(stmt, { semicolonOptional: semicolonOptional, functionBody: functionBody }))];\n        });\n\n        return result;\n    }\n\n    function maybeBlockSuffix(stmt, result) {\n        var ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());\n        if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {\n            return [result, space];\n        }\n        if (ends) {\n            return [result, base];\n        }\n        return [result, newline, base];\n    }\n\n    function generateVerbatim(expr, option) {\n        var i, result;\n        result = expr[extra.verbatim].split(/\\r\\n|\\n/);\n        for (i = 1; i < result.length; i++) {\n            result[i] = newline + base + result[i];\n        }\n\n        result = parenthesize(result, Precedence.Sequence, option.precedence);\n        return toSourceNodeWhenNeeded(result, expr);\n    }\n\n    function generateIdentifier(node) {\n        return toSourceNodeWhenNeeded(node.name, node);\n    }\n\n    function generatePattern(node, options) {\n        var result;\n\n        if (node.type === Syntax.Identifier) {\n            result = generateIdentifier(node);\n        } else {\n            result = generateExpression(node, {\n                precedence: options.precedence,\n                allowIn: options.allowIn,\n                allowCall: true\n            });\n        }\n\n        return result;\n    }\n\n    function generateFunctionBody(node) {\n        var result, i, len, expr, arrow;\n\n        arrow = node.type === Syntax.ArrowFunctionExpression;\n\n        if (arrow && node.params.length === 1 && node.params[0].type === Syntax.Identifier) {\n            // arg => { } case\n            result = [generateIdentifier(node.params[0])];\n        } else {\n            result = ['('];\n            for (i = 0, len = node.params.length; i < len; ++i) {\n                result.push(generatePattern(node.params[i], {\n                    precedence: Precedence.Assignment,\n                    allowIn: true\n                }));\n                if (i + 1 < len) {\n                    result.push(',' + space);\n                }\n            }\n            result.push(')');\n        }\n\n        if (arrow) {\n            result.push(space);\n            result.push('=>');\n        }\n\n        if (node.expression) {\n            result.push(space);\n            expr = generateExpression(node.body, {\n                precedence: Precedence.Assignment,\n                allowIn: true,\n                allowCall: true\n            });\n            if (expr.toString().charAt(0) === '{') {\n                expr = ['(', expr, ')'];\n            }\n            result.push(expr);\n        } else {\n            result.push(maybeBlock(node.body, false, true));\n        }\n        return result;\n    }\n\n    function generateIterationForStatement(operator, stmt, semicolonIsNotNeeded) {\n        var result = ['for' + space + '('];\n        withIndent(function () {\n            if (stmt.left.type === Syntax.VariableDeclaration) {\n                withIndent(function () {\n                    result.push(stmt.left.kind + noEmptySpace());\n                    result.push(generateStatement(stmt.left.declarations[0], {\n                        allowIn: false\n                    }));\n                });\n            } else {\n                result.push(generateExpression(stmt.left, {\n                    precedence: Precedence.Call,\n                    allowIn: true,\n                    allowCall: true\n                }));\n            }\n\n            result = join(result, operator);\n            result = [join(\n                result,\n                generateExpression(stmt.right, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true\n                })\n            ), ')'];\n        });\n        result.push(maybeBlock(stmt.body, semicolonIsNotNeeded));\n        return result;\n    }\n\n    function generateExpression(expr, option) {\n        var result,\n            precedence,\n            type,\n            currentPrecedence,\n            i,\n            len,\n            raw,\n            fragment,\n            multiline,\n            leftCharCode,\n            leftSource,\n            rightCharCode,\n            allowIn,\n            allowCall,\n            allowUnparenthesizedNew,\n            property,\n            isGenerator;\n\n        precedence = option.precedence;\n        allowIn = option.allowIn;\n        allowCall = option.allowCall;\n        type = expr.type || option.type;\n\n        if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {\n            return generateVerbatim(expr, option);\n        }\n\n        switch (type) {\n        case Syntax.SequenceExpression:\n            result = [];\n            allowIn |= (Precedence.Sequence < precedence);\n            for (i = 0, len = expr.expressions.length; i < len; ++i) {\n                result.push(generateExpression(expr.expressions[i], {\n                    precedence: Precedence.Assignment,\n                    allowIn: allowIn,\n                    allowCall: true\n                }));\n                if (i + 1 < len) {\n                    result.push(',' + space);\n                }\n            }\n            result = parenthesize(result, Precedence.Sequence, precedence);\n            break;\n\n        case Syntax.AssignmentExpression:\n            allowIn |= (Precedence.Assignment < precedence);\n            result = parenthesize(\n                [\n                    generateExpression(expr.left, {\n                        precedence: Precedence.Call,\n                        allowIn: allowIn,\n                        allowCall: true\n                    }),\n                    space + expr.operator + space,\n                    generateExpression(expr.right, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    })\n                ],\n                Precedence.Assignment,\n                precedence\n            );\n            break;\n\n        case Syntax.ArrowFunctionExpression:\n            allowIn |= (Precedence.ArrowFunction < precedence);\n            result = parenthesize(generateFunctionBody(expr), Precedence.ArrowFunction, precedence);\n            break;\n\n        case Syntax.ConditionalExpression:\n            allowIn |= (Precedence.Conditional < precedence);\n            result = parenthesize(\n                [\n                    generateExpression(expr.test, {\n                        precedence: Precedence.LogicalOR,\n                        allowIn: allowIn,\n                        allowCall: true\n                    }),\n                    space + '?' + space,\n                    generateExpression(expr.consequent, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    }),\n                    space + ':' + space,\n                    generateExpression(expr.alternate, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    })\n                ],\n                Precedence.Conditional,\n                precedence\n            );\n            break;\n\n        case Syntax.LogicalExpression:\n        case Syntax.BinaryExpression:\n            currentPrecedence = BinaryPrecedence[expr.operator];\n\n            allowIn |= (currentPrecedence < precedence);\n\n            fragment = generateExpression(expr.left, {\n                precedence: currentPrecedence,\n                allowIn: allowIn,\n                allowCall: true\n            });\n\n            leftSource = fragment.toString();\n\n            if (leftSource.charCodeAt(leftSource.length - 1) === 0x2F /* / */ && esutils.code.isIdentifierPart(expr.operator.charCodeAt(0))) {\n                result = [fragment, noEmptySpace(), expr.operator];\n            } else {\n                result = join(fragment, expr.operator);\n            }\n\n            fragment = generateExpression(expr.right, {\n                precedence: currentPrecedence + 1,\n                allowIn: allowIn,\n                allowCall: true\n            });\n\n            if (expr.operator === '/' && fragment.toString().charAt(0) === '/' ||\n            expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {\n                // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start\n                result.push(noEmptySpace());\n                result.push(fragment);\n            } else {\n                result = join(result, fragment);\n            }\n\n            if (expr.operator === 'in' && !allowIn) {\n                result = ['(', result, ')'];\n            } else {\n                result = parenthesize(result, currentPrecedence, precedence);\n            }\n\n            break;\n\n        case Syntax.CallExpression:\n            result = [generateExpression(expr.callee, {\n                precedence: Precedence.Call,\n                allowIn: true,\n                allowCall: true,\n                allowUnparenthesizedNew: false\n            })];\n\n            result.push('(');\n            for (i = 0, len = expr['arguments'].length; i < len; ++i) {\n                result.push(generateExpression(expr['arguments'][i], {\n                    precedence: Precedence.Assignment,\n                    allowIn: true,\n                    allowCall: true\n                }));\n                if (i + 1 < len) {\n                    result.push(',' + space);\n                }\n            }\n            result.push(')');\n\n            if (!allowCall) {\n                result = ['(', result, ')'];\n            } else {\n                result = parenthesize(result, Precedence.Call, precedence);\n            }\n            break;\n\n        case Syntax.NewExpression:\n            len = expr['arguments'].length;\n            allowUnparenthesizedNew = option.allowUnparenthesizedNew === undefined || option.allowUnparenthesizedNew;\n\n            result = join(\n                'new',\n                generateExpression(expr.callee, {\n                    precedence: Precedence.New,\n                    allowIn: true,\n                    allowCall: false,\n                    allowUnparenthesizedNew: allowUnparenthesizedNew && !parentheses && len === 0\n                })\n            );\n\n            if (!allowUnparenthesizedNew || parentheses || len > 0) {\n                result.push('(');\n                for (i = 0; i < len; ++i) {\n                    result.push(generateExpression(expr['arguments'][i], {\n                        precedence: Precedence.Assignment,\n                        allowIn: true,\n                        allowCall: true\n                    }));\n                    if (i + 1 < len) {\n                        result.push(',' + space);\n                    }\n                }\n                result.push(')');\n            }\n\n            result = parenthesize(result, Precedence.New, precedence);\n            break;\n\n        case Syntax.MemberExpression:\n            result = [generateExpression(expr.object, {\n                precedence: Precedence.Call,\n                allowIn: true,\n                allowCall: allowCall,\n                allowUnparenthesizedNew: false\n            })];\n\n            if (expr.computed) {\n                result.push('[');\n                result.push(generateExpression(expr.property, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: allowCall\n                }));\n                result.push(']');\n            } else {\n                if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {\n                    fragment = toSourceNodeWhenNeeded(result).toString();\n                    // When the following conditions are all true,\n                    //   1. No floating point\n                    //   2. Don't have exponents\n                    //   3. The last character is a decimal digit\n                    //   4. Not hexadecimal OR octal number literal\n                    // we should add a floating point.\n                    if (\n                            fragment.indexOf('.') < 0 &&\n                            !/[eExX]/.test(fragment) &&\n                            esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) &&\n                            !(fragment.length >= 2 && fragment.charCodeAt(0) === 48)  // '0'\n                            ) {\n                        result.push('.');\n                    }\n                }\n                result.push('.');\n                result.push(generateIdentifier(expr.property));\n            }\n\n            result = parenthesize(result, Precedence.Member, precedence);\n            break;\n\n        case Syntax.UnaryExpression:\n            fragment = generateExpression(expr.argument, {\n                precedence: Precedence.Unary,\n                allowIn: true,\n                allowCall: true\n            });\n\n            if (space === '') {\n                result = join(expr.operator, fragment);\n            } else {\n                result = [expr.operator];\n                if (expr.operator.length > 2) {\n                    // delete, void, typeof\n                    // get `typeof []`, not `typeof[]`\n                    result = join(result, fragment);\n                } else {\n                    // Prevent inserting spaces between operator and argument if it is unnecessary\n                    // like, `!cond`\n                    leftSource = toSourceNodeWhenNeeded(result).toString();\n                    leftCharCode = leftSource.charCodeAt(leftSource.length - 1);\n                    rightCharCode = fragment.toString().charCodeAt(0);\n\n                    if (((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode) ||\n                            (esutils.code.isIdentifierPart(leftCharCode) && esutils.code.isIdentifierPart(rightCharCode))) {\n                        result.push(noEmptySpace());\n                        result.push(fragment);\n                    } else {\n                        result.push(fragment);\n                    }\n                }\n            }\n            result = parenthesize(result, Precedence.Unary, precedence);\n            break;\n\n        case Syntax.YieldExpression:\n            if (expr.delegate) {\n                result = 'yield*';\n            } else {\n                result = 'yield';\n            }\n            if (expr.argument) {\n                result = join(\n                    result,\n                    generateExpression(expr.argument, {\n                        precedence: Precedence.Yield,\n                        allowIn: true,\n                        allowCall: true\n                    })\n                );\n            }\n            result = parenthesize(result, Precedence.Yield, precedence);\n            break;\n\n        case Syntax.UpdateExpression:\n            if (expr.prefix) {\n                result = parenthesize(\n                    [\n                        expr.operator,\n                        generateExpression(expr.argument, {\n                            precedence: Precedence.Unary,\n                            allowIn: true,\n                            allowCall: true\n                        })\n                    ],\n                    Precedence.Unary,\n                    precedence\n                );\n            } else {\n                result = parenthesize(\n                    [\n                        generateExpression(expr.argument, {\n                            precedence: Precedence.Postfix,\n                            allowIn: true,\n                            allowCall: true\n                        }),\n                        expr.operator\n                    ],\n                    Precedence.Postfix,\n                    precedence\n                );\n            }\n            break;\n\n        case Syntax.FunctionExpression:\n            isGenerator = expr.generator && !extra.moz.starlessGenerator;\n            result = isGenerator ? 'function*' : 'function';\n\n            if (expr.id) {\n                result = [result, (isGenerator) ? space : noEmptySpace(),\n                          generateIdentifier(expr.id),\n                          generateFunctionBody(expr)];\n            } else {\n                result = [result + space, generateFunctionBody(expr)];\n            }\n\n            break;\n\n        case Syntax.ArrayPattern:\n        case Syntax.ArrayExpression:\n            if (!expr.elements.length) {\n                result = '[]';\n                break;\n            }\n            multiline = expr.elements.length > 1;\n            result = ['[', multiline ? newline : ''];\n            withIndent(function (indent) {\n                for (i = 0, len = expr.elements.length; i < len; ++i) {\n                    if (!expr.elements[i]) {\n                        if (multiline) {\n                            result.push(indent);\n                        }\n                        if (i + 1 === len) {\n                            result.push(',');\n                        }\n                    } else {\n                        result.push(multiline ? indent : '');\n                        result.push(generateExpression(expr.elements[i], {\n                            precedence: Precedence.Assignment,\n                            allowIn: true,\n                            allowCall: true\n                        }));\n                    }\n                    if (i + 1 < len) {\n                        result.push(',' + (multiline ? newline : space));\n                    }\n                }\n            });\n            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(multiline ? base : '');\n            result.push(']');\n            break;\n\n        case Syntax.Property:\n            if (expr.kind === 'get' || expr.kind === 'set') {\n                result = [\n                    expr.kind, noEmptySpace(),\n                    generateExpression(expr.key, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    generateFunctionBody(expr.value)\n                ];\n            } else {\n                if (expr.shorthand) {\n                    result = generateExpression(expr.key, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    });\n                } else if (expr.method) {\n                    result = [];\n                    if (expr.value.generator) {\n                        result.push('*');\n                    }\n                    result.push(generateExpression(expr.key, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }));\n                    result.push(generateFunctionBody(expr.value));\n                } else {\n                    result = [\n                        generateExpression(expr.key, {\n                            precedence: Precedence.Sequence,\n                            allowIn: true,\n                            allowCall: true\n                        }),\n                        ':' + space,\n                        generateExpression(expr.value, {\n                            precedence: Precedence.Assignment,\n                            allowIn: true,\n                            allowCall: true\n                        })\n                    ];\n                }\n            }\n            break;\n\n        case Syntax.ObjectExpression:\n            if (!expr.properties.length) {\n                result = '{}';\n                break;\n            }\n            multiline = expr.properties.length > 1;\n\n            withIndent(function () {\n                fragment = generateExpression(expr.properties[0], {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true,\n                    type: Syntax.Property\n                });\n            });\n\n            if (!multiline) {\n                // issues 4\n                // Do not transform from\n                //   dejavu.Class.declare({\n                //       method2: function () {}\n                //   });\n                // to\n                //   dejavu.Class.declare({method2: function () {\n                //       }});\n                if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                    result = [ '{', space, fragment, space, '}' ];\n                    break;\n                }\n            }\n\n            withIndent(function (indent) {\n                result = [ '{', newline, indent, fragment ];\n\n                if (multiline) {\n                    result.push(',' + newline);\n                    for (i = 1, len = expr.properties.length; i < len; ++i) {\n                        result.push(indent);\n                        result.push(generateExpression(expr.properties[i], {\n                            precedence: Precedence.Sequence,\n                            allowIn: true,\n                            allowCall: true,\n                            type: Syntax.Property\n                        }));\n                        if (i + 1 < len) {\n                            result.push(',' + newline);\n                        }\n                    }\n                }\n            });\n\n            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(base);\n            result.push('}');\n            break;\n\n        case Syntax.ObjectPattern:\n            if (!expr.properties.length) {\n                result = '{}';\n                break;\n            }\n\n            multiline = false;\n            if (expr.properties.length === 1) {\n                property = expr.properties[0];\n                if (property.value.type !== Syntax.Identifier) {\n                    multiline = true;\n                }\n            } else {\n                for (i = 0, len = expr.properties.length; i < len; ++i) {\n                    property = expr.properties[i];\n                    if (!property.shorthand) {\n                        multiline = true;\n                        break;\n                    }\n                }\n            }\n            result = ['{', multiline ? newline : '' ];\n\n            withIndent(function (indent) {\n                for (i = 0, len = expr.properties.length; i < len; ++i) {\n                    result.push(multiline ? indent : '');\n                    result.push(generateExpression(expr.properties[i], {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }));\n                    if (i + 1 < len) {\n                        result.push(',' + (multiline ? newline : space));\n                    }\n                }\n            });\n\n            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                result.push(newline);\n            }\n            result.push(multiline ? base : '');\n            result.push('}');\n            break;\n\n        case Syntax.ThisExpression:\n            result = 'this';\n            break;\n\n        case Syntax.Identifier:\n            result = generateIdentifier(expr);\n            break;\n\n        case Syntax.Literal:\n            if (expr.hasOwnProperty('raw') && parse) {\n                try {\n                    raw = parse(expr.raw).body[0].expression;\n                    if (raw.type === Syntax.Literal) {\n                        if (raw.value === expr.value) {\n                            result = expr.raw;\n                            break;\n                        }\n                    }\n                } catch (e) {\n                    // not use raw property\n                }\n            }\n\n            if (expr.value === null) {\n                result = 'null';\n                break;\n            }\n\n            if (typeof expr.value === 'string') {\n                result = escapeString(expr.value);\n                break;\n            }\n\n            if (typeof expr.value === 'number') {\n                result = generateNumber(expr.value);\n                break;\n            }\n\n            if (typeof expr.value === 'boolean') {\n                result = expr.value ? 'true' : 'false';\n                break;\n            }\n\n            result = generateRegExp(expr.value);\n            break;\n\n        case Syntax.GeneratorExpression:\n        case Syntax.ComprehensionExpression:\n            // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]\n            // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6\n            result = (type === Syntax.GeneratorExpression) ? ['('] : ['['];\n\n            if (extra.moz.comprehensionExpressionStartsWithAssignment) {\n                fragment = generateExpression(expr.body, {\n                    precedence: Precedence.Assignment,\n                    allowIn: true,\n                    allowCall: true\n                });\n\n                result.push(fragment);\n            }\n\n            if (expr.blocks) {\n                withIndent(function () {\n                    for (i = 0, len = expr.blocks.length; i < len; ++i) {\n                        fragment = generateExpression(expr.blocks[i], {\n                            precedence: Precedence.Sequence,\n                            allowIn: true,\n                            allowCall: true\n                        });\n\n                        if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) {\n                            result = join(result, fragment);\n                        } else {\n                            result.push(fragment);\n                        }\n                    }\n                });\n            }\n\n            if (expr.filter) {\n                result = join(result, 'if' + space);\n                fragment = generateExpression(expr.filter, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true\n                });\n                if (extra.moz.parenthesizedComprehensionBlock) {\n                    result = join(result, [ '(', fragment, ')' ]);\n                } else {\n                    result = join(result, fragment);\n                }\n            }\n\n            if (!extra.moz.comprehensionExpressionStartsWithAssignment) {\n                fragment = generateExpression(expr.body, {\n                    precedence: Precedence.Assignment,\n                    allowIn: true,\n                    allowCall: true\n                });\n\n                result = join(result, fragment);\n            }\n\n            result.push((type === Syntax.GeneratorExpression) ? ')' : ']');\n            break;\n\n        case Syntax.ComprehensionBlock:\n            if (expr.left.type === Syntax.VariableDeclaration) {\n                fragment = [\n                    expr.left.kind, noEmptySpace(),\n                    generateStatement(expr.left.declarations[0], {\n                        allowIn: false\n                    })\n                ];\n            } else {\n                fragment = generateExpression(expr.left, {\n                    precedence: Precedence.Call,\n                    allowIn: true,\n                    allowCall: true\n                });\n            }\n\n            fragment = join(fragment, expr.of ? 'of' : 'in');\n            fragment = join(fragment, generateExpression(expr.right, {\n                precedence: Precedence.Sequence,\n                allowIn: true,\n                allowCall: true\n            }));\n\n            if (extra.moz.parenthesizedComprehensionBlock) {\n                result = [ 'for' + space + '(', fragment, ')' ];\n            } else {\n                result = join('for' + space, fragment);\n            }\n            break;\n\n        default:\n            throw new Error('Unknown expression type: ' + expr.type);\n        }\n\n        return toSourceNodeWhenNeeded(result, expr);\n    }\n\n    function generateStatement(stmt, option) {\n        var i,\n            len,\n            result,\n            node,\n            allowIn,\n            functionBody,\n            directiveContext,\n            fragment,\n            semicolon,\n            isGenerator;\n\n        allowIn = true;\n        semicolon = ';';\n        functionBody = false;\n        directiveContext = false;\n        if (option) {\n            allowIn = option.allowIn === undefined || option.allowIn;\n            if (!semicolons && option.semicolonOptional === true) {\n                semicolon = '';\n            }\n            functionBody = option.functionBody;\n            directiveContext = option.directiveContext;\n        }\n\n        switch (stmt.type) {\n        case Syntax.BlockStatement:\n            result = ['{', newline];\n\n            withIndent(function () {\n                for (i = 0, len = stmt.body.length; i < len; ++i) {\n                    fragment = addIndent(generateStatement(stmt.body[i], {\n                        semicolonOptional: i === len - 1,\n                        directiveContext: functionBody\n                    }));\n                    result.push(fragment);\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            });\n\n            result.push(addIndent('}'));\n            break;\n\n        case Syntax.BreakStatement:\n            if (stmt.label) {\n                result = 'break ' + stmt.label.name + semicolon;\n            } else {\n                result = 'break' + semicolon;\n            }\n            break;\n\n        case Syntax.ContinueStatement:\n            if (stmt.label) {\n                result = 'continue ' + stmt.label.name + semicolon;\n            } else {\n                result = 'continue' + semicolon;\n            }\n            break;\n\n        case Syntax.DirectiveStatement:\n            if (stmt.raw) {\n                result = stmt.raw + semicolon;\n            } else {\n                result = escapeDirective(stmt.directive) + semicolon;\n            }\n            break;\n\n        case Syntax.DoWhileStatement:\n            // Because `do 42 while (cond)` is Syntax Error. We need semicolon.\n            result = join('do', maybeBlock(stmt.body));\n            result = maybeBlockSuffix(stmt.body, result);\n            result = join(result, [\n                'while' + space + '(',\n                generateExpression(stmt.test, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true\n                }),\n                ')' + semicolon\n            ]);\n            break;\n\n        case Syntax.CatchClause:\n            withIndent(function () {\n                var guard;\n\n                result = [\n                    'catch' + space + '(',\n                    generateExpression(stmt.param, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')'\n                ];\n\n                if (stmt.guard) {\n                    guard = generateExpression(stmt.guard, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    });\n\n                    result.splice(2, 0, ' if ', guard);\n                }\n            });\n            result.push(maybeBlock(stmt.body));\n            break;\n\n        case Syntax.DebuggerStatement:\n            result = 'debugger' + semicolon;\n            break;\n\n        case Syntax.EmptyStatement:\n            result = ';';\n            break;\n\n        case Syntax.ExportDeclaration:\n            result = 'export ';\n            if (stmt.declaration) {\n                // FunctionDeclaration or VariableDeclaration\n                result = [result, generateStatement(stmt.declaration, { semicolonOptional: semicolon === '' })];\n                break;\n            }\n            break;\n\n        case Syntax.ExpressionStatement:\n            result = [generateExpression(stmt.expression, {\n                precedence: Precedence.Sequence,\n                allowIn: true,\n                allowCall: true\n            })];\n            // 12.4 '{', 'function' is not allowed in this position.\n            // wrap expression with parentheses\n            fragment = toSourceNodeWhenNeeded(result).toString();\n            if (fragment.charAt(0) === '{' ||  // ObjectExpression\n                    (fragment.slice(0, 8) === 'function' && '* ('.indexOf(fragment.charAt(8)) >= 0) ||  // function or generator\n                    (directive && directiveContext && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string')) {\n                result = ['(', result, ')' + semicolon];\n            } else {\n                result.push(semicolon);\n            }\n            break;\n\n        case Syntax.VariableDeclarator:\n            if (stmt.init) {\n                result = [\n                    generateExpression(stmt.id, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    }),\n                    space,\n                    '=',\n                    space,\n                    generateExpression(stmt.init, {\n                        precedence: Precedence.Assignment,\n                        allowIn: allowIn,\n                        allowCall: true\n                    })\n                ];\n            } else {\n                result = generatePattern(stmt.id, {\n                    precedence: Precedence.Assignment,\n                    allowIn: allowIn\n                });\n            }\n            break;\n\n        case Syntax.VariableDeclaration:\n            result = [stmt.kind];\n            // special path for\n            // var x = function () {\n            // };\n            if (stmt.declarations.length === 1 && stmt.declarations[0].init &&\n                    stmt.declarations[0].init.type === Syntax.FunctionExpression) {\n                result.push(noEmptySpace());\n                result.push(generateStatement(stmt.declarations[0], {\n                    allowIn: allowIn\n                }));\n            } else {\n                // VariableDeclarator is typed as Statement,\n                // but joined with comma (not LineTerminator).\n                // So if comment is attached to target node, we should specialize.\n                withIndent(function () {\n                    node = stmt.declarations[0];\n                    if (extra.comment && node.leadingComments) {\n                        result.push('\\n');\n                        result.push(addIndent(generateStatement(node, {\n                            allowIn: allowIn\n                        })));\n                    } else {\n                        result.push(noEmptySpace());\n                        result.push(generateStatement(node, {\n                            allowIn: allowIn\n                        }));\n                    }\n\n                    for (i = 1, len = stmt.declarations.length; i < len; ++i) {\n                        node = stmt.declarations[i];\n                        if (extra.comment && node.leadingComments) {\n                            result.push(',' + newline);\n                            result.push(addIndent(generateStatement(node, {\n                                allowIn: allowIn\n                            })));\n                        } else {\n                            result.push(',' + space);\n                            result.push(generateStatement(node, {\n                                allowIn: allowIn\n                            }));\n                        }\n                    }\n                });\n            }\n            result.push(semicolon);\n            break;\n\n        case Syntax.ThrowStatement:\n            result = [join(\n                'throw',\n                generateExpression(stmt.argument, {\n                    precedence: Precedence.Sequence,\n                    allowIn: true,\n                    allowCall: true\n                })\n            ), semicolon];\n            break;\n\n        case Syntax.TryStatement:\n            result = ['try', maybeBlock(stmt.block)];\n            result = maybeBlockSuffix(stmt.block, result);\n\n            if (stmt.handlers) {\n                // old interface\n                for (i = 0, len = stmt.handlers.length; i < len; ++i) {\n                    result = join(result, generateStatement(stmt.handlers[i]));\n                    if (stmt.finalizer || i + 1 !== len) {\n                        result = maybeBlockSuffix(stmt.handlers[i].body, result);\n                    }\n                }\n            } else {\n                stmt.guardedHandlers = stmt.guardedHandlers || [];\n\n                for (i = 0, len = stmt.guardedHandlers.length; i < len; ++i) {\n                    result = join(result, generateStatement(stmt.guardedHandlers[i]));\n                    if (stmt.finalizer || i + 1 !== len) {\n                        result = maybeBlockSuffix(stmt.guardedHandlers[i].body, result);\n                    }\n                }\n\n                // new interface\n                if (stmt.handler) {\n                    if (isArray(stmt.handler)) {\n                        for (i = 0, len = stmt.handler.length; i < len; ++i) {\n                            result = join(result, generateStatement(stmt.handler[i]));\n                            if (stmt.finalizer || i + 1 !== len) {\n                                result = maybeBlockSuffix(stmt.handler[i].body, result);\n                            }\n                        }\n                    } else {\n                        result = join(result, generateStatement(stmt.handler));\n                        if (stmt.finalizer) {\n                            result = maybeBlockSuffix(stmt.handler.body, result);\n                        }\n                    }\n                }\n            }\n            if (stmt.finalizer) {\n                result = join(result, ['finally', maybeBlock(stmt.finalizer)]);\n            }\n            break;\n\n        case Syntax.SwitchStatement:\n            withIndent(function () {\n                result = [\n                    'switch' + space + '(',\n                    generateExpression(stmt.discriminant, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')' + space + '{' + newline\n                ];\n            });\n            if (stmt.cases) {\n                for (i = 0, len = stmt.cases.length; i < len; ++i) {\n                    fragment = addIndent(generateStatement(stmt.cases[i], {semicolonOptional: i === len - 1}));\n                    result.push(fragment);\n                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            }\n            result.push(addIndent('}'));\n            break;\n\n        case Syntax.SwitchCase:\n            withIndent(function () {\n                if (stmt.test) {\n                    result = [\n                        join('case', generateExpression(stmt.test, {\n                            precedence: Precedence.Sequence,\n                            allowIn: true,\n                            allowCall: true\n                        })),\n                        ':'\n                    ];\n                } else {\n                    result = ['default:'];\n                }\n\n                i = 0;\n                len = stmt.consequent.length;\n                if (len && stmt.consequent[0].type === Syntax.BlockStatement) {\n                    fragment = maybeBlock(stmt.consequent[0]);\n                    result.push(fragment);\n                    i = 1;\n                }\n\n                if (i !== len && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {\n                    result.push(newline);\n                }\n\n                for (; i < len; ++i) {\n                    fragment = addIndent(generateStatement(stmt.consequent[i], {semicolonOptional: i === len - 1 && semicolon === ''}));\n                    result.push(fragment);\n                    if (i + 1 !== len && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                        result.push(newline);\n                    }\n                }\n            });\n            break;\n\n        case Syntax.IfStatement:\n            withIndent(function () {\n                result = [\n                    'if' + space + '(',\n                    generateExpression(stmt.test, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')'\n                ];\n            });\n            if (stmt.alternate) {\n                result.push(maybeBlock(stmt.consequent));\n                result = maybeBlockSuffix(stmt.consequent, result);\n                if (stmt.alternate.type === Syntax.IfStatement) {\n                    result = join(result, ['else ', generateStatement(stmt.alternate, {semicolonOptional: semicolon === ''})]);\n                } else {\n                    result = join(result, join('else', maybeBlock(stmt.alternate, semicolon === '')));\n                }\n            } else {\n                result.push(maybeBlock(stmt.consequent, semicolon === ''));\n            }\n            break;\n\n        case Syntax.ForStatement:\n            withIndent(function () {\n                result = ['for' + space + '('];\n                if (stmt.init) {\n                    if (stmt.init.type === Syntax.VariableDeclaration) {\n                        result.push(generateStatement(stmt.init, {allowIn: false}));\n                    } else {\n                        result.push(generateExpression(stmt.init, {\n                            precedence: Precedence.Sequence,\n                            allowIn: false,\n                            allowCall: true\n                        }));\n                        result.push(';');\n                    }\n                } else {\n                    result.push(';');\n                }\n\n                if (stmt.test) {\n                    result.push(space);\n                    result.push(generateExpression(stmt.test, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }));\n                    result.push(';');\n                } else {\n                    result.push(';');\n                }\n\n                if (stmt.update) {\n                    result.push(space);\n                    result.push(generateExpression(stmt.update, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }));\n                    result.push(')');\n                } else {\n                    result.push(')');\n                }\n            });\n\n            result.push(maybeBlock(stmt.body, semicolon === ''));\n            break;\n\n        case Syntax.ForInStatement:\n            result = generateIterationForStatement('in', stmt, semicolon === '');\n            break;\n\n        case Syntax.ForOfStatement:\n            result = generateIterationForStatement('of', stmt, semicolon === '');\n            break;\n\n        case Syntax.LabeledStatement:\n            result = [stmt.label.name + ':', maybeBlock(stmt.body, semicolon === '')];\n            break;\n\n        case Syntax.Program:\n            len = stmt.body.length;\n            result = [safeConcatenation && len > 0 ? '\\n' : ''];\n            for (i = 0; i < len; ++i) {\n                fragment = addIndent(\n                    generateStatement(stmt.body[i], {\n                        semicolonOptional: !safeConcatenation && i === len - 1,\n                        directiveContext: true\n                    })\n                );\n                result.push(fragment);\n                if (i + 1 < len && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {\n                    result.push(newline);\n                }\n            }\n            break;\n\n        case Syntax.FunctionDeclaration:\n            isGenerator = stmt.generator && !extra.moz.starlessGenerator;\n            result = [\n                (isGenerator ? 'function*' : 'function'),\n                (isGenerator ? space : noEmptySpace()),\n                generateIdentifier(stmt.id),\n                generateFunctionBody(stmt)\n            ];\n            break;\n\n        case Syntax.ReturnStatement:\n            if (stmt.argument) {\n                result = [join(\n                    'return',\n                    generateExpression(stmt.argument, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    })\n                ), semicolon];\n            } else {\n                result = ['return' + semicolon];\n            }\n            break;\n\n        case Syntax.WhileStatement:\n            withIndent(function () {\n                result = [\n                    'while' + space + '(',\n                    generateExpression(stmt.test, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')'\n                ];\n            });\n            result.push(maybeBlock(stmt.body, semicolon === ''));\n            break;\n\n        case Syntax.WithStatement:\n            withIndent(function () {\n                result = [\n                    'with' + space + '(',\n                    generateExpression(stmt.object, {\n                        precedence: Precedence.Sequence,\n                        allowIn: true,\n                        allowCall: true\n                    }),\n                    ')'\n                ];\n            });\n            result.push(maybeBlock(stmt.body, semicolon === ''));\n            break;\n\n        default:\n            throw new Error('Unknown statement type: ' + stmt.type);\n        }\n\n        // Attach comments\n\n        if (extra.comment) {\n            result = addCommentsToStatement(stmt, result);\n        }\n\n        fragment = toSourceNodeWhenNeeded(result).toString();\n        if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' &&  fragment.charAt(fragment.length - 1) === '\\n') {\n            result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\\s+$/, '') : fragment.replace(/\\s+$/, '');\n        }\n\n        return toSourceNodeWhenNeeded(result, stmt);\n    }\n\n    function generate(node, options) {\n        var defaultOptions = getDefaultOptions(), result, pair;\n\n        if (options != null) {\n            // Obsolete options\n            //\n            //   `options.indent`\n            //   `options.base`\n            //\n            // Instead of them, we can use `option.format.indent`.\n            if (typeof options.indent === 'string') {\n                defaultOptions.format.indent.style = options.indent;\n            }\n            if (typeof options.base === 'number') {\n                defaultOptions.format.indent.base = options.base;\n            }\n            options = updateDeeply(defaultOptions, options);\n            indent = options.format.indent.style;\n            if (typeof options.base === 'string') {\n                base = options.base;\n            } else {\n                base = stringRepeat(indent, options.format.indent.base);\n            }\n        } else {\n            options = defaultOptions;\n            indent = options.format.indent.style;\n            base = stringRepeat(indent, options.format.indent.base);\n        }\n        json = options.format.json;\n        renumber = options.format.renumber;\n        hexadecimal = json ? false : options.format.hexadecimal;\n        quotes = json ? 'double' : options.format.quotes;\n        escapeless = options.format.escapeless;\n        newline = options.format.newline;\n        space = options.format.space;\n        if (options.format.compact) {\n            newline = space = indent = base = '';\n        }\n        parentheses = options.format.parentheses;\n        semicolons = options.format.semicolons;\n        safeConcatenation = options.format.safeConcatenation;\n        directive = options.directive;\n        parse = json ? null : options.parse;\n        sourceMap = options.sourceMap;\n        extra = options;\n\n        if (sourceMap) {\n            if (!exports.browser) {\n                // We assume environment is node.js\n                // And prevent from including source-map by browserify\n                SourceNode = require('source-map').SourceNode;\n            } else {\n                SourceNode = global.sourceMap.SourceNode;\n            }\n        }\n\n        switch (node.type) {\n        case Syntax.BlockStatement:\n        case Syntax.BreakStatement:\n        case Syntax.CatchClause:\n        case Syntax.ContinueStatement:\n        case Syntax.DirectiveStatement:\n        case Syntax.DoWhileStatement:\n        case Syntax.DebuggerStatement:\n        case Syntax.EmptyStatement:\n        case Syntax.ExpressionStatement:\n        case Syntax.ForStatement:\n        case Syntax.ForInStatement:\n        case Syntax.ForOfStatement:\n        case Syntax.FunctionDeclaration:\n        case Syntax.IfStatement:\n        case Syntax.LabeledStatement:\n        case Syntax.Program:\n        case Syntax.ReturnStatement:\n        case Syntax.SwitchStatement:\n        case Syntax.SwitchCase:\n        case Syntax.ThrowStatement:\n        case Syntax.TryStatement:\n        case Syntax.VariableDeclaration:\n        case Syntax.VariableDeclarator:\n        case Syntax.WhileStatement:\n        case Syntax.WithStatement:\n            result = generateStatement(node);\n            break;\n\n        case Syntax.AssignmentExpression:\n        case Syntax.ArrayExpression:\n        case Syntax.ArrayPattern:\n        case Syntax.BinaryExpression:\n        case Syntax.CallExpression:\n        case Syntax.ConditionalExpression:\n        case Syntax.FunctionExpression:\n        case Syntax.Identifier:\n        case Syntax.Literal:\n        case Syntax.LogicalExpression:\n        case Syntax.MemberExpression:\n        case Syntax.NewExpression:\n        case Syntax.ObjectExpression:\n        case Syntax.ObjectPattern:\n        case Syntax.Property:\n        case Syntax.SequenceExpression:\n        case Syntax.ThisExpression:\n        case Syntax.UnaryExpression:\n        case Syntax.UpdateExpression:\n        case Syntax.YieldExpression:\n\n            result = generateExpression(node, {\n                precedence: Precedence.Sequence,\n                allowIn: true,\n                allowCall: true\n            });\n            break;\n\n        default:\n            throw new Error('Unknown node type: ' + node.type);\n        }\n\n        if (!sourceMap) {\n            return result.toString();\n        }\n\n\n        pair = result.toStringWithSourceMap({\n            file: options.file,\n            sourceRoot: options.sourceMapRoot\n        });\n\n        if (options.sourceContent) {\n            pair.map.setSourceContent(options.sourceMap,\n                                      options.sourceContent);\n        }\n\n        if (options.sourceMapWithCode) {\n            return pair;\n        }\n\n        return pair.map.toString();\n    }\n\n    FORMAT_MINIFY = {\n        indent: {\n            style: '',\n            base: 0\n        },\n        renumber: true,\n        hexadecimal: true,\n        quotes: 'auto',\n        escapeless: true,\n        compact: true,\n        parentheses: false,\n        semicolons: false\n    };\n\n    FORMAT_DEFAULTS = getDefaultOptions().format;\n\n    exports.version = require('./package.json').version;\n    exports.generate = generate;\n    exports.attachComments = estraverse.attachComments;\n    exports.browser = false;\n    exports.FORMAT_MINIFY = FORMAT_MINIFY;\n    exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;\n}());\n/* vim: set sw=4 ts=4 et tw=80 : */\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./package.json\":18,\"estraverse\":31,\"esutils\":17,\"source-map\":19}],15:[function(require,module,exports){\n/*\n  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n(function () {\n    'use strict';\n\n    var Regex;\n\n    // See also tools/generate-unicode-regex.py.\n    Regex = {\n        NonAsciiIdentifierStart: new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]'),\n        NonAsciiIdentifierPart: new RegExp('[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0\\u08A2-\\u08AC\\u08E4-\\u08FE\\u0900-\\u0963\\u0966-\\u096F\\u0971-\\u0977\\u0979-\\u097F\\u0981-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C01-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C82\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D02\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F0\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1D00-\\u1DE6\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA697\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7B\\uAA80-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE26\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]')\n    };\n\n    function isDecimalDigit(ch) {\n        return (ch >= 48 && ch <= 57);   // 0..9\n    }\n\n    function isHexDigit(ch) {\n        return isDecimalDigit(ch) || (97 <= ch && ch <= 102) || (65 <= ch && ch <= 70);\n    }\n\n    function isOctalDigit(ch) {\n        return (ch >= 48 && ch <= 55);   // 0..7\n    }\n\n    // 7.2 White Space\n\n    function isWhiteSpace(ch) {\n        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||\n            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);\n    }\n\n    // 7.3 Line Terminators\n\n    function isLineTerminator(ch) {\n        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);\n    }\n\n    // 7.6 Identifier Names and Identifiers\n\n    function isIdentifierStart(ch) {\n        return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)\n            (ch >= 65 && ch <= 90) ||         // A..Z\n            (ch >= 97 && ch <= 122) ||        // a..z\n            (ch === 92) ||                    // \\ (backslash)\n            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));\n    }\n\n    function isIdentifierPart(ch) {\n        return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)\n            (ch >= 65 && ch <= 90) ||         // A..Z\n            (ch >= 97 && ch <= 122) ||        // a..z\n            (ch >= 48 && ch <= 57) ||         // 0..9\n            (ch === 92) ||                    // \\ (backslash)\n            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));\n    }\n\n    module.exports = {\n        isDecimalDigit: isDecimalDigit,\n        isHexDigit: isHexDigit,\n        isOctalDigit: isOctalDigit,\n        isWhiteSpace: isWhiteSpace,\n        isLineTerminator: isLineTerminator,\n        isIdentifierStart: isIdentifierStart,\n        isIdentifierPart: isIdentifierPart\n    };\n}());\n/* vim: set sw=4 ts=4 et tw=80 : */\n\n},{}],16:[function(require,module,exports){\n/*\n  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n(function () {\n    'use strict';\n\n    var code = require('./code');\n\n    function isStrictModeReservedWordES6(id) {\n        switch (id) {\n        case 'implements':\n        case 'interface':\n        case 'package':\n        case 'private':\n        case 'protected':\n        case 'public':\n        case 'static':\n        case 'let':\n            return true;\n        default:\n            return false;\n        }\n    }\n\n    function isKeywordES5(id, strict) {\n        // yield should not be treated as keyword under non-strict mode.\n        if (!strict && id === 'yield') {\n            return false;\n        }\n        return isKeywordES6(id, strict);\n    }\n\n    function isKeywordES6(id, strict) {\n        if (strict && isStrictModeReservedWordES6(id)) {\n            return true;\n        }\n\n        switch (id.length) {\n        case 2:\n            return (id === 'if') || (id === 'in') || (id === 'do');\n        case 3:\n            return (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');\n        case 4:\n            return (id === 'this') || (id === 'else') || (id === 'case') ||\n                (id === 'void') || (id === 'with') || (id === 'enum');\n        case 5:\n            return (id === 'while') || (id === 'break') || (id === 'catch') ||\n                (id === 'throw') || (id === 'const') || (id === 'yield') ||\n                (id === 'class') || (id === 'super');\n        case 6:\n            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\n                (id === 'switch') || (id === 'export') || (id === 'import');\n        case 7:\n            return (id === 'default') || (id === 'finally') || (id === 'extends');\n        case 8:\n            return (id === 'function') || (id === 'continue') || (id === 'debugger');\n        case 10:\n            return (id === 'instanceof');\n        default:\n            return false;\n        }\n    }\n\n    function isRestrictedWord(id) {\n        return id === 'eval' || id === 'arguments';\n    }\n\n    function isIdentifierName(id) {\n        var i, iz, ch;\n\n        if (id.length === 0) {\n            return false;\n        }\n\n        ch = id.charCodeAt(0);\n        if (!code.isIdentifierStart(ch) || ch === 92) {  // \\ (backslash)\n            return false;\n        }\n\n        for (i = 1, iz = id.length; i < iz; ++i) {\n            ch = id.charCodeAt(i);\n            if (!code.isIdentifierPart(ch) || ch === 92) {  // \\ (backslash)\n                return false;\n            }\n        }\n        return true;\n    }\n\n    module.exports = {\n        isKeywordES5: isKeywordES5,\n        isKeywordES6: isKeywordES6,\n        isRestrictedWord: isRestrictedWord,\n        isIdentifierName: isIdentifierName\n    };\n}());\n/* vim: set sw=4 ts=4 et tw=80 : */\n\n},{\"./code\":15}],17:[function(require,module,exports){\n/*\n  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\n(function () {\n    'use strict';\n\n    exports.code = require('./code');\n    exports.keyword = require('./keyword');\n}());\n/* vim: set sw=4 ts=4 et tw=80 : */\n\n},{\"./code\":15,\"./keyword\":16}],18:[function(require,module,exports){\nmodule.exports={\n  \"name\": \"escodegen\",\n  \"description\": \"ECMAScript code generator\",\n  \"homepage\": \"http://github.com/Constellation/escodegen\",\n  \"main\": \"escodegen.js\",\n  \"bin\": {\n    \"esgenerate\": \"./bin/esgenerate.js\",\n    \"escodegen\": \"./bin/escodegen.js\"\n  },\n  \"version\": \"1.2.0\",\n  \"engines\": {\n    \"node\": \">=0.4.0\"\n  },\n  \"maintainers\": [\n    {\n      \"name\": \"constellation\",\n      \"email\": \"utatane.tea@gmail.com\"\n    }\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+ssh://git@github.com/Constellation/escodegen.git\"\n  },\n  \"dependencies\": {\n    \"esprima\": \"~1.0.4\",\n    \"estraverse\": \"~1.5.0\",\n    \"esutils\": \"~1.0.0\",\n    \"source-map\": \"~0.1.30\"\n  },\n  \"optionalDependencies\": {\n    \"source-map\": \"~0.1.30\"\n  },\n  \"devDependencies\": {\n    \"esprima-moz\": \"*\",\n    \"q\": \"*\",\n    \"bower\": \"*\",\n    \"semver\": \"*\",\n    \"chai\": \"~1.7.2\",\n    \"gulp\": \"~3.5.0\",\n    \"gulp-mocha\": \"~0.4.1\",\n    \"gulp-eslint\": \"~0.1.2\",\n    \"jshint-stylish\": \"~0.1.5\",\n    \"gulp-jshint\": \"~1.4.0\",\n    \"commonjs-everywhere\": \"~0.9.6\"\n  },\n  \"licenses\": [\n    {\n      \"type\": \"BSD\",\n      \"url\": \"http://github.com/Constellation/escodegen/raw/master/LICENSE.BSD\"\n    }\n  ],\n  \"scripts\": {\n    \"test\": \"gulp travis\",\n    \"unit-test\": \"gulp test\",\n    \"lint\": \"gulp lint\",\n    \"release\": \"node tools/release.js\",\n    \"build-min\": \"cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js\",\n    \"build\": \"cjsify -a path: tools/entry-point.js > escodegen.browser.js\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/Constellation/escodegen/issues\"\n  },\n  \"_id\": \"escodegen@1.2.0\",\n  \"dist\": {\n    \"shasum\": \"09de7967791cc958b7f89a2ddb6d23451af327e1\",\n    \"tarball\": \"http://registry.npmjs.org/escodegen/-/escodegen-1.2.0.tgz\"\n  },\n  \"_from\": \"escodegen@>=1.2.0 <1.3.0\",\n  \"_npmVersion\": \"1.3.21\",\n  \"_npmUser\": {\n    \"name\": \"constellation\",\n    \"email\": \"utatane.tea@gmail.com\"\n  },\n  \"directories\": {},\n  \"_shasum\": \"09de7967791cc958b7f89a2ddb6d23451af327e1\",\n  \"_resolved\": \"https://registry.npmjs.org/escodegen/-/escodegen-1.2.0.tgz\",\n  \"readme\": \"ERROR: No README data found!\"\n}\n\n},{}],19:[function(require,module,exports){\n/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = require('./source-map/source-map-generator').SourceMapGenerator;\nexports.SourceMapConsumer = require('./source-map/source-map-consumer').SourceMapConsumer;\nexports.SourceNode = require('./source-map/source-node').SourceNode;\n\n},{\"./source-map/source-map-consumer\":25,\"./source-map/source-map-generator\":26,\"./source-map/source-node\":27}],20:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var util = require('./util');\n\n  /**\n   * A data structure which is a combination of an array and a set. Adding a new\n   * member is O(1), testing for membership is O(1), and finding the index of an\n   * element is O(1). Removing elements from the set is not supported. Only\n   * strings are supported for membership.\n   */\n  function ArraySet() {\n    this._array = [];\n    this._set = {};\n  }\n\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n    var set = new ArraySet();\n    for (var i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n    return set;\n  };\n\n  /**\n   * Add the given string to this set.\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n    var isDuplicate = this.has(aStr);\n    var idx = this._array.length;\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n    if (!isDuplicate) {\n      this._set[util.toSetString(aStr)] = idx;\n    }\n  };\n\n  /**\n   * Is the given string a member of this set?\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.has = function ArraySet_has(aStr) {\n    return Object.prototype.hasOwnProperty.call(this._set,\n                                                util.toSetString(aStr));\n  };\n\n  /**\n   * What is the index of the given string in the array?\n   *\n   * @param String aStr\n   */\n  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n    if (this.has(aStr)) {\n      return this._set[util.toSetString(aStr)];\n    }\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  };\n\n  /**\n   * What is the element at the given index?\n   *\n   * @param Number aIdx\n   */\n  ArraySet.prototype.at = function ArraySet_at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n    throw new Error('No element indexed by ' + aIdx);\n  };\n\n  /**\n   * Returns the array representation of this set (which has the proper indices\n   * indicated by indexOf). Note that this is a copy of the internal array used\n   * for storing the members so that no one can mess with internal state.\n   */\n  ArraySet.prototype.toArray = function ArraySet_toArray() {\n    return this._array.slice();\n  };\n\n  exports.ArraySet = ArraySet;\n\n});\n\n},{\"./util\":28,\"amdefine\":29}],21:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var base64 = require('./base64');\n\n  // A single base 64 digit can contain 6 bits of data. For the base 64 variable\n  // length quantities we use in the source map spec, the first bit is the sign,\n  // the next four bits are the actual value, and the 6th bit is the\n  // continuation bit. The continuation bit tells us whether there are more\n  // digits in this value following this digit.\n  //\n  //   Continuation\n  //   |    Sign\n  //   |    |\n  //   V    V\n  //   101011\n\n  var VLQ_BASE_SHIFT = 5;\n\n  // binary: 100000\n  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n  // binary: 011111\n  var VLQ_BASE_MASK = VLQ_BASE - 1;\n\n  // binary: 100000\n  var VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n  /**\n   * Converts from a two-complement value to a value where the sign bit is\n   * placed in the least significant bit.  For example, as decimals:\n   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n   */\n  function toVLQSigned(aValue) {\n    return aValue < 0\n      ? ((-aValue) << 1) + 1\n      : (aValue << 1) + 0;\n  }\n\n  /**\n   * Converts to a two-complement value from a value where the sign bit is\n   * placed in the least significant bit.  For example, as decimals:\n   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n   */\n  function fromVLQSigned(aValue) {\n    var isNegative = (aValue & 1) === 1;\n    var shifted = aValue >> 1;\n    return isNegative\n      ? -shifted\n      : shifted;\n  }\n\n  /**\n   * Returns the base 64 VLQ encoded value.\n   */\n  exports.encode = function base64VLQ_encode(aValue) {\n    var encoded = \"\";\n    var digit;\n\n    var vlq = toVLQSigned(aValue);\n\n    do {\n      digit = vlq & VLQ_BASE_MASK;\n      vlq >>>= VLQ_BASE_SHIFT;\n      if (vlq > 0) {\n        // There are still more digits in this value, so we must make sure the\n        // continuation bit is marked.\n        digit |= VLQ_CONTINUATION_BIT;\n      }\n      encoded += base64.encode(digit);\n    } while (vlq > 0);\n\n    return encoded;\n  };\n\n  /**\n   * Decodes the next base 64 VLQ value from the given string and returns the\n   * value and the rest of the string via the out parameter.\n   */\n  exports.decode = function base64VLQ_decode(aStr, aOutParam) {\n    var i = 0;\n    var strLen = aStr.length;\n    var result = 0;\n    var shift = 0;\n    var continuation, digit;\n\n    do {\n      if (i >= strLen) {\n        throw new Error(\"Expected more digits in base 64 VLQ value.\");\n      }\n      digit = base64.decode(aStr.charAt(i++));\n      continuation = !!(digit & VLQ_CONTINUATION_BIT);\n      digit &= VLQ_BASE_MASK;\n      result = result + (digit << shift);\n      shift += VLQ_BASE_SHIFT;\n    } while (continuation);\n\n    aOutParam.value = fromVLQSigned(result);\n    aOutParam.rest = aStr.slice(i);\n  };\n\n});\n\n},{\"./base64\":22,\"amdefine\":29}],22:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var charToIntMap = {};\n  var intToCharMap = {};\n\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    .split('')\n    .forEach(function (ch, index) {\n      charToIntMap[ch] = index;\n      intToCharMap[index] = ch;\n    });\n\n  /**\n   * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n   */\n  exports.encode = function base64_encode(aNumber) {\n    if (aNumber in intToCharMap) {\n      return intToCharMap[aNumber];\n    }\n    throw new TypeError(\"Must be between 0 and 63: \" + aNumber);\n  };\n\n  /**\n   * Decode a single base 64 digit to an integer.\n   */\n  exports.decode = function base64_decode(aChar) {\n    if (aChar in charToIntMap) {\n      return charToIntMap[aChar];\n    }\n    throw new TypeError(\"Not a valid base 64 digit: \" + aChar);\n  };\n\n});\n\n},{\"amdefine\":29}],23:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  /**\n   * Recursive implementation of binary search.\n   *\n   * @param aLow Indices here and lower do not contain the needle.\n   * @param aHigh Indices here and higher do not contain the needle.\n   * @param aNeedle The element being searched for.\n   * @param aHaystack The non-empty array being searched.\n   * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n   */\n  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare) {\n    // This function terminates when one of the following is true:\n    //\n    //   1. We find the exact element we are looking for.\n    //\n    //   2. We did not find the exact element, but we can return the index of\n    //      the next closest element that is less than that element.\n    //\n    //   3. We did not find the exact element, and there is no next-closest\n    //      element which is less than the one we are searching for, so we\n    //      return -1.\n    var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n    var cmp = aCompare(aNeedle, aHaystack[mid], true);\n    if (cmp === 0) {\n      // Found the element we are looking for.\n      return mid;\n    }\n    else if (cmp > 0) {\n      // aHaystack[mid] is greater than our needle.\n      if (aHigh - mid > 1) {\n        // The element is in the upper half.\n        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare);\n      }\n      // We did not find an exact match, return the next closest one\n      // (termination case 2).\n      return mid;\n    }\n    else {\n      // aHaystack[mid] is less than our needle.\n      if (mid - aLow > 1) {\n        // The element is in the lower half.\n        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare);\n      }\n      // The exact needle element was not found in this haystack. Determine if\n      // we are in termination case (2) or (3) and return the appropriate thing.\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n\n  /**\n   * This is an implementation of binary search which will always try and return\n   * the index of next lowest value checked if there is no exact hit. This is\n   * because mappings between original and generated line/col pairs are single\n   * points, and there is an implicit region between each of them, so a miss\n   * just means that you aren't on the very start of a region.\n   *\n   * @param aNeedle The element you are looking for.\n   * @param aHaystack The array that is being searched.\n   * @param aCompare A function which takes the needle and an element in the\n   *     array and returns -1, 0, or 1 depending on whether the needle is less\n   *     than, equal to, or greater than the element, respectively.\n   */\n  exports.search = function search(aNeedle, aHaystack, aCompare) {\n    if (aHaystack.length === 0) {\n      return -1;\n    }\n    return recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare)\n  };\n\n});\n\n},{\"amdefine\":29}],24:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var util = require('./util');\n\n  /**\n   * Determine whether mappingB is after mappingA with respect to generated\n   * position.\n   */\n  function generatedPositionAfter(mappingA, mappingB) {\n    // Optimized for most common case\n    var lineA = mappingA.generatedLine;\n    var lineB = mappingB.generatedLine;\n    var columnA = mappingA.generatedColumn;\n    var columnB = mappingB.generatedColumn;\n    return lineB > lineA || lineB == lineA && columnB >= columnA ||\n           util.compareByGeneratedPositions(mappingA, mappingB) <= 0;\n  }\n\n  /**\n   * A data structure to provide a sorted view of accumulated mappings in a\n   * performance conscious manner. It trades a neglibable overhead in general\n   * case for a large speedup in case of mappings being added in order.\n   */\n  function MappingList() {\n    this._array = [];\n    this._sorted = true;\n    // Serves as infimum\n    this._last = {generatedLine: -1, generatedColumn: 0};\n  }\n\n  /**\n   * Iterate through internal items. This method takes the same arguments that\n   * `Array.prototype.forEach` takes.\n   *\n   * NOTE: The order of the mappings is NOT guaranteed.\n   */\n  MappingList.prototype.unsortedForEach =\n    function MappingList_forEach(aCallback, aThisArg) {\n      this._array.forEach(aCallback, aThisArg);\n    };\n\n  /**\n   * Add the given source mapping.\n   *\n   * @param Object aMapping\n   */\n  MappingList.prototype.add = function MappingList_add(aMapping) {\n    var mapping;\n    if (generatedPositionAfter(this._last, aMapping)) {\n      this._last = aMapping;\n      this._array.push(aMapping);\n    } else {\n      this._sorted = false;\n      this._array.push(aMapping);\n    }\n  };\n\n  /**\n   * Returns the flat, sorted array of mappings. The mappings are sorted by\n   * generated position.\n   *\n   * WARNING: This method returns internal data without copying, for\n   * performance. The return value must NOT be mutated, and should be treated as\n   * an immutable borrow. If you want to take ownership, you must make your own\n   * copy.\n   */\n  MappingList.prototype.toArray = function MappingList_toArray() {\n    if (!this._sorted) {\n      this._array.sort(util.compareByGeneratedPositions);\n      this._sorted = true;\n    }\n    return this._array;\n  };\n\n  exports.MappingList = MappingList;\n\n});\n\n},{\"./util\":28,\"amdefine\":29}],25:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var util = require('./util');\n  var binarySearch = require('./binary-search');\n  var ArraySet = require('./array-set').ArraySet;\n  var base64VLQ = require('./base64-vlq');\n\n  /**\n   * A SourceMapConsumer instance represents a parsed source map which we can\n   * query for information about the original file positions by giving it a file\n   * position in the generated source.\n   *\n   * The only parameter is the raw source map (either as a JSON string, or\n   * already parsed to an object). According to the spec, source maps have the\n   * following attributes:\n   *\n   *   - version: Which version of the source map spec this map is following.\n   *   - sources: An array of URLs to the original source files.\n   *   - names: An array of identifiers which can be referrenced by individual mappings.\n   *   - sourceRoot: Optional. The URL root from which all sources are relative.\n   *   - sourcesContent: Optional. An array of contents of the original source files.\n   *   - mappings: A string of base64 VLQs which contain the actual mappings.\n   *   - file: Optional. The generated file this source map is associated with.\n   *\n   * Here is an example source map, taken from the source map spec[0]:\n   *\n   *     {\n   *       version : 3,\n   *       file: \"out.js\",\n   *       sourceRoot : \"\",\n   *       sources: [\"foo.js\", \"bar.js\"],\n   *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n   *       mappings: \"AA,AB;;ABCDE;\"\n   *     }\n   *\n   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n   */\n  function SourceMapConsumer(aSourceMap) {\n    var sourceMap = aSourceMap;\n    if (typeof aSourceMap === 'string') {\n      sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n    }\n\n    var version = util.getArg(sourceMap, 'version');\n    var sources = util.getArg(sourceMap, 'sources');\n    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n    // requires the array) to play nice here.\n    var names = util.getArg(sourceMap, 'names', []);\n    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n    var mappings = util.getArg(sourceMap, 'mappings');\n    var file = util.getArg(sourceMap, 'file', null);\n\n    // Once again, Sass deviates from the spec and supplies the version as a\n    // string rather than a number, so we use loose equality checking here.\n    if (version != this._version) {\n      throw new Error('Unsupported version: ' + version);\n    }\n\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    sources = sources.map(util.normalize);\n\n    // Pass `true` below to allow duplicate names and sources. While source maps\n    // are intended to be compressed and deduplicated, the TypeScript compiler\n    // sometimes generates source maps with duplicates in them. See Github issue\n    // #72 and bugzil.la/889492.\n    this._names = ArraySet.fromArray(names, true);\n    this._sources = ArraySet.fromArray(sources, true);\n\n    this.sourceRoot = sourceRoot;\n    this.sourcesContent = sourcesContent;\n    this._mappings = mappings;\n    this.file = file;\n  }\n\n  /**\n   * Create a SourceMapConsumer from a SourceMapGenerator.\n   *\n   * @param SourceMapGenerator aSourceMap\n   *        The source map that will be consumed.\n   * @returns SourceMapConsumer\n   */\n  SourceMapConsumer.fromSourceMap =\n    function SourceMapConsumer_fromSourceMap(aSourceMap) {\n      var smc = Object.create(SourceMapConsumer.prototype);\n\n      smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n      smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n      smc.sourceRoot = aSourceMap._sourceRoot;\n      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                              smc.sourceRoot);\n      smc.file = aSourceMap._file;\n\n      smc.__generatedMappings = aSourceMap._mappings.toArray().slice();\n      smc.__originalMappings = aSourceMap._mappings.toArray().slice()\n        .sort(util.compareByOriginalPositions);\n\n      return smc;\n    };\n\n  /**\n   * The version of the source mapping spec that we are consuming.\n   */\n  SourceMapConsumer.prototype._version = 3;\n\n  /**\n   * The list of original sources.\n   */\n  Object.defineProperty(SourceMapConsumer.prototype, 'sources', {\n    get: function () {\n      return this._sources.toArray().map(function (s) {\n        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n      }, this);\n    }\n  });\n\n  // `__generatedMappings` and `__originalMappings` are arrays that hold the\n  // parsed mapping coordinates from the source map's \"mappings\" attribute. They\n  // are lazily instantiated, accessed via the `_generatedMappings` and\n  // `_originalMappings` getters respectively, and we only parse the mappings\n  // and create these arrays once queried for a source location. We jump through\n  // these hoops because there can be many thousands of mappings, and parsing\n  // them is expensive, so we only want to do it if we must.\n  //\n  // Each object in the arrays is of the form:\n  //\n  //     {\n  //       generatedLine: The line number in the generated code,\n  //       generatedColumn: The column number in the generated code,\n  //       source: The path to the original source file that generated this\n  //               chunk of code,\n  //       originalLine: The line number in the original source that\n  //                     corresponds to this chunk of generated code,\n  //       originalColumn: The column number in the original source that\n  //                       corresponds to this chunk of generated code,\n  //       name: The name of the original symbol which generated this chunk of\n  //             code.\n  //     }\n  //\n  // All properties except for `generatedLine` and `generatedColumn` can be\n  // `null`.\n  //\n  // `_generatedMappings` is ordered by the generated positions.\n  //\n  // `_originalMappings` is ordered by the original positions.\n\n  SourceMapConsumer.prototype.__generatedMappings = null;\n  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n    get: function () {\n      if (!this.__generatedMappings) {\n        this.__generatedMappings = [];\n        this.__originalMappings = [];\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this.__generatedMappings;\n    }\n  });\n\n  SourceMapConsumer.prototype.__originalMappings = null;\n  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n    get: function () {\n      if (!this.__originalMappings) {\n        this.__generatedMappings = [];\n        this.__originalMappings = [];\n        this._parseMappings(this._mappings, this.sourceRoot);\n      }\n\n      return this.__originalMappings;\n    }\n  });\n\n  SourceMapConsumer.prototype._nextCharIsMappingSeparator =\n    function SourceMapConsumer_nextCharIsMappingSeparator(aStr) {\n      var c = aStr.charAt(0);\n      return c === \";\" || c === \",\";\n    };\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  SourceMapConsumer.prototype._parseMappings =\n    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n      var generatedLine = 1;\n      var previousGeneratedColumn = 0;\n      var previousOriginalLine = 0;\n      var previousOriginalColumn = 0;\n      var previousSource = 0;\n      var previousName = 0;\n      var str = aStr;\n      var temp = {};\n      var mapping;\n\n      while (str.length > 0) {\n        if (str.charAt(0) === ';') {\n          generatedLine++;\n          str = str.slice(1);\n          previousGeneratedColumn = 0;\n        }\n        else if (str.charAt(0) === ',') {\n          str = str.slice(1);\n        }\n        else {\n          mapping = {};\n          mapping.generatedLine = generatedLine;\n\n          // Generated column.\n          base64VLQ.decode(str, temp);\n          mapping.generatedColumn = previousGeneratedColumn + temp.value;\n          previousGeneratedColumn = mapping.generatedColumn;\n          str = temp.rest;\n\n          if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {\n            // Original source.\n            base64VLQ.decode(str, temp);\n            mapping.source = this._sources.at(previousSource + temp.value);\n            previousSource += temp.value;\n            str = temp.rest;\n            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {\n              throw new Error('Found a source, but no line and column');\n            }\n\n            // Original line.\n            base64VLQ.decode(str, temp);\n            mapping.originalLine = previousOriginalLine + temp.value;\n            previousOriginalLine = mapping.originalLine;\n            // Lines are stored 0-based\n            mapping.originalLine += 1;\n            str = temp.rest;\n            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {\n              throw new Error('Found a source and line, but no column');\n            }\n\n            // Original column.\n            base64VLQ.decode(str, temp);\n            mapping.originalColumn = previousOriginalColumn + temp.value;\n            previousOriginalColumn = mapping.originalColumn;\n            str = temp.rest;\n\n            if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {\n              // Original name.\n              base64VLQ.decode(str, temp);\n              mapping.name = this._names.at(previousName + temp.value);\n              previousName += temp.value;\n              str = temp.rest;\n            }\n          }\n\n          this.__generatedMappings.push(mapping);\n          if (typeof mapping.originalLine === 'number') {\n            this.__originalMappings.push(mapping);\n          }\n        }\n      }\n\n      this.__generatedMappings.sort(util.compareByGeneratedPositions);\n      this.__originalMappings.sort(util.compareByOriginalPositions);\n    };\n\n  /**\n   * Find the mapping that best matches the hypothetical \"needle\" mapping that\n   * we are searching for in the given \"haystack\" of mappings.\n   */\n  SourceMapConsumer.prototype._findMapping =\n    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                           aColumnName, aComparator) {\n      // To return the position we are searching for, we must first find the\n      // mapping for the given position and then return the opposite position it\n      // points to. Because the mappings are sorted, we can use binary search to\n      // find the best mapping.\n\n      if (aNeedle[aLineName] <= 0) {\n        throw new TypeError('Line must be greater than or equal to 1, got '\n                            + aNeedle[aLineName]);\n      }\n      if (aNeedle[aColumnName] < 0) {\n        throw new TypeError('Column must be greater than or equal to 0, got '\n                            + aNeedle[aColumnName]);\n      }\n\n      return binarySearch.search(aNeedle, aMappings, aComparator);\n    };\n\n  /**\n   * Compute the last column for each generated mapping. The last column is\n   * inclusive.\n   */\n  SourceMapConsumer.prototype.computeColumnSpans =\n    function SourceMapConsumer_computeColumnSpans() {\n      for (var index = 0; index < this._generatedMappings.length; ++index) {\n        var mapping = this._generatedMappings[index];\n\n        // Mappings do not contain a field for the last generated columnt. We\n        // can come up with an optimistic estimate, however, by assuming that\n        // mappings are contiguous (i.e. given two consecutive mappings, the\n        // first mapping ends where the second one starts).\n        if (index + 1 < this._generatedMappings.length) {\n          var nextMapping = this._generatedMappings[index + 1];\n\n          if (mapping.generatedLine === nextMapping.generatedLine) {\n            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n            continue;\n          }\n        }\n\n        // The last mapping for each line spans the entire line.\n        mapping.lastGeneratedColumn = Infinity;\n      }\n    };\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.\n   *   - column: The column number in the generated source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.\n   *   - column: The column number in the original source, or null.\n   *   - name: The original identifier, or null.\n   */\n  SourceMapConsumer.prototype.originalPositionFor =\n    function SourceMapConsumer_originalPositionFor(aArgs) {\n      var needle = {\n        generatedLine: util.getArg(aArgs, 'line'),\n        generatedColumn: util.getArg(aArgs, 'column')\n      };\n\n      var index = this._findMapping(needle,\n                                    this._generatedMappings,\n                                    \"generatedLine\",\n                                    \"generatedColumn\",\n                                    util.compareByGeneratedPositions);\n\n      if (index >= 0) {\n        var mapping = this._generatedMappings[index];\n\n        if (mapping.generatedLine === needle.generatedLine) {\n          var source = util.getArg(mapping, 'source', null);\n          if (source != null && this.sourceRoot != null) {\n            source = util.join(this.sourceRoot, source);\n          }\n          return {\n            source: source,\n            line: util.getArg(mapping, 'originalLine', null),\n            column: util.getArg(mapping, 'originalColumn', null),\n            name: util.getArg(mapping, 'name', null)\n          };\n        }\n      }\n\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    };\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * availible.\n   */\n  SourceMapConsumer.prototype.sourceContentFor =\n    function SourceMapConsumer_sourceContentFor(aSource) {\n      if (!this.sourcesContent) {\n        return null;\n      }\n\n      if (this.sourceRoot != null) {\n        aSource = util.relative(this.sourceRoot, aSource);\n      }\n\n      if (this._sources.has(aSource)) {\n        return this.sourcesContent[this._sources.indexOf(aSource)];\n      }\n\n      var url;\n      if (this.sourceRoot != null\n          && (url = util.urlParse(this.sourceRoot))) {\n        // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n        // many users. We can help them out when they expect file:// URIs to\n        // behave like it would if they were running a local HTTP server. See\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n        var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n        if (url.scheme == \"file\"\n            && this._sources.has(fileUriAbsPath)) {\n          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n        }\n\n        if ((!url.path || url.path == \"/\")\n            && this._sources.has(\"/\" + aSource)) {\n          return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n        }\n      }\n\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    };\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *   - column: The column number in the original source.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  SourceMapConsumer.prototype.generatedPositionFor =\n    function SourceMapConsumer_generatedPositionFor(aArgs) {\n      var needle = {\n        source: util.getArg(aArgs, 'source'),\n        originalLine: util.getArg(aArgs, 'line'),\n        originalColumn: util.getArg(aArgs, 'column')\n      };\n\n      if (this.sourceRoot != null) {\n        needle.source = util.relative(this.sourceRoot, needle.source);\n      }\n\n      var index = this._findMapping(needle,\n                                    this._originalMappings,\n                                    \"originalLine\",\n                                    \"originalColumn\",\n                                    util.compareByOriginalPositions);\n\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    };\n\n  /**\n   * Returns all generated line and column information for the original source\n   * and line provided. The only argument is an object with the following\n   * properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.\n   *\n   * and an array of objects is returned, each with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.\n   *   - column: The column number in the generated source, or null.\n   */\n  SourceMapConsumer.prototype.allGeneratedPositionsFor =\n    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n      // When there is no exact match, SourceMapConsumer.prototype._findMapping\n      // returns the index of the closest mapping less than the needle. By\n      // setting needle.originalColumn to Infinity, we thus find the last\n      // mapping for the given line, provided such a mapping exists.\n      var needle = {\n        source: util.getArg(aArgs, 'source'),\n        originalLine: util.getArg(aArgs, 'line'),\n        originalColumn: Infinity\n      };\n\n      if (this.sourceRoot != null) {\n        needle.source = util.relative(this.sourceRoot, needle.source);\n      }\n\n      var mappings = [];\n\n      var index = this._findMapping(needle,\n                                    this._originalMappings,\n                                    \"originalLine\",\n                                    \"originalColumn\",\n                                    util.compareByOriginalPositions);\n      if (index >= 0) {\n        var mapping = this._originalMappings[index];\n\n        while (mapping && mapping.originalLine === needle.originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[--index];\n        }\n      }\n\n      return mappings.reverse();\n    };\n\n  SourceMapConsumer.GENERATED_ORDER = 1;\n  SourceMapConsumer.ORIGINAL_ORDER = 2;\n\n  /**\n   * Iterate over each mapping between an original source/line/column and a\n   * generated line/column in this source map.\n   *\n   * @param Function aCallback\n   *        The function that is called with each mapping.\n   * @param Object aContext\n   *        Optional. If specified, this object will be the value of `this` every\n   *        time that `aCallback` is called.\n   * @param aOrder\n   *        Either `SourceMapConsumer.GENERATED_ORDER` or\n   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n   *        iterate over the mappings sorted by the generated file's line/column\n   *        order or the original's source/line/column order, respectively. Defaults to\n   *        `SourceMapConsumer.GENERATED_ORDER`.\n   */\n  SourceMapConsumer.prototype.eachMapping =\n    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n      var context = aContext || null;\n      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n      var mappings;\n      switch (order) {\n      case SourceMapConsumer.GENERATED_ORDER:\n        mappings = this._generatedMappings;\n        break;\n      case SourceMapConsumer.ORIGINAL_ORDER:\n        mappings = this._originalMappings;\n        break;\n      default:\n        throw new Error(\"Unknown order of iteration.\");\n      }\n\n      var sourceRoot = this.sourceRoot;\n      mappings.map(function (mapping) {\n        var source = mapping.source;\n        if (source != null && sourceRoot != null) {\n          source = util.join(sourceRoot, source);\n        }\n        return {\n          source: source,\n          generatedLine: mapping.generatedLine,\n          generatedColumn: mapping.generatedColumn,\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: mapping.name\n        };\n      }).forEach(aCallback, context);\n    };\n\n  exports.SourceMapConsumer = SourceMapConsumer;\n\n});\n\n},{\"./array-set\":20,\"./base64-vlq\":21,\"./binary-search\":23,\"./util\":28,\"amdefine\":29}],26:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var base64VLQ = require('./base64-vlq');\n  var util = require('./util');\n  var ArraySet = require('./array-set').ArraySet;\n  var MappingList = require('./mapping-list').MappingList;\n\n  /**\n   * An instance of the SourceMapGenerator represents a source map which is\n   * being built incrementally. You may pass an object with the following\n   * properties:\n   *\n   *   - file: The filename of the generated source.\n   *   - sourceRoot: A root for all relative URLs in this source map.\n   */\n  function SourceMapGenerator(aArgs) {\n    if (!aArgs) {\n      aArgs = {};\n    }\n    this._file = util.getArg(aArgs, 'file', null);\n    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n    this._sources = new ArraySet();\n    this._names = new ArraySet();\n    this._mappings = new MappingList();\n    this._sourcesContents = null;\n  }\n\n  SourceMapGenerator.prototype._version = 3;\n\n  /**\n   * Creates a new SourceMapGenerator based on a SourceMapConsumer\n   *\n   * @param aSourceMapConsumer The SourceMap.\n   */\n  SourceMapGenerator.fromSourceMap =\n    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n      var sourceRoot = aSourceMapConsumer.sourceRoot;\n      var generator = new SourceMapGenerator({\n        file: aSourceMapConsumer.file,\n        sourceRoot: sourceRoot\n      });\n      aSourceMapConsumer.eachMapping(function (mapping) {\n        var newMapping = {\n          generated: {\n            line: mapping.generatedLine,\n            column: mapping.generatedColumn\n          }\n        };\n\n        if (mapping.source != null) {\n          newMapping.source = mapping.source;\n          if (sourceRoot != null) {\n            newMapping.source = util.relative(sourceRoot, newMapping.source);\n          }\n\n          newMapping.original = {\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          };\n\n          if (mapping.name != null) {\n            newMapping.name = mapping.name;\n          }\n        }\n\n        generator.addMapping(newMapping);\n      });\n      aSourceMapConsumer.sources.forEach(function (sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          generator.setSourceContent(sourceFile, content);\n        }\n      });\n      return generator;\n    };\n\n  /**\n   * Add a single mapping from original source line and column to the generated\n   * source's line and column for this source map being created. The mapping\n   * object should have the following properties:\n   *\n   *   - generated: An object with the generated line and column positions.\n   *   - original: An object with the original line and column positions.\n   *   - source: The original source file (relative to the sourceRoot).\n   *   - name: An optional original token name for this mapping.\n   */\n  SourceMapGenerator.prototype.addMapping =\n    function SourceMapGenerator_addMapping(aArgs) {\n      var generated = util.getArg(aArgs, 'generated');\n      var original = util.getArg(aArgs, 'original', null);\n      var source = util.getArg(aArgs, 'source', null);\n      var name = util.getArg(aArgs, 'name', null);\n\n      if (!this._skipValidation) {\n        this._validateMapping(generated, original, source, name);\n      }\n\n      if (source != null && !this._sources.has(source)) {\n        this._sources.add(source);\n      }\n\n      if (name != null && !this._names.has(name)) {\n        this._names.add(name);\n      }\n\n      this._mappings.add({\n        generatedLine: generated.line,\n        generatedColumn: generated.column,\n        originalLine: original != null && original.line,\n        originalColumn: original != null && original.column,\n        source: source,\n        name: name\n      });\n    };\n\n  /**\n   * Set the source content for a source file.\n   */\n  SourceMapGenerator.prototype.setSourceContent =\n    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n      var source = aSourceFile;\n      if (this._sourceRoot != null) {\n        source = util.relative(this._sourceRoot, source);\n      }\n\n      if (aSourceContent != null) {\n        // Add the source content to the _sourcesContents map.\n        // Create a new _sourcesContents map if the property is null.\n        if (!this._sourcesContents) {\n          this._sourcesContents = {};\n        }\n        this._sourcesContents[util.toSetString(source)] = aSourceContent;\n      } else if (this._sourcesContents) {\n        // Remove the source file from the _sourcesContents map.\n        // If the _sourcesContents map is empty, set the property to null.\n        delete this._sourcesContents[util.toSetString(source)];\n        if (Object.keys(this._sourcesContents).length === 0) {\n          this._sourcesContents = null;\n        }\n      }\n    };\n\n  /**\n   * Applies the mappings of a sub-source-map for a specific source file to the\n   * source map being generated. Each mapping to the supplied source file is\n   * rewritten using the supplied source map. Note: The resolution for the\n   * resulting mappings is the minimium of this map and the supplied map.\n   *\n   * @param aSourceMapConsumer The source map to be applied.\n   * @param aSourceFile Optional. The filename of the source file.\n   *        If omitted, SourceMapConsumer's file property will be used.\n   * @param aSourceMapPath Optional. The dirname of the path to the source map\n   *        to be applied. If relative, it is relative to the SourceMapConsumer.\n   *        This parameter is needed when the two source maps aren't in the same\n   *        directory, and the source map to be applied contains relative source\n   *        paths. If so, those relative source paths need to be rewritten\n   *        relative to the SourceMapGenerator.\n   */\n  SourceMapGenerator.prototype.applySourceMap =\n    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n      var sourceFile = aSourceFile;\n      // If aSourceFile is omitted, we will use the file property of the SourceMap\n      if (aSourceFile == null) {\n        if (aSourceMapConsumer.file == null) {\n          throw new Error(\n            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n            'or the source map\\'s \"file\" property. Both were omitted.'\n          );\n        }\n        sourceFile = aSourceMapConsumer.file;\n      }\n      var sourceRoot = this._sourceRoot;\n      // Make \"sourceFile\" relative if an absolute Url is passed.\n      if (sourceRoot != null) {\n        sourceFile = util.relative(sourceRoot, sourceFile);\n      }\n      // Applying the SourceMap can add and remove items from the sources and\n      // the names array.\n      var newSources = new ArraySet();\n      var newNames = new ArraySet();\n\n      // Find mappings for the \"sourceFile\"\n      this._mappings.unsortedForEach(function (mapping) {\n        if (mapping.source === sourceFile && mapping.originalLine != null) {\n          // Check if it can be mapped by the source map, then update the mapping.\n          var original = aSourceMapConsumer.originalPositionFor({\n            line: mapping.originalLine,\n            column: mapping.originalColumn\n          });\n          if (original.source != null) {\n            // Copy mapping\n            mapping.source = original.source;\n            if (aSourceMapPath != null) {\n              mapping.source = util.join(aSourceMapPath, mapping.source)\n            }\n            if (sourceRoot != null) {\n              mapping.source = util.relative(sourceRoot, mapping.source);\n            }\n            mapping.originalLine = original.line;\n            mapping.originalColumn = original.column;\n            if (original.name != null) {\n              mapping.name = original.name;\n            }\n          }\n        }\n\n        var source = mapping.source;\n        if (source != null && !newSources.has(source)) {\n          newSources.add(source);\n        }\n\n        var name = mapping.name;\n        if (name != null && !newNames.has(name)) {\n          newNames.add(name);\n        }\n\n      }, this);\n      this._sources = newSources;\n      this._names = newNames;\n\n      // Copy sourcesContents of applied map.\n      aSourceMapConsumer.sources.forEach(function (sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aSourceMapPath != null) {\n            sourceFile = util.join(aSourceMapPath, sourceFile);\n          }\n          if (sourceRoot != null) {\n            sourceFile = util.relative(sourceRoot, sourceFile);\n          }\n          this.setSourceContent(sourceFile, content);\n        }\n      }, this);\n    };\n\n  /**\n   * A mapping can have one of the three levels of data:\n   *\n   *   1. Just the generated position.\n   *   2. The Generated position, original position, and original source.\n   *   3. Generated and original position, original source, as well as a name\n   *      token.\n   *\n   * To maintain consistency, we validate that any new mapping being added falls\n   * in to one of these categories.\n   */\n  SourceMapGenerator.prototype._validateMapping =\n    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                                aName) {\n      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n          && aGenerated.line > 0 && aGenerated.column >= 0\n          && !aOriginal && !aSource && !aName) {\n        // Case 1.\n        return;\n      }\n      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n               && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n               && aGenerated.line > 0 && aGenerated.column >= 0\n               && aOriginal.line > 0 && aOriginal.column >= 0\n               && aSource) {\n        // Cases 2 and 3.\n        return;\n      }\n      else {\n        throw new Error('Invalid mapping: ' + JSON.stringify({\n          generated: aGenerated,\n          source: aSource,\n          original: aOriginal,\n          name: aName\n        }));\n      }\n    };\n\n  /**\n   * Serialize the accumulated mappings in to the stream of base 64 VLQs\n   * specified by the source map format.\n   */\n  SourceMapGenerator.prototype._serializeMappings =\n    function SourceMapGenerator_serializeMappings() {\n      var previousGeneratedColumn = 0;\n      var previousGeneratedLine = 1;\n      var previousOriginalColumn = 0;\n      var previousOriginalLine = 0;\n      var previousName = 0;\n      var previousSource = 0;\n      var result = '';\n      var mapping;\n\n      var mappings = this._mappings.toArray();\n\n      for (var i = 0, len = mappings.length; i < len; i++) {\n        mapping = mappings[i];\n\n        if (mapping.generatedLine !== previousGeneratedLine) {\n          previousGeneratedColumn = 0;\n          while (mapping.generatedLine !== previousGeneratedLine) {\n            result += ';';\n            previousGeneratedLine++;\n          }\n        }\n        else {\n          if (i > 0) {\n            if (!util.compareByGeneratedPositions(mapping, mappings[i - 1])) {\n              continue;\n            }\n            result += ',';\n          }\n        }\n\n        result += base64VLQ.encode(mapping.generatedColumn\n                                   - previousGeneratedColumn);\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (mapping.source != null) {\n          result += base64VLQ.encode(this._sources.indexOf(mapping.source)\n                                     - previousSource);\n          previousSource = this._sources.indexOf(mapping.source);\n\n          // lines are stored 0-based in SourceMap spec version 3\n          result += base64VLQ.encode(mapping.originalLine - 1\n                                     - previousOriginalLine);\n          previousOriginalLine = mapping.originalLine - 1;\n\n          result += base64VLQ.encode(mapping.originalColumn\n                                     - previousOriginalColumn);\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (mapping.name != null) {\n            result += base64VLQ.encode(this._names.indexOf(mapping.name)\n                                       - previousName);\n            previousName = this._names.indexOf(mapping.name);\n          }\n        }\n      }\n\n      return result;\n    };\n\n  SourceMapGenerator.prototype._generateSourcesContent =\n    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n      return aSources.map(function (source) {\n        if (!this._sourcesContents) {\n          return null;\n        }\n        if (aSourceRoot != null) {\n          source = util.relative(aSourceRoot, source);\n        }\n        var key = util.toSetString(source);\n        return Object.prototype.hasOwnProperty.call(this._sourcesContents,\n                                                    key)\n          ? this._sourcesContents[key]\n          : null;\n      }, this);\n    };\n\n  /**\n   * Externalize the source map.\n   */\n  SourceMapGenerator.prototype.toJSON =\n    function SourceMapGenerator_toJSON() {\n      var map = {\n        version: this._version,\n        sources: this._sources.toArray(),\n        names: this._names.toArray(),\n        mappings: this._serializeMappings()\n      };\n      if (this._file != null) {\n        map.file = this._file;\n      }\n      if (this._sourceRoot != null) {\n        map.sourceRoot = this._sourceRoot;\n      }\n      if (this._sourcesContents) {\n        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n      }\n\n      return map;\n    };\n\n  /**\n   * Render the source map being generated to a string.\n   */\n  SourceMapGenerator.prototype.toString =\n    function SourceMapGenerator_toString() {\n      return JSON.stringify(this);\n    };\n\n  exports.SourceMapGenerator = SourceMapGenerator;\n\n});\n\n},{\"./array-set\":20,\"./base64-vlq\":21,\"./mapping-list\":24,\"./util\":28,\"amdefine\":29}],27:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\n  var util = require('./util');\n\n  // Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n  // operating systems these days (capturing the result).\n  var REGEX_NEWLINE = /(\\r?\\n)/;\n\n  // Newline character code for charCodeAt() comparisons\n  var NEWLINE_CODE = 10;\n\n  // Private symbol for identifying `SourceNode`s when multiple versions of\n  // the source-map library are loaded. This MUST NOT CHANGE across\n  // versions!\n  var isSourceNode = \"$$$isSourceNode$$$\";\n\n  /**\n   * SourceNodes provide a way to abstract over interpolating/concatenating\n   * snippets of generated JavaScript source code while maintaining the line and\n   * column information associated with the original source code.\n   *\n   * @param aLine The original line number.\n   * @param aColumn The original column number.\n   * @param aSource The original source's filename.\n   * @param aChunks Optional. An array of strings which are snippets of\n   *        generated JS, or other SourceNodes.\n   * @param aName The original identifier.\n   */\n  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n  }\n\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   * @param aRelativePath Optional. The path that relative sources in the\n   *        SourceMapConsumer should be relative to.\n   */\n  SourceNode.fromStringWithSourceMap =\n    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      // The SourceNode we want to fill with the generated code\n      // and the SourceMap\n      var node = new SourceNode();\n\n      // All even indices of this array are one line of the generated code,\n      // while all odd indices are the newlines between two adjacent lines\n      // (since `REGEX_NEWLINE` captures its match).\n      // Processed fragments are removed from this array, by calling `shiftNextLine`.\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var shiftNextLine = function() {\n        var lineContents = remainingLines.shift();\n        // The last line of a file might not have a newline.\n        var newLine = remainingLines.shift() || \"\";\n        return lineContents + newLine;\n      };\n\n      // We need to remember the position of \"remainingLines\"\n      var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n      // The generate SourceNodes we need a code range.\n      // To extract it current and last mapping is used.\n      // Here we store the last mapping.\n      var lastMapping = null;\n\n      aSourceMapConsumer.eachMapping(function (mapping) {\n        if (lastMapping !== null) {\n          // We add the code from \"lastMapping\" to \"mapping\":\n          // First check if there is a new line in between.\n          if (lastGeneratedLine < mapping.generatedLine) {\n            var code = \"\";\n            // Associate first line with \"lastMapping\"\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0;\n            // The remaining code is added without mapping\n          } else {\n            // There is no new line in between.\n            // Associate the code between \"lastGeneratedColumn\" and\n            // \"mapping.generatedColumn\" with \"lastMapping\"\n            var nextLine = remainingLines[0];\n            var code = nextLine.substr(0, mapping.generatedColumn -\n                                          lastGeneratedColumn);\n            remainingLines[0] = nextLine.substr(mapping.generatedColumn -\n                                                lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code);\n            // No more remaining code, continue\n            lastMapping = mapping;\n            return;\n          }\n        }\n        // We add the generated code until the first mapping\n        // to the SourceNode without any mapping.\n        // Each line is added as separate string.\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          var nextLine = remainingLines[0];\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[0] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n        lastMapping = mapping;\n      }, this);\n      // We have processed all mappings.\n      if (remainingLines.length > 0) {\n        if (lastMapping) {\n          // Associate the remaining code in the current line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n        }\n        // and add the remaining lines without any mapping\n        node.add(remainingLines.join(\"\"));\n      }\n\n      // Copy sourcesContent into SourceNode\n      aSourceMapConsumer.sources.forEach(function (sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n\n      return node;\n\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === undefined) {\n          node.add(code);\n        } else {\n          var source = aRelativePath\n            ? util.join(aRelativePath, mapping.source)\n            : mapping.source;\n          node.add(new SourceNode(mapping.originalLine,\n                                  mapping.originalColumn,\n                                  source,\n                                  code,\n                                  mapping.name));\n        }\n      }\n    };\n\n  /**\n   * Add a chunk of generated JS to this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  SourceNode.prototype.add = function SourceNode_add(aChunk) {\n    if (Array.isArray(aChunk)) {\n      aChunk.forEach(function (chunk) {\n        this.add(chunk);\n      }, this);\n    }\n    else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      if (aChunk) {\n        this.children.push(aChunk);\n      }\n    }\n    else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  };\n\n  /**\n   * Add a chunk of generated JS to the beginning of this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n    if (Array.isArray(aChunk)) {\n      for (var i = aChunk.length-1; i >= 0; i--) {\n        this.prepend(aChunk[i]);\n      }\n    }\n    else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      this.children.unshift(aChunk);\n    }\n    else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  };\n\n  /**\n   * Walk over the tree of JS snippets in this node and its children. The\n   * walking function is called once for each snippet of JS and is passed that\n   * snippet and the its original associated source's line/column location.\n   *\n   * @param aFn The traversal function.\n   */\n  SourceNode.prototype.walk = function SourceNode_walk(aFn) {\n    var chunk;\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      chunk = this.children[i];\n      if (chunk[isSourceNode]) {\n        chunk.walk(aFn);\n      }\n      else {\n        if (chunk !== '') {\n          aFn(chunk, { source: this.source,\n                       line: this.line,\n                       column: this.column,\n                       name: this.name });\n        }\n      }\n    }\n  };\n\n  /**\n   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n   * each of `this.children`.\n   *\n   * @param aSep The separator.\n   */\n  SourceNode.prototype.join = function SourceNode_join(aSep) {\n    var newChildren;\n    var i;\n    var len = this.children.length;\n    if (len > 0) {\n      newChildren = [];\n      for (i = 0; i < len-1; i++) {\n        newChildren.push(this.children[i]);\n        newChildren.push(aSep);\n      }\n      newChildren.push(this.children[i]);\n      this.children = newChildren;\n    }\n    return this;\n  };\n\n  /**\n   * Call String.prototype.replace on the very right-most source snippet. Useful\n   * for trimming whitespace from the end of a source node, etc.\n   *\n   * @param aPattern The pattern to replace.\n   * @param aReplacement The thing to replace the pattern with.\n   */\n  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n    var lastChild = this.children[this.children.length - 1];\n    if (lastChild[isSourceNode]) {\n      lastChild.replaceRight(aPattern, aReplacement);\n    }\n    else if (typeof lastChild === 'string') {\n      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n    }\n    else {\n      this.children.push(''.replace(aPattern, aReplacement));\n    }\n    return this;\n  };\n\n  /**\n   * Set the source content for a source file. This will be added to the SourceMapGenerator\n   * in the sourcesContent field.\n   *\n   * @param aSourceFile The filename of the source file\n   * @param aSourceContent The content of the source file\n   */\n  SourceNode.prototype.setSourceContent =\n    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    };\n\n  /**\n   * Walk over the tree of SourceNodes. The walking function is called for each\n   * source file content and is passed the filename and source content.\n   *\n   * @param aFn The traversal function.\n   */\n  SourceNode.prototype.walkSourceContents =\n    function SourceNode_walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n\n      var sources = Object.keys(this.sourceContents);\n      for (var i = 0, len = sources.length; i < len; i++) {\n        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n      }\n    };\n\n  /**\n   * Return the string representation of this source node. Walks over the tree\n   * and concatenates all the various snippets together to one string.\n   */\n  SourceNode.prototype.toString = function SourceNode_toString() {\n    var str = \"\";\n    this.walk(function (chunk) {\n      str += chunk;\n    });\n    return str;\n  };\n\n  /**\n   * Returns the string representation of this source node along with a source\n   * map.\n   */\n  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n    var generated = {\n      code: \"\",\n      line: 1,\n      column: 0\n    };\n    var map = new SourceMapGenerator(aArgs);\n    var sourceMappingActive = false;\n    var lastOriginalSource = null;\n    var lastOriginalLine = null;\n    var lastOriginalColumn = null;\n    var lastOriginalName = null;\n    this.walk(function (chunk, original) {\n      generated.code += chunk;\n      if (original.source !== null\n          && original.line !== null\n          && original.column !== null) {\n        if(lastOriginalSource !== original.source\n           || lastOriginalLine !== original.line\n           || lastOriginalColumn !== original.column\n           || lastOriginalName !== original.name) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n        lastOriginalSource = original.source;\n        lastOriginalLine = original.line;\n        lastOriginalColumn = original.column;\n        lastOriginalName = original.name;\n        sourceMappingActive = true;\n      } else if (sourceMappingActive) {\n        map.addMapping({\n          generated: {\n            line: generated.line,\n            column: generated.column\n          }\n        });\n        lastOriginalSource = null;\n        sourceMappingActive = false;\n      }\n      for (var idx = 0, length = chunk.length; idx < length; idx++) {\n        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n          generated.line++;\n          generated.column = 0;\n          // Mappings end at eol\n          if (idx + 1 === length) {\n            lastOriginalSource = null;\n            sourceMappingActive = false;\n          } else if (sourceMappingActive) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n        } else {\n          generated.column++;\n        }\n      }\n    });\n    this.walkSourceContents(function (sourceFile, sourceContent) {\n      map.setSourceContent(sourceFile, sourceContent);\n    });\n\n    return { code: generated.code, map: map };\n  };\n\n  exports.SourceNode = SourceNode;\n\n});\n\n},{\"./source-map-generator\":26,\"./util\":28,\"amdefine\":29}],28:[function(require,module,exports){\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module, require);\n}\ndefine(function (require, exports, module) {\n\n  /**\n   * This is a helper function for getting values from parameter/options\n   * objects.\n   *\n   * @param args The object we are extracting values from\n   * @param name The name of the property we are getting.\n   * @param defaultValue An optional value to return if the property is missing\n   * from the object. If this is not specified and the property is missing, an\n   * error will be thrown.\n   */\n  function getArg(aArgs, aName, aDefaultValue) {\n    if (aName in aArgs) {\n      return aArgs[aName];\n    } else if (arguments.length === 3) {\n      return aDefaultValue;\n    } else {\n      throw new Error('\"' + aName + '\" is a required argument.');\n    }\n  }\n  exports.getArg = getArg;\n\n  var urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.]*)(?::(\\d+))?(\\S*)$/;\n  var dataUrlRegexp = /^data:.+\\,.+$/;\n\n  function urlParse(aUrl) {\n    var match = aUrl.match(urlRegexp);\n    if (!match) {\n      return null;\n    }\n    return {\n      scheme: match[1],\n      auth: match[2],\n      host: match[3],\n      port: match[4],\n      path: match[5]\n    };\n  }\n  exports.urlParse = urlParse;\n\n  function urlGenerate(aParsedUrl) {\n    var url = '';\n    if (aParsedUrl.scheme) {\n      url += aParsedUrl.scheme + ':';\n    }\n    url += '//';\n    if (aParsedUrl.auth) {\n      url += aParsedUrl.auth + '@';\n    }\n    if (aParsedUrl.host) {\n      url += aParsedUrl.host;\n    }\n    if (aParsedUrl.port) {\n      url += \":\" + aParsedUrl.port\n    }\n    if (aParsedUrl.path) {\n      url += aParsedUrl.path;\n    }\n    return url;\n  }\n  exports.urlGenerate = urlGenerate;\n\n  /**\n   * Normalizes a path, or the path portion of a URL:\n   *\n   * - Replaces consequtive slashes with one slash.\n   * - Removes unnecessary '.' parts.\n   * - Removes unnecessary '<dir>/..' parts.\n   *\n   * Based on code in the Node.js 'path' core module.\n   *\n   * @param aPath The path or url to normalize.\n   */\n  function normalize(aPath) {\n    var path = aPath;\n    var url = urlParse(aPath);\n    if (url) {\n      if (!url.path) {\n        return aPath;\n      }\n      path = url.path;\n    }\n    var isAbsolute = (path.charAt(0) === '/');\n\n    var parts = path.split(/\\/+/);\n    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n      part = parts[i];\n      if (part === '.') {\n        parts.splice(i, 1);\n      } else if (part === '..') {\n        up++;\n      } else if (up > 0) {\n        if (part === '') {\n          // The first part is blank if the path is absolute. Trying to go\n          // above the root is a no-op. Therefore we can remove all '..' parts\n          // directly after the root.\n          parts.splice(i + 1, up);\n          up = 0;\n        } else {\n          parts.splice(i, 2);\n          up--;\n        }\n      }\n    }\n    path = parts.join('/');\n\n    if (path === '') {\n      path = isAbsolute ? '/' : '.';\n    }\n\n    if (url) {\n      url.path = path;\n      return urlGenerate(url);\n    }\n    return path;\n  }\n  exports.normalize = normalize;\n\n  /**\n   * Joins two paths/URLs.\n   *\n   * @param aRoot The root path or URL.\n   * @param aPath The path or URL to be joined with the root.\n   *\n   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n   *   first.\n   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n   *   is updated with the result and aRoot is returned. Otherwise the result\n   *   is returned.\n   *   - If aPath is absolute, the result is aPath.\n   *   - Otherwise the two paths are joined with a slash.\n   * - Joining for example 'http://' and 'www.example.com' is also supported.\n   */\n  function join(aRoot, aPath) {\n    if (aRoot === \"\") {\n      aRoot = \".\";\n    }\n    if (aPath === \"\") {\n      aPath = \".\";\n    }\n    var aPathUrl = urlParse(aPath);\n    var aRootUrl = urlParse(aRoot);\n    if (aRootUrl) {\n      aRoot = aRootUrl.path || '/';\n    }\n\n    // `join(foo, '//www.example.org')`\n    if (aPathUrl && !aPathUrl.scheme) {\n      if (aRootUrl) {\n        aPathUrl.scheme = aRootUrl.scheme;\n      }\n      return urlGenerate(aPathUrl);\n    }\n\n    if (aPathUrl || aPath.match(dataUrlRegexp)) {\n      return aPath;\n    }\n\n    // `join('http://', 'www.example.com')`\n    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n      aRootUrl.host = aPath;\n      return urlGenerate(aRootUrl);\n    }\n\n    var joined = aPath.charAt(0) === '/'\n      ? aPath\n      : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n    if (aRootUrl) {\n      aRootUrl.path = joined;\n      return urlGenerate(aRootUrl);\n    }\n    return joined;\n  }\n  exports.join = join;\n\n  /**\n   * Make a path relative to a URL or another path.\n   *\n   * @param aRoot The root path or URL.\n   * @param aPath The path or URL to be made relative to aRoot.\n   */\n  function relative(aRoot, aPath) {\n    if (aRoot === \"\") {\n      aRoot = \".\";\n    }\n\n    aRoot = aRoot.replace(/\\/$/, '');\n\n    // XXX: It is possible to remove this block, and the tests still pass!\n    var url = urlParse(aRoot);\n    if (aPath.charAt(0) == \"/\" && url && url.path == \"/\") {\n      return aPath.slice(1);\n    }\n\n    return aPath.indexOf(aRoot + '/') === 0\n      ? aPath.substr(aRoot.length + 1)\n      : aPath;\n  }\n  exports.relative = relative;\n\n  /**\n   * Because behavior goes wacky when you set `__proto__` on objects, we\n   * have to prefix all the strings in our set with an arbitrary character.\n   *\n   * See https://github.com/mozilla/source-map/pull/31 and\n   * https://github.com/mozilla/source-map/issues/30\n   *\n   * @param String aStr\n   */\n  function toSetString(aStr) {\n    return '$' + aStr;\n  }\n  exports.toSetString = toSetString;\n\n  function fromSetString(aStr) {\n    return aStr.substr(1);\n  }\n  exports.fromSetString = fromSetString;\n\n  function strcmp(aStr1, aStr2) {\n    var s1 = aStr1 || \"\";\n    var s2 = aStr2 || \"\";\n    return (s1 > s2) - (s1 < s2);\n  }\n\n  /**\n   * Comparator between two mappings where the original positions are compared.\n   *\n   * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n   * mappings with the same original source/line/column, but different generated\n   * line and column the same. Useful when searching for a mapping with a\n   * stubbed out mapping.\n   */\n  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n    var cmp;\n\n    cmp = strcmp(mappingA.source, mappingB.source);\n    if (cmp) {\n      return cmp;\n    }\n\n    cmp = mappingA.originalLine - mappingB.originalLine;\n    if (cmp) {\n      return cmp;\n    }\n\n    cmp = mappingA.originalColumn - mappingB.originalColumn;\n    if (cmp || onlyCompareOriginal) {\n      return cmp;\n    }\n\n    cmp = strcmp(mappingA.name, mappingB.name);\n    if (cmp) {\n      return cmp;\n    }\n\n    cmp = mappingA.generatedLine - mappingB.generatedLine;\n    if (cmp) {\n      return cmp;\n    }\n\n    return mappingA.generatedColumn - mappingB.generatedColumn;\n  };\n  exports.compareByOriginalPositions = compareByOriginalPositions;\n\n  /**\n   * Comparator between two mappings where the generated positions are\n   * compared.\n   *\n   * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n   * mappings with the same generated line and column, but different\n   * source/name/original line and column the same. Useful when searching for a\n   * mapping with a stubbed out mapping.\n   */\n  function compareByGeneratedPositions(mappingA, mappingB, onlyCompareGenerated) {\n    var cmp;\n\n    cmp = mappingA.generatedLine - mappingB.generatedLine;\n    if (cmp) {\n      return cmp;\n    }\n\n    cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n    if (cmp || onlyCompareGenerated) {\n      return cmp;\n    }\n\n    cmp = strcmp(mappingA.source, mappingB.source);\n    if (cmp) {\n      return cmp;\n    }\n\n    cmp = mappingA.originalLine - mappingB.originalLine;\n    if (cmp) {\n      return cmp;\n    }\n\n    cmp = mappingA.originalColumn - mappingB.originalColumn;\n    if (cmp) {\n      return cmp;\n    }\n\n    return strcmp(mappingA.name, mappingB.name);\n  };\n  exports.compareByGeneratedPositions = compareByGeneratedPositions;\n\n});\n\n},{\"amdefine\":29}],29:[function(require,module,exports){\n(function (process,__filename){\n/** vim: et:ts=4:sw=4:sts=4\n * @license amdefine 1.0.1 Copyright (c) 2011-2016, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/jrburke/amdefine for details\n */\n\n/*jslint node: true */\n/*global module, process */\n'use strict';\n\n/**\n * Creates a define for node.\n * @param {Object} module the \"module\" object that is defined by Node for the\n * current module.\n * @param {Function} [requireFn]. Node's require function for the current module.\n * It only needs to be passed in Node versions before 0.5, when module.require\n * did not exist.\n * @returns {Function} a define function that is usable for the current node\n * module.\n */\nfunction amdefine(module, requireFn) {\n    'use strict';\n    var defineCache = {},\n        loaderCache = {},\n        alreadyCalled = false,\n        path = require('path'),\n        makeRequire, stringRequire;\n\n    /**\n     * Trims the . and .. from an array of path segments.\n     * It will keep a leading path segment if a .. will become\n     * the first path segment, to help with module name lookups,\n     * which act like paths, but can be remapped. But the end result,\n     * all paths that use this function should look normalized.\n     * NOTE: this method MODIFIES the input array.\n     * @param {Array} ary the array of path segments.\n     */\n    function trimDots(ary) {\n        var i, part;\n        for (i = 0; ary[i]; i+= 1) {\n            part = ary[i];\n            if (part === '.') {\n                ary.splice(i, 1);\n                i -= 1;\n            } else if (part === '..') {\n                if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {\n                    //End of the line. Keep at least one non-dot\n                    //path segment at the front so it can be mapped\n                    //correctly to disk. Otherwise, there is likely\n                    //no path mapping for a path starting with '..'.\n                    //This can still fail, but catches the most reasonable\n                    //uses of ..\n                    break;\n                } else if (i > 0) {\n                    ary.splice(i - 1, 2);\n                    i -= 2;\n                }\n            }\n        }\n    }\n\n    function normalize(name, baseName) {\n        var baseParts;\n\n        //Adjust any relative paths.\n        if (name && name.charAt(0) === '.') {\n            //If have a base name, try to normalize against it,\n            //otherwise, assume it is a top-level require that will\n            //be relative to baseUrl in the end.\n            if (baseName) {\n                baseParts = baseName.split('/');\n                baseParts = baseParts.slice(0, baseParts.length - 1);\n                baseParts = baseParts.concat(name.split('/'));\n                trimDots(baseParts);\n                name = baseParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    /**\n     * Create the normalize() function passed to a loader plugin's\n     * normalize method.\n     */\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(id) {\n        function load(value) {\n            loaderCache[id] = value;\n        }\n\n        load.fromText = function (id, text) {\n            //This one is difficult because the text can/probably uses\n            //define, and any relative paths and requires should be relative\n            //to that id was it would be found on disk. But this would require\n            //bootstrapping a module/require fairly deeply from node core.\n            //Not sure how best to go about that yet.\n            throw new Error('amdefine does not implement load.fromText');\n        };\n\n        return load;\n    }\n\n    makeRequire = function (systemRequire, exports, module, relId) {\n        function amdRequire(deps, callback) {\n            if (typeof deps === 'string') {\n                //Synchronous, single module require('')\n                return stringRequire(systemRequire, exports, module, deps, relId);\n            } else {\n                //Array of dependencies with a callback.\n\n                //Convert the dependencies to modules.\n                deps = deps.map(function (depName) {\n                    return stringRequire(systemRequire, exports, module, depName, relId);\n                });\n\n                //Wait for next tick to call back the require call.\n                if (callback) {\n                    process.nextTick(function () {\n                        callback.apply(null, deps);\n                    });\n                }\n            }\n        }\n\n        amdRequire.toUrl = function (filePath) {\n            if (filePath.indexOf('.') === 0) {\n                return normalize(filePath, path.dirname(module.filename));\n            } else {\n                return filePath;\n            }\n        };\n\n        return amdRequire;\n    };\n\n    //Favor explicit value, passed in if the module wants to support Node 0.4.\n    requireFn = requireFn || function req() {\n        return module.require.apply(module, arguments);\n    };\n\n    function runFactory(id, deps, factory) {\n        var r, e, m, result;\n\n        if (id) {\n            e = loaderCache[id] = {};\n            m = {\n                id: id,\n                uri: __filename,\n                exports: e\n            };\n            r = makeRequire(requireFn, e, m, id);\n        } else {\n            //Only support one define call per file\n            if (alreadyCalled) {\n                throw new Error('amdefine with no module ID cannot be called more than once per file.');\n            }\n            alreadyCalled = true;\n\n            //Use the real variables from node\n            //Use module.exports for exports, since\n            //the exports in here is amdefine exports.\n            e = module.exports;\n            m = module;\n            r = makeRequire(requireFn, e, m, module.id);\n        }\n\n        //If there are dependencies, they are strings, so need\n        //to convert them to dependency values.\n        if (deps) {\n            deps = deps.map(function (depName) {\n                return r(depName);\n            });\n        }\n\n        //Call the factory with the right dependencies.\n        if (typeof factory === 'function') {\n            result = factory.apply(m.exports, deps);\n        } else {\n            result = factory;\n        }\n\n        if (result !== undefined) {\n            m.exports = result;\n            if (id) {\n                loaderCache[id] = m.exports;\n            }\n        }\n    }\n\n    stringRequire = function (systemRequire, exports, module, id, relId) {\n        //Split the ID by a ! so that\n        var index = id.indexOf('!'),\n            originalId = id,\n            prefix, plugin;\n\n        if (index === -1) {\n            id = normalize(id, relId);\n\n            //Straight module lookup. If it is one of the special dependencies,\n            //deal with it, otherwise, delegate to node.\n            if (id === 'require') {\n                return makeRequire(systemRequire, exports, module, relId);\n            } else if (id === 'exports') {\n                return exports;\n            } else if (id === 'module') {\n                return module;\n            } else if (loaderCache.hasOwnProperty(id)) {\n                return loaderCache[id];\n            } else if (defineCache[id]) {\n                runFactory.apply(null, defineCache[id]);\n                return loaderCache[id];\n            } else {\n                if(systemRequire) {\n                    return systemRequire(originalId);\n                } else {\n                    throw new Error('No module with ID: ' + id);\n                }\n            }\n        } else {\n            //There is a plugin in play.\n            prefix = id.substring(0, index);\n            id = id.substring(index + 1, id.length);\n\n            plugin = stringRequire(systemRequire, exports, module, prefix, relId);\n\n            if (plugin.normalize) {\n                id = plugin.normalize(id, makeNormalize(relId));\n            } else {\n                //Normalize the ID normally.\n                id = normalize(id, relId);\n            }\n\n            if (loaderCache[id]) {\n                return loaderCache[id];\n            } else {\n                plugin.load(id, makeRequire(systemRequire, exports, module, relId), makeLoad(id), {});\n\n                return loaderCache[id];\n            }\n        }\n    };\n\n    //Create a define function specific to the module asking for amdefine.\n    function define(id, deps, factory) {\n        if (Array.isArray(id)) {\n            factory = deps;\n            deps = id;\n            id = undefined;\n        } else if (typeof id !== 'string') {\n            factory = id;\n            id = deps = undefined;\n        }\n\n        if (deps && !Array.isArray(deps)) {\n            factory = deps;\n            deps = undefined;\n        }\n\n        if (!deps) {\n            deps = ['require', 'exports', 'module'];\n        }\n\n        //Set up properties for this module. If an ID, then use\n        //internal cache. If no ID, then use the external variables\n        //for this node module.\n        if (id) {\n            //Put the module in deep freeze until there is a\n            //require call for it.\n            defineCache[id] = [id, deps, factory];\n        } else {\n            runFactory(id, deps, factory);\n        }\n    }\n\n    //define.require, which has access to all the values in the\n    //cache. Useful for AMD modules that all have IDs in the file,\n    //but need to finally export a value to node based on one of those\n    //IDs.\n    define.require = function (id) {\n        if (loaderCache[id]) {\n            return loaderCache[id];\n        }\n\n        if (defineCache[id]) {\n            runFactory.apply(null, defineCache[id]);\n            return loaderCache[id];\n        }\n    };\n\n    define.amd = {};\n\n    return define;\n}\n\nmodule.exports = amdefine;\n\n}).call(this,require(\"JkpR2F\"),\"/../node_modules/coffee-script-redux/node_modules/source-map/node_modules/amdefine/amdefine.js\")\n},{\"JkpR2F\":34,\"path\":33}],30:[function(require,module,exports){\nmodule.exports={\n  \"name\": \"coffee-script-redux\",\n  \"author\": {\n    \"name\": \"Michael Ficarra\"\n  },\n  \"version\": \"2.0.0-beta9-dev\",\n  \"homepage\": \"https://github.com/michaelficarra/CoffeeScriptRedux\",\n  \"bugs\": {\n    \"url\": \"https://github.com/michaelficarra/CoffeeScriptRedux/issues\"\n  },\n  \"description\": \"Unfancy JavaScript\",\n  \"keywords\": [\n    \"coffeescript\",\n    \"javascript\",\n    \"language\",\n    \"compiler\"\n  ],\n  \"main\": \"./lib/module\",\n  \"bin\": {\n    \"coffee\": \"./bin/coffee\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/michaelficarra/CoffeeScriptRedux.git\"\n  },\n  \"scripts\": {\n    \"build\": \"make -j build\",\n    \"test\": \"make -j test\"\n  },\n  \"devDependencies\": {\n    \"mocha\": \"~1.12.0\",\n    \"pegjs\": \"~0.8.0\",\n    \"pegjs-each-code\": \"~0.2.0\",\n    \"commonjs-everywhere\": \"~0.9.0\",\n    \"cluster\": \"~0.7.7\",\n    \"semver\": \"~2.1.0\"\n  },\n  \"dependencies\": {\n    \"StringScanner\": \"~0.0.3\",\n    \"nopt\": \"~2.1.2\",\n    \"esmangle\": \"~1.0.0\",\n    \"source-map\": \"0.1.x\",\n    \"escodegen\": \"~1.2.0\",\n    \"cscodegen\": \"git+https://github.com/michaelficarra/cscodegen.git#73fd7202ac086c26f18c9d56f025b18b3c6f5383\"\n  },\n  \"optionalDependencies\": {\n    \"esmangle\": \"~1.0.0\",\n    \"source-map\": \"0.1.x\",\n    \"escodegen\": \"~1.2.0\",\n    \"cscodegen\": \"git+https://github.com/michaelficarra/cscodegen.git#73fd7202ac086c26f18c9d56f025b18b3c6f5383\"\n  },\n  \"engines\": {\n    \"node\": \"0.8.x || 0.10.x\"\n  },\n  \"licenses\": [\n    {\n      \"type\": \"3-clause BSD\",\n      \"url\": \"https://raw.github.com/michaelficarra/CoffeeScriptRedux/master/LICENSE\"\n    }\n  ],\n  \"license\": \"3-clause BSD\",\n  \"gitHead\": \"ad91003538d0d4d4d94469df6afcc0c35f56d36c\",\n  \"readme\": \"CoffeeScript II: The Wrath of Khan\\n==================================\\n\\n```\\n          {\\n       }   }   {\\n      {   {  }  }\\n       }   }{  {\\n      {  }{  }  }             _____       __  __\\n     ( }{ }{  { )            / ____|     / _|/ _|\\n   .- { { }  { }} -.        | |     ___ | |_| |_ ___  ___\\n  (  ( } { } { } }  )       | |    / _ \\\\|  _|  _/ _ \\\\/ _ \\\\\\n  |`-..________ ..-'|       | |___| (_) | | | ||  __/  __/\\n  |                 |        \\\\_____\\\\___/|_| |_| \\\\___|\\\\___|       .-''-.\\n  |                 ;--.                                       .' .-.  )\\n  |                (__  \\\\     _____           _       _       / .'  / /\\n  |                 | )  )   / ____|         (_)     | |     (_/   / /\\n  |                 |/  /   | (___   ___ _ __ _ _ __ | |_         / /\\n  |                 (  /     \\\\___ \\\\ / __| '__| | '_ \\\\| __|       / /\\n  |                 |/       ____) | (__| |  | | |_) | |_       . '\\n  |                 |       |_____/ \\\\___|_|  |_| .__/ \\\\__|     / /    _.-')\\n   `-.._________..-'                           | |           .' '  _.'.-''\\n                                               |_|          /  /.-'_.'\\n                                                           /    _.'\\n                                                          ( _.-'\\n```\\n\\n### Status\\n\\nComplete enough to use for nearly every project. See the [roadmap to 2.0](https://github.com/michaelficarra/CoffeeScriptRedux/wiki/Roadmap).\\n\\n### Getting Started\\n\\n    npm install -g coffee-script-redux\\n    coffee --help\\n    coffee --js <input.coffee >output.js\\n\\nBefore transitioning from Jeremy's compiler, see the\\n[intentional deviations from jashkenas/coffee-script](https://github.com/michaelficarra/CoffeeScriptRedux/wiki/Intentional-Deviations-From-jashkenas-coffee-script)\\nwiki page.\\n\\n### Development\\n\\n    git clone git://github.com/michaelficarra/CoffeeScriptRedux.git && cd CoffeeScriptRedux && npm install\\n    make clean && git checkout -- lib && make -j build && make test\\n\\n### Notable Contributors\\n\\nI'd like to thank the following financial contributors for their large\\ndonations to [the Kickstarter project](https://www.kickstarter.com/projects/michaelficarra/make-a-better-coffeescript-compiler)\\nthat funded the initial work on this compiler.\\nTogether, you donated over $10,000. Without you, I wouldn't have been able to do this.\\n\\n* [Groupon](https://www.groupon.com/), who is generously allowing me to work in their offices\\n* [Trevor Burnham](http://trevorburnham.com)\\n* [Shopify](https://www.shopify.com/)\\n* [Abakas](http://abakas.com)\\n* [37signals](http://37signals.com)\\n* [Brightcove](https://www.brightcove.com/en/)\\n* [Gaslight](https://teamgaslight.com/)\\n* [Pantheon](https://pantheon.io/)\\n* Benbria\\n* Sam Stephenson\\n* Bevan Hunt\\n* Meryn Stol\\n* Rob Tsuk\\n* Dion Almaer\\n* Andrew Davey\\n* Thomas Burleson\\n* Michael Kedzierski\\n* Jeremy Kemper\\n* Kyle Cordes\\n* Jason R. Lauman\\n* Martin Drenovac (Envizion Systems - Aust)\\n* Julian Bilcke\\n* Michael Edmondson\\n\\nAnd of course, thank you [Jeremy](https://github.com/jashkenas) (and all the other\\n[contributors](https://github.com/jashkenas/coffeescript/graphs/contributors))\\nfor making [the original CoffeeScript compiler](https://github.com/jashkenas/coffeescript).\\n\",\n  \"readmeFilename\": \"README.md\",\n  \"_id\": \"coffee-script-redux@2.0.0-beta9-dev\",\n  \"_shasum\": \"737857abc3cbb842e2f95d33ffacaf783a4b46c5\",\n  \"_from\": \"git://github.com/michaelficarra/CoffeeScriptRedux.git\",\n  \"_resolved\": \"git://github.com/michaelficarra/CoffeeScriptRedux.git#ad91003538d0d4d4d94469df6afcc0c35f56d36c\"\n}\n\n},{}],31:[function(require,module,exports){\n/*\n  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>\n  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n/*jslint vars:false, bitwise:true*/\n/*jshint indent:4*/\n/*global exports:true, define:true*/\n(function (root, factory) {\n    'use strict';\n\n    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,\n    // and plain browser loading,\n    if (typeof define === 'function' && define.amd) {\n        define(['exports'], factory);\n    } else if (typeof exports !== 'undefined') {\n        factory(exports);\n    } else {\n        factory((root.estraverse = {}));\n    }\n}(this, function (exports) {\n    'use strict';\n\n    var Syntax,\n        isArray,\n        VisitorOption,\n        VisitorKeys,\n        BREAK,\n        SKIP;\n\n    Syntax = {\n        AssignmentExpression: 'AssignmentExpression',\n        ArrayExpression: 'ArrayExpression',\n        ArrayPattern: 'ArrayPattern',\n        ArrowFunctionExpression: 'ArrowFunctionExpression',\n        BlockStatement: 'BlockStatement',\n        BinaryExpression: 'BinaryExpression',\n        BreakStatement: 'BreakStatement',\n        CallExpression: 'CallExpression',\n        CatchClause: 'CatchClause',\n        ClassBody: 'ClassBody',\n        ClassDeclaration: 'ClassDeclaration',\n        ClassExpression: 'ClassExpression',\n        ConditionalExpression: 'ConditionalExpression',\n        ContinueStatement: 'ContinueStatement',\n        DebuggerStatement: 'DebuggerStatement',\n        DirectiveStatement: 'DirectiveStatement',\n        DoWhileStatement: 'DoWhileStatement',\n        EmptyStatement: 'EmptyStatement',\n        ExpressionStatement: 'ExpressionStatement',\n        ForStatement: 'ForStatement',\n        ForInStatement: 'ForInStatement',\n        FunctionDeclaration: 'FunctionDeclaration',\n        FunctionExpression: 'FunctionExpression',\n        Identifier: 'Identifier',\n        IfStatement: 'IfStatement',\n        Literal: 'Literal',\n        LabeledStatement: 'LabeledStatement',\n        LogicalExpression: 'LogicalExpression',\n        MemberExpression: 'MemberExpression',\n        MethodDefinition: 'MethodDefinition',\n        NewExpression: 'NewExpression',\n        ObjectExpression: 'ObjectExpression',\n        ObjectPattern: 'ObjectPattern',\n        Program: 'Program',\n        Property: 'Property',\n        ReturnStatement: 'ReturnStatement',\n        SequenceExpression: 'SequenceExpression',\n        SwitchStatement: 'SwitchStatement',\n        SwitchCase: 'SwitchCase',\n        ThisExpression: 'ThisExpression',\n        ThrowStatement: 'ThrowStatement',\n        TryStatement: 'TryStatement',\n        UnaryExpression: 'UnaryExpression',\n        UpdateExpression: 'UpdateExpression',\n        VariableDeclaration: 'VariableDeclaration',\n        VariableDeclarator: 'VariableDeclarator',\n        WhileStatement: 'WhileStatement',\n        WithStatement: 'WithStatement',\n        YieldExpression: 'YieldExpression'\n    };\n\n    function ignoreJSHintError() { }\n\n    isArray = Array.isArray;\n    if (!isArray) {\n        isArray = function isArray(array) {\n            return Object.prototype.toString.call(array) === '[object Array]';\n        };\n    }\n\n    function deepCopy(obj) {\n        var ret = {}, key, val;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                val = obj[key];\n                if (typeof val === 'object' && val !== null) {\n                    ret[key] = deepCopy(val);\n                } else {\n                    ret[key] = val;\n                }\n            }\n        }\n        return ret;\n    }\n\n    function shallowCopy(obj) {\n        var ret = {}, key;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                ret[key] = obj[key];\n            }\n        }\n        return ret;\n    }\n    ignoreJSHintError(shallowCopy);\n\n    // based on LLVM libc++ upper_bound / lower_bound\n    // MIT License\n\n    function upperBound(array, func) {\n        var diff, len, i, current;\n\n        len = array.length;\n        i = 0;\n\n        while (len) {\n            diff = len >>> 1;\n            current = i + diff;\n            if (func(array[current])) {\n                len = diff;\n            } else {\n                i = current + 1;\n                len -= diff + 1;\n            }\n        }\n        return i;\n    }\n\n    function lowerBound(array, func) {\n        var diff, len, i, current;\n\n        len = array.length;\n        i = 0;\n\n        while (len) {\n            diff = len >>> 1;\n            current = i + diff;\n            if (func(array[current])) {\n                i = current + 1;\n                len -= diff + 1;\n            } else {\n                len = diff;\n            }\n        }\n        return i;\n    }\n    ignoreJSHintError(lowerBound);\n\n    VisitorKeys = {\n        AssignmentExpression: ['left', 'right'],\n        ArrayExpression: ['elements'],\n        ArrayPattern: ['elements'],\n        ArrowFunctionExpression: ['params', 'defaults', 'rest', 'body'],\n        BlockStatement: ['body'],\n        BinaryExpression: ['left', 'right'],\n        BreakStatement: ['label'],\n        CallExpression: ['callee', 'arguments'],\n        CatchClause: ['param', 'body'],\n        ClassBody: ['body'],\n        ClassDeclaration: ['id', 'body', 'superClass'],\n        ClassExpression: ['id', 'body', 'superClass'],\n        ConditionalExpression: ['test', 'consequent', 'alternate'],\n        ContinueStatement: ['label'],\n        DebuggerStatement: [],\n        DirectiveStatement: [],\n        DoWhileStatement: ['body', 'test'],\n        EmptyStatement: [],\n        ExpressionStatement: ['expression'],\n        ForStatement: ['init', 'test', 'update', 'body'],\n        ForInStatement: ['left', 'right', 'body'],\n        ForOfStatement: ['left', 'right', 'body'],\n        FunctionDeclaration: ['id', 'params', 'defaults', 'rest', 'body'],\n        FunctionExpression: ['id', 'params', 'defaults', 'rest', 'body'],\n        Identifier: [],\n        IfStatement: ['test', 'consequent', 'alternate'],\n        Literal: [],\n        LabeledStatement: ['label', 'body'],\n        LogicalExpression: ['left', 'right'],\n        MemberExpression: ['object', 'property'],\n        MethodDefinition: ['key', 'value'],\n        NewExpression: ['callee', 'arguments'],\n        ObjectExpression: ['properties'],\n        ObjectPattern: ['properties'],\n        Program: ['body'],\n        Property: ['key', 'value'],\n        ReturnStatement: ['argument'],\n        SequenceExpression: ['expressions'],\n        SwitchStatement: ['discriminant', 'cases'],\n        SwitchCase: ['test', 'consequent'],\n        ThisExpression: [],\n        ThrowStatement: ['argument'],\n        TryStatement: ['block', 'handlers', 'handler', 'guardedHandlers', 'finalizer'],\n        UnaryExpression: ['argument'],\n        UpdateExpression: ['argument'],\n        VariableDeclaration: ['declarations'],\n        VariableDeclarator: ['id', 'init'],\n        WhileStatement: ['test', 'body'],\n        WithStatement: ['object', 'body'],\n        YieldExpression: ['argument']\n    };\n\n    // unique id\n    BREAK = {};\n    SKIP = {};\n\n    VisitorOption = {\n        Break: BREAK,\n        Skip: SKIP\n    };\n\n    function Reference(parent, key) {\n        this.parent = parent;\n        this.key = key;\n    }\n\n    Reference.prototype.replace = function replace(node) {\n        this.parent[this.key] = node;\n    };\n\n    function Element(node, path, wrap, ref) {\n        this.node = node;\n        this.path = path;\n        this.wrap = wrap;\n        this.ref = ref;\n    }\n\n    function Controller() { }\n\n    // API:\n    // return property path array from root to current node\n    Controller.prototype.path = function path() {\n        var i, iz, j, jz, result, element;\n\n        function addToPath(result, path) {\n            if (isArray(path)) {\n                for (j = 0, jz = path.length; j < jz; ++j) {\n                    result.push(path[j]);\n                }\n            } else {\n                result.push(path);\n            }\n        }\n\n        // root node\n        if (!this.__current.path) {\n            return null;\n        }\n\n        // first node is sentinel, second node is root element\n        result = [];\n        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {\n            element = this.__leavelist[i];\n            addToPath(result, element.path);\n        }\n        addToPath(result, this.__current.path);\n        return result;\n    };\n\n    // API:\n    // return array of parent elements\n    Controller.prototype.parents = function parents() {\n        var i, iz, result;\n\n        // first node is sentinel\n        result = [];\n        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {\n            result.push(this.__leavelist[i].node);\n        }\n\n        return result;\n    };\n\n    // API:\n    // return current node\n    Controller.prototype.current = function current() {\n        return this.__current.node;\n    };\n\n    Controller.prototype.__execute = function __execute(callback, element) {\n        var previous, result;\n\n        result = undefined;\n\n        previous  = this.__current;\n        this.__current = element;\n        this.__state = null;\n        if (callback) {\n            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);\n        }\n        this.__current = previous;\n\n        return result;\n    };\n\n    // API:\n    // notify control skip / break\n    Controller.prototype.notify = function notify(flag) {\n        this.__state = flag;\n    };\n\n    // API:\n    // skip child nodes of current node\n    Controller.prototype.skip = function () {\n        this.notify(SKIP);\n    };\n\n    // API:\n    // break traversals\n    Controller.prototype['break'] = function () {\n        this.notify(BREAK);\n    };\n\n    Controller.prototype.__initialize = function(root, visitor) {\n        this.visitor = visitor;\n        this.root = root;\n        this.__worklist = [];\n        this.__leavelist = [];\n        this.__current = null;\n        this.__state = null;\n    };\n\n    Controller.prototype.traverse = function traverse(root, visitor) {\n        var worklist,\n            leavelist,\n            element,\n            node,\n            nodeType,\n            ret,\n            key,\n            current,\n            current2,\n            candidates,\n            candidate,\n            sentinel;\n\n        this.__initialize(root, visitor);\n\n        sentinel = {};\n\n        // reference\n        worklist = this.__worklist;\n        leavelist = this.__leavelist;\n\n        // initialize\n        worklist.push(new Element(root, null, null, null));\n        leavelist.push(new Element(null, null, null, null));\n\n        while (worklist.length) {\n            element = worklist.pop();\n\n            if (element === sentinel) {\n                element = leavelist.pop();\n\n                ret = this.__execute(visitor.leave, element);\n\n                if (this.__state === BREAK || ret === BREAK) {\n                    return;\n                }\n                continue;\n            }\n\n            if (element.node) {\n\n                ret = this.__execute(visitor.enter, element);\n\n                if (this.__state === BREAK || ret === BREAK) {\n                    return;\n                }\n\n                worklist.push(sentinel);\n                leavelist.push(element);\n\n                if (this.__state === SKIP || ret === SKIP) {\n                    continue;\n                }\n\n                node = element.node;\n                nodeType = element.wrap || node.type;\n                candidates = VisitorKeys[nodeType];\n\n                current = candidates.length;\n                while ((current -= 1) >= 0) {\n                    key = candidates[current];\n                    candidate = node[key];\n                    if (!candidate) {\n                        continue;\n                    }\n\n                    if (!isArray(candidate)) {\n                        worklist.push(new Element(candidate, key, null, null));\n                        continue;\n                    }\n\n                    current2 = candidate.length;\n                    while ((current2 -= 1) >= 0) {\n                        if (!candidate[current2]) {\n                            continue;\n                        }\n                        if ((nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === candidates[current]) {\n                            element = new Element(candidate[current2], [key, current2], 'Property', null);\n                        } else {\n                            element = new Element(candidate[current2], [key, current2], null, null);\n                        }\n                        worklist.push(element);\n                    }\n                }\n            }\n        }\n    };\n\n    Controller.prototype.replace = function replace(root, visitor) {\n        var worklist,\n            leavelist,\n            node,\n            nodeType,\n            target,\n            element,\n            current,\n            current2,\n            candidates,\n            candidate,\n            sentinel,\n            outer,\n            key;\n\n        this.__initialize(root, visitor);\n\n        sentinel = {};\n\n        // reference\n        worklist = this.__worklist;\n        leavelist = this.__leavelist;\n\n        // initialize\n        outer = {\n            root: root\n        };\n        element = new Element(root, null, null, new Reference(outer, 'root'));\n        worklist.push(element);\n        leavelist.push(element);\n\n        while (worklist.length) {\n            element = worklist.pop();\n\n            if (element === sentinel) {\n                element = leavelist.pop();\n\n                target = this.__execute(visitor.leave, element);\n\n                // node may be replaced with null,\n                // so distinguish between undefined and null in this place\n                if (target !== undefined && target !== BREAK && target !== SKIP) {\n                    // replace\n                    element.ref.replace(target);\n                }\n\n                if (this.__state === BREAK || target === BREAK) {\n                    return outer.root;\n                }\n                continue;\n            }\n\n            target = this.__execute(visitor.enter, element);\n\n            // node may be replaced with null,\n            // so distinguish between undefined and null in this place\n            if (target !== undefined && target !== BREAK && target !== SKIP) {\n                // replace\n                element.ref.replace(target);\n                element.node = target;\n            }\n\n            if (this.__state === BREAK || target === BREAK) {\n                return outer.root;\n            }\n\n            // node may be null\n            node = element.node;\n            if (!node) {\n                continue;\n            }\n\n            worklist.push(sentinel);\n            leavelist.push(element);\n\n            if (this.__state === SKIP || target === SKIP) {\n                continue;\n            }\n\n            nodeType = element.wrap || node.type;\n            candidates = VisitorKeys[nodeType];\n\n            current = candidates.length;\n            while ((current -= 1) >= 0) {\n                key = candidates[current];\n                candidate = node[key];\n                if (!candidate) {\n                    continue;\n                }\n\n                if (!isArray(candidate)) {\n                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));\n                    continue;\n                }\n\n                current2 = candidate.length;\n                while ((current2 -= 1) >= 0) {\n                    if (!candidate[current2]) {\n                        continue;\n                    }\n                    if (nodeType === Syntax.ObjectExpression && 'properties' === candidates[current]) {\n                        element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));\n                    } else {\n                        element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));\n                    }\n                    worklist.push(element);\n                }\n            }\n        }\n\n        return outer.root;\n    };\n\n    function traverse(root, visitor) {\n        var controller = new Controller();\n        return controller.traverse(root, visitor);\n    }\n\n    function replace(root, visitor) {\n        var controller = new Controller();\n        return controller.replace(root, visitor);\n    }\n\n    function extendCommentRange(comment, tokens) {\n        var target;\n\n        target = upperBound(tokens, function search(token) {\n            return token.range[0] > comment.range[0];\n        });\n\n        comment.extendedRange = [comment.range[0], comment.range[1]];\n\n        if (target !== tokens.length) {\n            comment.extendedRange[1] = tokens[target].range[0];\n        }\n\n        target -= 1;\n        if (target >= 0) {\n            comment.extendedRange[0] = tokens[target].range[1];\n        }\n\n        return comment;\n    }\n\n    function attachComments(tree, providedComments, tokens) {\n        // At first, we should calculate extended comment ranges.\n        var comments = [], comment, len, i, cursor;\n\n        if (!tree.range) {\n            throw new Error('attachComments needs range information');\n        }\n\n        // tokens array is empty, we attach comments to tree as 'leadingComments'\n        if (!tokens.length) {\n            if (providedComments.length) {\n                for (i = 0, len = providedComments.length; i < len; i += 1) {\n                    comment = deepCopy(providedComments[i]);\n                    comment.extendedRange = [0, tree.range[0]];\n                    comments.push(comment);\n                }\n                tree.leadingComments = comments;\n            }\n            return tree;\n        }\n\n        for (i = 0, len = providedComments.length; i < len; i += 1) {\n            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));\n        }\n\n        // This is based on John Freeman's implementation.\n        cursor = 0;\n        traverse(tree, {\n            enter: function (node) {\n                var comment;\n\n                while (cursor < comments.length) {\n                    comment = comments[cursor];\n                    if (comment.extendedRange[1] > node.range[0]) {\n                        break;\n                    }\n\n                    if (comment.extendedRange[1] === node.range[0]) {\n                        if (!node.leadingComments) {\n                            node.leadingComments = [];\n                        }\n                        node.leadingComments.push(comment);\n                        comments.splice(cursor, 1);\n                    } else {\n                        cursor += 1;\n                    }\n                }\n\n                // already out of owned node\n                if (cursor === comments.length) {\n                    return VisitorOption.Break;\n                }\n\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\n                    return VisitorOption.Skip;\n                }\n            }\n        });\n\n        cursor = 0;\n        traverse(tree, {\n            leave: function (node) {\n                var comment;\n\n                while (cursor < comments.length) {\n                    comment = comments[cursor];\n                    if (node.range[1] < comment.extendedRange[0]) {\n                        break;\n                    }\n\n                    if (node.range[1] === comment.extendedRange[0]) {\n                        if (!node.trailingComments) {\n                            node.trailingComments = [];\n                        }\n                        node.trailingComments.push(comment);\n                        comments.splice(cursor, 1);\n                    } else {\n                        cursor += 1;\n                    }\n                }\n\n                // already out of owned node\n                if (cursor === comments.length) {\n                    return VisitorOption.Break;\n                }\n\n                if (comments[cursor].extendedRange[0] > node.range[1]) {\n                    return VisitorOption.Skip;\n                }\n            }\n        });\n\n        return tree;\n    }\n\n    exports.version = '1.5.1-dev';\n    exports.Syntax = Syntax;\n    exports.traverse = traverse;\n    exports.replace = replace;\n    exports.attachComments = attachComments;\n    exports.VisitorKeys = VisitorKeys;\n    exports.VisitorOption = VisitorOption;\n    exports.Controller = Controller;\n}));\n/* vim: set sw=4 ts=4 et tw=80 : */\n\n},{}],32:[function(require,module,exports){\n\n},{}],33:[function(require,module,exports){\n(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n}).call(this,require(\"JkpR2F\"))\n},{\"JkpR2F\":34}],34:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\n\nprocess.nextTick = (function () {\n    var canSetImmediate = typeof window !== 'undefined'\n    && window.setImmediate;\n    var canPost = typeof window !== 'undefined'\n    && window.postMessage && window.addEventListener\n    ;\n\n    if (canSetImmediate) {\n        return function (f) { return window.setImmediate(f) };\n    }\n\n    if (canPost) {\n        var queue = [];\n        window.addEventListener('message', function (ev) {\n            var source = ev.source;\n            if ((source === window || source === null) && ev.data === 'process-tick') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n\n        return function nextTick(fn) {\n            queue.push(fn);\n            window.postMessage('process-tick', '*');\n        };\n    }\n\n    return function nextTick(fn) {\n        setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n}\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\n\n},{}],35:[function(require,module,exports){\nwindow.aetherCoffeeScriptRedux = require('coffee-script-redux');\n\n},{\"coffee-script-redux\":5}]},{},[35]);"]}