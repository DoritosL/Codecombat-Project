{"version":3,"sources":["app/lib/scripts/PlaybackScriptModule.coffee"],"names":[],"mappings":";AAAA;EAAA;;;AAAA,eAAe,QAAQ,gBAAR;;AAEf,MAAM,CAAC,OAAP,GAAuB;;;;;;;EACrB,oBAAC,UAAD,GAAY,SAAC,SAAD;AACV,WAAO;EADG;;iCAGZ,aAAY;AACV;IAAA,QAAQ;IACR,IAA8B,uCAA9B;MAAA,KAAK,CAAC,IAAN,CAAW,IAAC,YAAD,EAAX;;IACA,IAA4B,qCAA5B;MAAA,KAAK,CAAC,IAAN,CAAW,IAAC,UAAD,EAAX;;AACA,WAAO;EAJG;;iCAMZ,WAAU;AACR;IAAA,QAAQ;AAIR,WAAO;EALC;;iCAOV,YAAW;AACT;IAAA,QAAQ;IACR,IAA8B,uCAA9B;MAAA,KAAK,CAAC,IAAN,CAAW,IAAC,YAAD,EAAX;;IACA,IAAgC,qCAAhC;MAAA,KAAK,CAAC,IAAN,CAAW,IAAC,UAAD,CAAW,IAAX,CAAX;;AACA,WAAO;EAJE;;iCAMX,cAAa;AACX;IAAA,OACE;MAAA,SAAS,mBAAT;MACA,OAAO;QAAC,SAAS,IAAC,UAAS,CAAC,QAAQ,CAAC,OAA9B;OADP;;AAEF,WAAO;EAJI;;iCAMb,YAAW,SAAC,OAAD;AACT;;MADU,UAAQ;;IAClB,QAAQ,IAAC,UAAS,CAAC,QAAQ,CAAC;IAC5B,OACE;MAAA,SAAS,gBAAT;MACA,OACE;QAAA,aAAa,KAAK,CAAC,WAAN,IAAqB,CAAlC;QACA,eAAkB,OAAH,GAAgB,CAAhB,GAAuB,KAAK,CAAC,QAD5C;OAFF;;IAIF,IAAkC,oBAAlC;MAAA,IAAI,CAAC,KAAK,CAAC,IAAX,GAAkB,KAAK,CAAC,OAAxB;;IACA,IAAoC,qBAApC;MAAA,IAAI,CAAC,KAAK,CAAC,KAAX,GAAmB,KAAK,CAAC,QAAzB;;AACA,WAAO;EATE;;;;GA7BuC","file":"public/javascripts/app/lib/scripts/PlaybackScriptModule.js","sourcesContent":["ScriptModule = require './ScriptModule'\n\nmodule.exports = class PlaybackScriptModule extends ScriptModule\n  @neededFor: (noteGroup) ->\n    return noteGroup.playback?\n\n  startNotes: ->\n    notes = []\n    notes.push(@playingNote()) if @noteGroup.playback.playing?\n    notes.push(@scrubNote()) if @noteGroup.playback.scrub?\n    return notes\n\n  endNotes: ->\n    notes = []\n    # TODO: Want scripts to end where the scrub should go, but this doesn't work\n    # when scripts go somewhere then do something else. Figure out a different technique?\n#    notes.push(@scrubNote(true)) if @noteGroup.playback.scrub?\n    return notes\n\n  skipNotes: ->\n    notes = []\n    notes.push(@playingNote()) if @noteGroup.playback.playing?\n    notes.push(@scrubNote(true)) if @noteGroup.playback.scrub?\n    return notes\n\n  playingNote: ->\n    note =\n      channel: 'level:set-playing'\n      event: {playing: @noteGroup.playback.playing}\n    return note\n\n  scrubNote: (instant=false) ->\n    scrub = @noteGroup.playback.scrub\n    note =\n      channel: 'level:set-time'\n      event:\n        frameOffset: scrub.frameOffset or 2\n        scrubDuration: if instant then 0 else scrub.duration\n    note.event.time = scrub.toTime if scrub.toTime?\n    note.event.ratio = scrub.toRatio if scrub.toRatio?\n    return note\n"]}