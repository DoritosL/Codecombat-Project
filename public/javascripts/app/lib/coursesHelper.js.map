{"version":3,"sources":["app/lib/coursesHelper.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/lib/coursesHelper.js","sourcesContent":["Levels = require 'collections/Levels'\n\nmodule.exports =\n  # Result: Each course instance gains a property, numCompleted, that is the\n  #   number of students in that course instance who have completed ALL of\n  #   the levels in thate course\n  # TODO: simplify, classroom.sessions only includes sessions for assigned courses now\n  calculateDots: (classrooms, courses, courseInstances) ->\n    for classroom in classrooms.models\n      # map [user, level] => session so we don't have to do find TODO\n      for course, courseIndex in courses.models\n        instance = courseInstances.findWhere({ courseID: course.id, classroomID: classroom.id })\n        continue if not instance\n        instance.numCompleted = 0\n        instance.started = false\n        levels = classroom.getLevels({courseID: course.id})\n        levels.remove(levels.filter((level) => level.get('practice')))\n        for userID in instance.get('members')\n          instance.started ||= _.any levels.models, (level) ->\n            session = _.find classroom.sessions.models, (session) ->\n              session.get('creator') is userID and session.get('level').original is level.get('original')\n            session?\n          levelCompletes = _.map levels.models, (level) ->\n            #TODO: Hella slow! Do the mapping first!\n            sessions = _.filter classroom.sessions.models, (session) ->\n              session.get('creator') is userID and session.get('level').original is level.get('original')\n            # sessionMap[userID][level].completed()\n            _.find(sessions, (s) -> s.completed())\n          if _.every levelCompletes\n            instance.numCompleted += 1\n\n  calculateEarliestIncomplete: (classroom, courses, courseInstances, students) ->\n    # Loop through all the combinations of things, return the first one that somebody hasn't finished\n    for course, courseIndex in courses.models\n      instance = courseInstances.findWhere({ courseID: course.id, classroomID: classroom.id })\n      continue if not instance\n      levels = classroom.getLevels({courseID: course.id})\n      for level, levelIndex in levels.models\n        userIDs = []\n        for user in students.models\n          userID = user.id\n          sessions = _.filter classroom.sessions.models, (session) ->\n            session.get('creator') is userID and session.get('level').original is level.get('original')\n          if not _.find(sessions, (s) -> s.completed())\n            userIDs.push userID\n        if userIDs.length > 0\n          users = _.map userIDs, (id) ->\n            students.get(id)\n          levelNumber = classroom.getLevelNumber(level.get('original'), levelIndex + 1)\n          return {\n            courseName: course.get('name')\n            courseNumber: courseIndex + 1\n            levelNumber\n            levelName: level.get('name')\n            users: users\n          }\n    null\n\n  calculateLatestComplete: (classroom, courses, courseInstances, students) ->\n    # Loop through all the combinations of things in reverse order, return the level that anyone's finished\n    courseModels = courses.models.slice()\n    for course, courseIndex in courseModels.reverse() #\n      courseIndex = courses.models.length - courseIndex - 1 #compensate for reverse\n      instance = courseInstances.findWhere({ courseID: course.id, classroomID: classroom.id })\n      continue if not instance\n      levels = classroom.getLevels({courseID: course.id})\n      levelModels = levels.models.slice()\n      for level, levelIndex in levelModels.reverse() #\n        levelIndex = levelModels.length - levelIndex - 1 #compensate for reverse\n        userIDs = []\n        for user in students.models\n          userID = user.id\n          sessions = _.filter classroom.sessions.models, (session) ->\n            session.get('creator') is userID and session.get('level').original is level.get('original')\n          if _.find(sessions, (s) -> s.completed()) #\n            userIDs.push userID\n        if userIDs.length > 0\n          users = _.map userIDs, (id) ->\n            students.get(id)\n          levelNumber = classroom.getLevelNumber(level.get('original'), levelIndex + 1)\n          return {\n            courseName: course.get('name')\n            courseNumber: courseIndex + 1\n            levelNumber\n            levelName: level.get('name')\n            users: users\n          }\n    null\n    \n  calculateConceptsCovered: (classrooms, courses, campaigns, courseInstances, students) ->\n    # Loop through all level/user combination and record\n    #   whether they've started, and completed, each concept\n    conceptData = {}\n    for classroom in classrooms.models\n      conceptData[classroom.id] = {}\n      \n      for course, courseIndex in courses.models\n        levels = classroom.getLevels({courseID: course.id})\n        \n        for level in levels.models\n          levelID = level.get('original')\n          \n          for concept in level.get('concepts')\n            unless conceptData[classroom.id][concept]\n              conceptData[classroom.id][concept] = { completed: true, started: false }\n\n          for concept in level.get('concepts')\n            for userID in classroom.get('members')\n              sessions = _.filter classroom.sessions.models, (session) ->\n                session.get('creator') is userID and session.get('level').original is levelID\n              \n              if _.size(sessions) is 0 # haven't gotten to this level yet, but might have completed others before\n                for concept in level.get('concepts')\n                  conceptData[classroom.id][concept].completed = false\n              if _.size(sessions) > 0 # have gotten to the level and at least started it\n                for concept in level.get('concepts')\n                  conceptData[classroom.id][concept].started = true\n              if not _.find(sessions, (s) -> s.completed()) # level started but not completed\n                for concept in level.get('concepts')\n                  conceptData[classroom.id][concept].completed = false\n    conceptData\n      \n  calculateAllProgress: (classrooms, courses, courseInstances, students) ->\n    # Loop through all combinations and record:\n    #   Completeness for each student/course\n    #   Completeness for each student/level\n    #   Completeness for each class/course (across all students)\n    #   Completeness for each class/level (across all students)\n    \n    # class -> course\n    #   class -> course -> student\n    #   class -> course -> level\n    #     class -> course -> level -> student\n    \n    progressData = {}\n    for classroom in classrooms.models\n      progressData[classroom.id] = {}\n\n      for course, courseIndex in courses.models\n        instance = courseInstances.findWhere({ courseID: course.id, classroomID: classroom.id })\n        if not instance\n          progressData[classroom.id][course.id] = { completed: false, started: false }\n          continue\n        progressData[classroom.id][course.id] = { completed: true, started: false } # to be updated\n\n        levels = classroom.getLevels({courseID: course.id})\n        for level in levels.models\n          levelID = level.get('original')\n          progressData[classroom.id][course.id][levelID] = {\n            completed: students.size() > 0,\n            started: false\n            numStarted: 0\n            # numCompleted: 0\n          }\n          isPractice = level.get('practice')\n\n          for user in students.models\n            userID = user.id\n            courseProgress = progressData[classroom.id][course.id]\n            courseProgress[userID] ?= { completed: true, started: false, levelsCompleted: 0 } # Only set it the first time through a user\n            courseProgress[levelID][userID] = { completed: true, started: false } # These don't matter, will always be set\n            sessions = _.filter classroom.sessions.models, (session) ->\n              session.get('creator') is userID and session.get('level').original is levelID\n            \n            courseProgress[levelID][userID].session = _.find(sessions, (s) -> s.completed()) or _.first(sessions)\n\n            if _.size(sessions) is 0 # haven't gotten to this level yet, but might have completed others before\n              courseProgress.started ||= false unless isPractice #no-op\n              courseProgress.completed = false unless isPractice\n              courseProgress[userID].started ||= false unless isPractice #no-op\n              courseProgress[userID].completed = false unless isPractice\n              courseProgress[levelID].started ||= false #no-op\n              courseProgress[levelID].completed = false unless isPractice \n              courseProgress[levelID][userID].started = false\n              courseProgress[levelID][userID].completed = false\n              \n            if _.size(sessions) > 0 # have gotten to the level and at least started it\n              courseProgress.started = true unless isPractice\n              courseProgress[userID].started = true unless isPractice\n              courseProgress[levelID].started = true\n              courseProgress[levelID][userID].started = true\n              courseProgress[levelID][userID].lastPlayed = new Date(Math.max(_.map(sessions, 'changed')))\n              courseProgress[levelID].numStarted += 1\n            \n            if _.find(sessions, (s) -> s.completed()) # have finished this level\n              courseProgress.completed &&= true unless isPractice #no-op\n              courseProgress[userID].completed &&= true unless isPractice #no-op\n              courseProgress[userID].levelsCompleted += 1 unless isPractice\n              courseProgress[levelID].completed &&= true #no-op\n              # courseProgress[levelID].numCompleted += 1\n              courseProgress[levelID][userID].completed = true\n              dates = (s.get('dateFirstCompleted') || s.get('changed') for s in sessions)\n              courseProgress[levelID][userID].dateFirstCompleted = new Date(Math.max(dates...))\n            else # level started but not completed\n              courseProgress.completed = false unless isPractice\n              courseProgress[userID].completed = false unless isPractice\n              if isPractice\n                # Weird behavior! Since practice levels are optional, the level is considered 'incomplete'\n                # for the class as a whole only if any started-but-not-completed sessions exist\n                courseProgress[levelID].completed = false if courseProgress[levelID][userID].started\n              else\n                courseProgress[levelID].completed = false\n              courseProgress[levelID][userID].completed = false\n              courseProgress[levelID].dateFirstCompleted = null\n              courseProgress[levelID][userID].dateFirstCompleted = null\n              \n          if isPractice and courseProgress and not courseProgress[levelID].started\n            courseProgress[levelID].completed = false # edge for practice levels, not considered complete if never started either\n\n    _.assign(progressData, progressMixin)\n    return progressData\n  \n  courseLabelsArray: (courses) ->\n    labels = []\n    courseLabelIndexes = CS: 0, GD: 0, WD: 0\n    for course in courses\n      acronym = switch\n        when /game-dev/.test(course.get('slug')) then 'GD'\n        when /web-dev/.test(course.get('slug')) then 'WD'\n        else 'CS'\n      labels.push acronym + ++courseLabelIndexes[acronym]\n    labels\n\nprogressMixin =\n  get: (options={}) ->\n    { classroom, course, level, user } = options\n    throw new Error \"You must provide a classroom\" unless classroom\n    throw new Error \"You must provide a course\" unless course\n    defaultValue = { completed: false, started: false }\n    if options.level\n      levelID = level.get('original')\n      if options.user\n        return @[classroom.id]?[course.id]?[levelID]?[user.id] or defaultValue\n      else\n        return @[classroom.id]?[course.id]?[levelID] or defaultValue\n    else\n      if options.user\n        return @[classroom.id]?[course.id]?[user.id] or defaultValue\n      else\n        return @[classroom.id]?[course.id] or defaultValue\n"]}