{"version":3,"sources":["app/lib/surface/LankBoss.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/lib/surface/LankBoss.js","sourcesContent":["CocoClass = require 'core/CocoClass'\n{me} = require 'core/auth'\nLayerAdapter = require './LayerAdapter'\nFlagLank = require 'lib/surface/FlagLank'\nLank = require 'lib/surface/Lank'\nMark = require './Mark'\nGrid = require 'lib/world/Grid'\nutils = require 'core/utils'\n\nmodule.exports = class LankBoss extends CocoClass\n  subscriptions:\n    'level:set-debug': 'onSetDebug'\n    'sprite:highlight-sprites': 'onHighlightSprites'\n    'surface:stage-mouse-down': 'onStageMouseDown'\n    'level:select-sprite': 'onSelectSprite'\n    'level:suppress-selection-sounds': 'onSuppressSelectionSounds'\n    'level:lock-select': 'onSetLockSelect'\n    'level:restarted': 'onLevelRestarted'\n    'god:new-world-created': 'onNewWorld'\n    'god:streaming-world-updated': 'onNewWorld'\n    'camera:dragged': 'onCameraDragged'\n    'sprite:loaded': -> @update(true)\n    'level:flag-color-selected': 'onFlagColorSelected'\n    'level:flag-updated': 'onFlagUpdated'\n    'surface:flag-appeared': 'onFlagAppeared'\n    'surface:remove-selected-flag': 'onRemoveSelectedFlag'\n\n  constructor: (@options={}) ->\n    super()\n    @handleEvents = @options.handleEvents\n    @gameUIState = @options.gameUIState\n    @dragged = 0\n    @camera = @options.camera\n    @webGLStage = @options.webGLStage\n    @surfaceTextLayer = @options.surfaceTextLayer\n    @world = @options.world\n    @options.thangTypes ?= []\n    @lanks = {}\n    @lankArray = []  # Mirror @lanks, but faster for when we just need to iterate\n    @createLayers()\n    @pendingFlags = []\n    if not @handleEvents\n      @listenTo @gameUIState, 'change:selected', @onChangeSelected\n\n  destroy: ->\n    @removeLank lank for thangID, lank of @lanks\n    @targetMark?.destroy()\n    @selectionMark?.destroy()\n    lankLayer.destroy() for lankLayer in _.values @layerAdapters\n    super()\n\n  toString: -> \"<LankBoss: #{@lankArray.length} lanks>\"\n\n  thangTypeFor: (type) ->\n    _.find @options.thangTypes, (m) -> m.get('original') is type or m.get('name') is type\n\n  createLayers: ->\n    @layerAdapters = {}\n    for [name, priority] in [\n      ['Land', -40]\n      ['Ground', -30]\n      ['Obstacle', -20]\n      ['Path', -10]\n      ['Default', 0]\n      ['Floating', 10]\n    ]\n      @layerAdapters[name] = new LayerAdapter name: name, webGL: true, layerPriority: priority, transform: LayerAdapter.TRANSFORM_SURFACE, camera: @camera\n    @webGLStage.addChild (lankLayer.container for lankLayer in _.values(@layerAdapters))...\n\n  layerForChild: (child, lank) ->\n    unless child.layerPriority?\n      if thang = lank?.thang\n        child.layerPriority = thang.layerPriority\n        child.layerPriority ?= 0 if thang.isSelectable\n        child.layerPriority ?= -40 if thang.isLand\n    child.layerPriority ?= 0\n    return @layerAdapters['Default'] unless child.layerPriority\n    layer = _.findLast @layerAdapters, (layer, name) ->\n      layer.layerPriority <= child.layerPriority\n    layer ?= @layerAdapters['Land'] if child.layerPriority < -40\n    layer ? @layerAdapters['Default']\n\n  addLank: (lank, id=null, layer=null) ->\n    id ?= lank.thang.id\n    console.error 'Lank collision! Already have:', id if @lanks[id]\n    @lanks[id] = lank\n    @lankArray.push lank\n    layer ?= @layerAdapters['Obstacle'] if lank.thang?.spriteName.search(/(dungeon|indoor|ice|classroom|vr).wall/i) isnt -1\n    layer ?= @layerForChild lank.sprite, lank\n    layer.addLank lank\n    layer.updateLayerOrder()\n    lank\n\n  createMarks: ->\n    @targetMark = new Mark name: 'target', camera: @camera, layer: @layerAdapters['Ground'], thangType: 'target'\n    @selectionMark = new Mark name: 'selection', camera: @camera, layer: @layerAdapters['Ground'], thangType: 'selection'\n\n  createLankOptions: (options) ->\n    _.extend options, {\n      @camera\n      resolutionFactor: SPRITE_RESOLUTION_FACTOR\n      groundLayer: @layerAdapters['Ground']\n      textLayer: @surfaceTextLayer\n      floatingLayer: @layerAdapters['Floating']\n      showInvisible: @options.showInvisible\n      @gameUIState\n      @handleEvents\n    }\n\n  onSetDebug: (e) ->\n    return if e.debug is @debug\n    @debug = e.debug\n    lank.setDebug @debug for lank in @lankArray\n\n  onHighlightSprites: (e) ->\n    highlightedIDs = e.thangIDs or []\n    for thangID, lank of @lanks\n      lank.setHighlight? thangID in highlightedIDs, e.delay\n\n  addThangToLanks: (thang, layer=null) ->\n    return console.warn 'Tried to add Thang to the surface it already has:', thang.id if @lanks[thang.id]\n    thangType = _.find @options.thangTypes, (m) ->\n      return false unless m.get('actions') or m.get('raster')\n      return m.get('name') is thang.spriteName\n    thangType ?= _.find @options.thangTypes, (m) -> return m.get('name') is thang.spriteName\n    return console.error \"Couldn't find ThangType for\", thang unless thangType\n\n    options = @createLankOptions thang: thang\n    options.resolutionFactor = if thangType.get('kind') is 'Floor' then 2 else SPRITE_RESOLUTION_FACTOR\n    if @options.playerNames and /Hero Placeholder/.test thang.id\n      options.playerName = @options.playerNames[thang.team]\n    lank = new Lank thangType, options\n    @listenTo lank, 'sprite:mouse-up', @onLankMouseUp\n    @addLank lank, null, layer\n    lank.setDebug @debug\n    lank\n\n  removeLank: (lank) ->\n    lank.layer.removeLank(lank)\n    thang = lank.thang\n    delete @lanks[lank.thang.id]\n    @lankArray.splice @lankArray.indexOf(lank), 1\n    @stopListening lank\n    lank.destroy()\n    lank.thang = thang  # Keep around so that we know which thang the destroyed thang was for\n\n  updateSounds: ->\n    lank.playSounds() for lank in @lankArray  # hmm; doesn't work for lanks which we didn't add yet in adjustLankExistence\n\n  update: (frameChanged) ->\n    @adjustLankExistence() if frameChanged\n    lank.update frameChanged for lank in @lankArray\n    @updateSelection()\n    @layerAdapters['Default'].updateLayerOrder()\n    @cacheObstacles()\n\n  adjustLankExistence: ->\n    # Add anything new, remove anything old, update everything current\n    updatedObstacles = []\n    itemsJustEquipped = []\n    for thang in @world.thangs when thang.exists and thang.pos\n      itemsJustEquipped = itemsJustEquipped.concat @equipNewItems thang if thang.equip\n      if lank = @lanks[thang.id]\n        lank.setThang thang  # make sure Lank has latest Thang\n      else\n        lank = @addThangToLanks(thang)\n        Backbone.Mediator.publish 'surface:new-thang-added', thang: thang, sprite: lank\n        updatedObstacles.push lank if lank.sprite.parent is @layerAdapters['Obstacle']\n        lank.playSounds()\n    item.modifyStats() for item in itemsJustEquipped\n    for thangID, lank of @lanks\n      missing = not (lank.notOfThisWorld or @world.thangMap[thangID]?.exists)\n      isObstacle = lank.sprite.parent is @layerAdapters['Obstacle']\n      updatedObstacles.push lank if isObstacle and (missing or lank.hasMoved)\n      lank.hasMoved = false\n      @removeLank lank if missing\n    @cacheObstacles updatedObstacles if updatedObstacles.length and @cachedObstacles\n\n    # mainly for handling selecting thangs from session when the thang is not always in existence\n    if @willSelectThang and @lanks[@willSelectThang[0]]\n      @selectThang @willSelectThang...\n\n    @updateScreenReader()\n\n  updateScreenReader: ->\n    # Testing ASCII map for screen readers\n    return unless me.get('name') is 'zersiax'  #in ['zersiax', 'Nick']\n    ascii = $('#ascii-surface')\n    thangs = (lank.thang for lank in @lankArray)\n    grid = new Grid thangs, @world.width, @world.height, 0, 0, 0, true\n    utils.replaceText ascii, grid.toString true\n    ascii.css 'transform', 'initial'\n    fullWidth = ascii.innerWidth()\n    fullHeight = ascii.innerHeight()\n    availableWidth = ascii.parent().innerWidth()\n    availableHeight = ascii.parent().innerHeight()\n    scale = availableWidth / fullWidth\n    scale = Math.min scale, availableHeight / fullHeight\n    ascii.css 'transform', \"scale(#{scale})\"\n\n  equipNewItems: (thang) ->\n    itemsJustEquipped = []\n    if thang.equip and not thang.equipped\n      thang.equip()  # Pretty hacky, but needed since initialize may not be called if we're not running Systems.\n      itemsJustEquipped.push thang\n    if thang.inventoryIDs\n      # Even hackier: these items were only created/equipped during simulation, so we reequip here.\n      for slot, itemID of thang.inventoryIDs\n        item = @world.getThangByID itemID\n        unless item.equipped\n          console.log thang.id, 'equipping', item, 'in', thang.slot, 'Surface-side, but it cannot equip?' unless item.equip\n          item.equip?()\n          itemsJustEquipped.push item if item.equip\n    return itemsJustEquipped\n\n  cacheObstacles: (updatedObstacles=null) ->\n    return if @cachedObstacles and not updatedObstacles\n    lankArray = @lankArray\n    wallLanks = (lank for lank in lankArray when lank.thangType?.get('name').search(/(dungeon|indoor|ice|classroom|vr).wall/i) isnt -1)\n    return if _.any (s.stillLoading for s in wallLanks)\n    walls = (lank.thang for lank in wallLanks)\n    @world.calculateBounds()\n    wallGrid = new Grid walls, @world.width, @world.height\n    if updatedObstacles\n      possiblyUpdatedWallLanks = (lank for lank in wallLanks when _.find updatedObstacles, (w2) -> lank is w2 or (Math.abs(lank.thang.pos.x - w2.thang.pos.x) + Math.abs(lank.thang.pos.y - w2.thang.pos.y)) <= 16)\n    else\n      possiblyUpdatedWallLanks = wallLanks\n#    console.log 'updating up to', possiblyUpdatedWallLanks.length, 'of', wallLanks.length, 'wall lanks from updatedObstacles', updatedObstacles\n    for wallLank in possiblyUpdatedWallLanks\n      wallLank.queueAction 'idle' if not wallLank.currentRootAction\n      wallLank.lockAction(false)\n      wallLank.updateActionDirection wallGrid\n      wallLank.lockAction(true)\n      wallLank.updateScale()\n      wallLank.updatePosition()\n#    console.log wallGrid.toString()\n    @cachedObstacles = true\n\n  lankFor: (thangID) -> @lanks[thangID]\n\n  onNewWorld: (e) ->\n    @world = @options.world = e.world\n    # Clear obstacle cache for this level, since we are spawning walls dynamically\n    @cachedObstacles = false if e.finished and /kithgard-mastery/.test window.location.href\n\n  play: ->\n    lank.play() for lank in @lankArray\n    @selectionMark?.play()\n    @targetMark?.play()\n\n  stop: ->\n    lank.stop() for lank in @lankArray\n    @selectionMark?.stop()\n    @targetMark?.stop()\n\n  # Selection\n\n  onSuppressSelectionSounds: (e) -> @suppressSelectionSounds = e.suppress\n  onSetLockSelect: (e) -> @selectLocked = e.lock\n  onLevelRestarted: (e) ->\n    @selectLocked = false\n    @selectLank e, null\n\n  onSelectSprite: (e) ->\n    @selectThang e.thangID, e.spellName\n\n  onCameraDragged: ->\n    @dragged += 1\n\n  onLankMouseUp: (e) ->\n    return unless @handleEvents\n    return if key.shift #and @options.choosing\n    return @dragged = 0 if @dragged > 3\n    @dragged = 0\n    lank = if e.sprite?.thang?.isSelectable then e.sprite else null\n    return if @flagCursorLank and lank?.thangType.get('name') is 'Flag'\n    @selectLank e, lank\n\n  onStageMouseDown: (e) ->\n    return unless @handleEvents\n    return if key.shift #and @options.choosing\n    @selectLank e if e.onBackground\n\n  onChangeSelected: (gameUIState, selected) ->\n    oldLanks = (s.sprite for s in gameUIState.previousAttributes().selected or [])\n    newLanks = (s.sprite for s in selected or [])\n    addedLanks = _.difference(newLanks, oldLanks)\n    removedLanks = _.difference(oldLanks, newLanks)\n\n    for lank in addedLanks\n      layer = if lank.sprite.parent isnt @layerAdapters.Default.container then @layerAdapters.Default else @layerAdapters.Ground\n      mark = new Mark name: 'selection', camera: @camera, layer: layer, thangType: 'selection'\n      mark.toggle true\n      mark.setLank(lank)\n      mark.update()\n      lank.marks.selection = mark # TODO: Figure out how to non-hackily assign lank this mark\n      \n    for lank in removedLanks\n      lank.removeMark?('selection')\n\n  selectThang: (thangID, spellName=null, treemaThangSelected = null) ->\n    return @willSelectThang = [thangID, spellName] unless @lanks[thangID]\n    @selectLank null, @lanks[thangID], spellName, treemaThangSelected\n\n  selectLank: (e, lank=null, spellName=null, treemaThangSelected = null) ->\n    return if e and (@disabled or @selectLocked)  # Ignore clicks for selection/panning/wizard movement while disabled or select is locked\n    worldPos = lank?.thang?.pos\n    worldPos ?= @camera.screenToWorld {x: e.originalEvent.rawX, y: e.originalEvent.rawY} if e?.originalEvent\n    if @handleEvents\n      if (not @reallyStopMoving) and worldPos and (@options.navigateToSelection or not lank or treemaThangSelected) and e?.originalEvent?.nativeEvent?.which isnt 3\n        @camera.zoomTo(lank?.sprite or @camera.worldToSurface(worldPos), @camera.zoom, 1000, true)\n    lank = null if @options.choosing  # Don't select lanks while choosing\n    if lank isnt @selectedLank\n      @selectedLank?.selected = false\n      lank?.selected = true\n      @selectedLank = lank\n    alive = lank and not (lank.thang.health < 0)\n\n    Backbone.Mediator.publish 'surface:sprite-selected',\n      thang: if lank then lank.thang else null\n      sprite: lank\n      spellName: spellName ? e?.spellName\n      originalEvent: e\n      worldPos: worldPos\n\n    @willSelectThang = null if lank  # Now that we've done a real selection, don't reselect some other Thang later.\n\n    if alive and not @suppressSelectionSounds\n      instance = lank.playSound 'selected'\n      if instance?.playState is 'playSucceeded'\n        Backbone.Mediator.publish 'sprite:thang-began-talking', thang: lank?.thang\n        instance.addEventListener 'complete', ->\n          Backbone.Mediator.publish 'sprite:thang-finished-talking', thang: lank?.thang\n\n  onFlagColorSelected: (e) ->\n    @removeLank @flagCursorLank if @flagCursorLank\n    @flagCursorLank = null\n    for flagLank in @lankArray when flagLank.thangType.get('name') is 'Flag'\n      flagLank.sprite.cursor = if e.color then 'crosshair' else 'pointer'\n    return unless e.color\n    @flagCursorLank = new FlagLank @thangTypeFor('Flag'), @createLankOptions(thangID: 'Flag Cursor', color: e.color, team: me.team, isCursor: true, pos: e.pos)\n    @addLank @flagCursorLank, @flagCursorLank.thang.id, @layerAdapters['Floating']\n\n  onFlagUpdated: (e) ->\n    return unless e.active\n    pendingFlag = new FlagLank @thangTypeFor('Flag'), @createLankOptions(thangID: 'Pending Flag ' + Math.random(), color: e.color, team: e.team, isCursor: false, pos: e.pos)\n    @addLank pendingFlag, pendingFlag.thang.id, @layerAdapters['Floating']\n    @pendingFlags.push pendingFlag\n\n  onFlagAppeared: (e) ->\n    # Remove the pending flag that matches this one's color/team/position, and any color/team matches placed earlier.\n    t1 = e.sprite.thang\n    pending = (@pendingFlags ? []).slice()\n    foundExactMatch = false\n    for i in [pending.length - 1 .. 0] by -1\n      pendingFlag = pending[i]\n      t2 = pendingFlag.thang\n      matchedType = t1.color is t2.color and t1.team is t2.team\n      matched = matchedType and (foundExactMatch or Math.abs(t1.pos.x - t2.pos.x) < 0.00001 and Math.abs(t1.pos.y - t2.pos.y) < 0.00001)\n      if matched\n        foundExactMatch = true\n        @pendingFlags.splice(i, 1)\n        @removeLank pendingFlag\n    e.sprite.sprite?.cursor = if @flagCursorLank then 'crosshair' else 'pointer'\n    null\n\n  onRemoveSelectedFlag: (e) ->\n    # Remove the selected lank if it's a flag, or any flag of the given color if a color is given.\n    flagLank = _.find [@selectedLank].concat(@lankArray), (lank) ->\n      lank and lank.thangType.get('name') is 'Flag' and lank.thang.team is me.team and (lank.thang.color is e.color or not e.color) and not lank.notOfThisWorld\n    return unless flagLank\n    Backbone.Mediator.publish 'surface:remove-flag', color: flagLank.thang.color\n\n  # Marks\n\n  updateSelection: ->\n    if @selectedLank?.thang and (not @selectedLank.thang.exists or not @world.getThangByID @selectedLank.thang.id)\n      thangID = @selectedLank.thang.id\n      @selectedLank = null  # Don't actually trigger deselection, but remove the selected lank.\n      @selectionMark?.toggle false\n      @willSelectThang = [thangID, null]\n    @updateTarget()\n    return unless @selectionMark\n    @selectedLank = null if @selectedLank and (@selectedLank.destroyed or not @selectedLank.thang)\n    # The selection mark should be on the ground layer, unless we're not a normal lank (like a wall), in which case we'll place it higher so we can see it.\n    if @selectedLank and @selectedLank.sprite.parent isnt @layerAdapters.Default.container\n      @selectionMark.setLayer @layerAdapters.Default\n    else if @selectedLank\n      @selectionMark.setLayer @layerAdapters.Ground\n    @selectionMark.toggle @selectedLank?\n    @selectionMark.setLank @selectedLank\n    @selectionMark.update()\n\n  updateTarget: ->\n    return unless @targetMark\n    thang = @selectedLank?.thang\n    target = thang?.target\n    targetPos = thang?.targetPos\n    targetPos = null if targetPos?.isZero?()  # Null targetPos get serialized as (0, 0, 0)\n    @targetMark.setLank if target then @lanks[target.id] else null\n    @targetMark.toggle @targetMark.lank or targetPos\n    @targetMark.update if targetPos then @camera.worldToSurface targetPos else null\n"]}