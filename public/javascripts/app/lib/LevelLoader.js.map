{"version":3,"sources":["app/lib/LevelLoader.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/lib/LevelLoader.js","sourcesContent":["Level = require 'models/Level'\nLevelComponent = require 'models/LevelComponent'\nLevelSystem = require 'models/LevelSystem'\nArticle = require 'models/Article'\nLevelSession = require 'models/LevelSession'\nThangType = require 'models/ThangType'\nThangNamesCollection = require 'collections/ThangNamesCollection'\n\nCocoClass = require 'core/CocoClass'\nAudioPlayer = require 'lib/AudioPlayer'\napp = require 'core/application'\nWorld = require 'lib/world/world'\nutils = require 'core/utils'\n\nLOG = me.get('name') is 'Shanakin'  # Debugging a hanging load issue in production\n\n# This is an initial stab at unifying loading and setup into a single place which can\n# monitor everything and keep a LoadingScreen visible overall progress.\n#\n# Would also like to incorporate into here:\n#  * World Building\n#  * Sprite map generation\n#  * Connecting to Firebase\n\n# LevelLoader depends on SuperModel retrying timed out requests, as these occasionally happen during play.\n# If LevelLoader ever moves away from SuperModel, it will have to manage its own retries.\n\nreportedLoadErrorAlready = false\n\nmodule.exports = class LevelLoader extends CocoClass\n\n  constructor: (options) ->\n    @t0 = new Date().getTime()\n    super()\n    @supermodel = options.supermodel\n    @supermodel.setMaxProgress 0.2\n    @levelID = options.levelID\n    @sessionID = options.sessionID\n    @opponentSessionID = options.opponentSessionID\n    @team = options.team\n    @headless = options.headless\n    @loadArticles = options.loadArticles\n    @sessionless = options.sessionless\n    @fakeSessionConfig = options.fakeSessionConfig\n    @spectateMode = options.spectateMode ? false\n    @observing = options.observing\n    @courseID = options.courseID\n    @courseInstanceID = options.courseInstanceID\n\n    @worldNecessities = []\n    @listenTo @supermodel, 'resource-loaded', @onWorldNecessityLoaded\n    @listenTo @supermodel, 'failed', @onWorldNecessityLoadFailed\n    @loadLevel()\n    @loadAudio()\n    @playJingle()\n    if @supermodel.finished()\n      @onSupermodelLoaded()\n    else\n      @loadTimeoutID = setTimeout @reportLoadError.bind(@), 30000\n      @listenToOnce @supermodel, 'loaded-all', @onSupermodelLoaded\n\n  # Supermodel (Level) Loading\n\n  loadWorldNecessities: ->\n    # TODO: Actually trigger loading, instead of in the constructor\n    new Promise((resolve, reject) =>\n      return resolve(@) if @world\n      @once 'world-necessities-loaded', => resolve(@)\n      @once 'world-necessity-load-failed', ({resource}) ->\n        { jqxhr } = resource\n        reject({message: jqxhr.responseJSON?.message or jqxhr.responseText or 'Unknown Error'})\n    )\n\n  loadLevel: ->\n    @level = @supermodel.getModel(Level, @levelID) or new Level _id: @levelID\n    if @level.loaded\n      @onLevelLoaded()\n    else\n      @level = @supermodel.loadModel(@level, 'level').model\n      @listenToOnce @level, 'sync', @onLevelLoaded\n\n  reportLoadError: ->\n    return if @destroyed\n    window.tracker?.trackEvent 'LevelLoadError',\n      category: 'Error',\n      levelSlug: @work?.level?.slug,\n      unloaded: JSON.stringify(@supermodel.report().map (m) -> _.result(m.model, 'url'))\n\n  onLevelLoaded: ->\n    if not @sessionless and @level.isType('hero', 'hero-ladder', 'hero-coop', 'course')\n      @sessionDependenciesRegistered = {}\n    if @level.isType('web-dev')\n      @headless = true\n      if @sessionless\n        # When loading a web-dev level in the level editor, pretend it's a normal hero level so we can put down our placeholder Thang.\n        # TODO: avoid this whole roundabout Thang-based way of doing web-dev levels\n        originalGet = @level.get\n        @level.get = ->\n          return 'hero' if arguments[0] is 'type'\n          return 'web-dev' if arguments[0] is 'realType'\n          originalGet.apply @, arguments\n    if (@courseID and not @level.isType('course', 'course-ladder', 'game-dev', 'web-dev')) or window.serverConfig.picoCTF\n      # Because we now use original hero levels for both hero and course levels, we fake being a course level in this context.\n      originalGet = @level.get\n      realType = @level.get('type')\n      @level.get = ->\n        return 'course' if arguments[0] is 'type'\n        return realType if arguments[0] is 'realType'\n        originalGet.apply @, arguments\n    if window.serverConfig.picoCTF\n      @supermodel.addRequestResource(url: '/picoctf/problems', success: (picoCTFProblems) =>\n        @level?.picoCTFProblem = _.find picoCTFProblems, pid: @level.get('picoCTFProblem')\n      ).load()\n    if @sessionless\n      null\n    else if @fakeSessionConfig?\n      @loadFakeSession()\n    else\n      @loadSession()\n    @populateLevel()\n\n  # Session Loading\n\n  loadFakeSession: ->\n    initVals =\n      level:\n        original: @level.get('original')\n        majorVersion: @level.get('version').major\n      creator: me.id\n      state:\n        complete: false\n        scripts: {}\n      permissions: [\n        {target: me.id, access: 'owner'}\n        {target: 'public', access: 'write'}\n      ]\n      codeLanguage: @fakeSessionConfig.codeLanguage or me.get('aceConfig')?.language or 'python'\n      _id: 'A Fake Session ID'\n    @session = new LevelSession initVals\n    @session.loaded = true\n    @fakeSessionConfig.callback? @session, @level\n\n    # TODO: set the team if we need to, for multiplayer\n    # TODO: just finish the part where we make the submit button do what is right when we are fake\n    # TODO: anything else to make teacher session-less play make sense when we are fake\n    # TODO: make sure we are not actually calling extra save/patch/put things throwing warnings because we know we are fake and so we shouldn't try to do that\n    for method in ['save', 'patch', 'put']\n      @session[method] = -> console.error \"We shouldn't be doing a session.#{method}, since it's a fake session.\"\n    @session.fake = true\n    @loadDependenciesForSession @session\n\n  loadSession: ->\n    if @sessionID\n      url = \"/db/level.session/#{@sessionID}\"\n      url += \"?interpret=true\" if @spectateMode\n    else\n      url = \"/db/level/#{@levelID}/session\"\n      if @team\n        url += \"?team=#{@team}\"\n      else if @courseID\n        url += \"?course=#{@courseID}\"\n        if @courseInstanceID\n          url += \"&courseInstance=#{@courseInstanceID}\"\n\n    session = new LevelSession().setURL url\n    if @headless and not @level.isType('web-dev')\n      session.project = ['creator', 'team', 'heroConfig', 'codeLanguage', 'submittedCodeLanguage', 'state', 'submittedCode', 'submitted']\n    @sessionResource = @supermodel.loadModel(session, 'level_session', {cache: false})\n    @session = @sessionResource.model\n    if @opponentSessionID\n      opponentURL = \"/db/level.session/#{@opponentSessionID}?interpret=true\"\n      opponentSession = new LevelSession().setURL opponentURL\n      opponentSession.project = session.project if @headless\n      @opponentSessionResource = @supermodel.loadModel(opponentSession, 'opponent_session', {cache: false})\n      @opponentSession = @opponentSessionResource.model\n\n    if @session.loaded\n      @session.setURL '/db/level.session/' + @session.id\n      @loadDependenciesForSession @session\n    else\n      @listenToOnce @session, 'sync', ->\n        @session.setURL '/db/level.session/' + @session.id\n        @loadDependenciesForSession @session\n    if @opponentSession\n      if @opponentSession.loaded\n        @loadDependenciesForSession @opponentSession\n      else\n        @listenToOnce @opponentSession, 'sync', @loadDependenciesForSession\n\n  loadDependenciesForSession: (session) ->\n    console.log \"Loading dependencies for session: \", session if LOG\n    if me.id isnt session.get 'creator'\n      session.patch = session.save = -> console.error \"Not saving session, since we didn't create it.\"\n    else if codeLanguage = utils.getQueryVariable 'codeLanguage'\n      session.set 'codeLanguage', codeLanguage\n    @loadCodeLanguagesForSession session\n    if compressed = session.get 'interpret'\n      uncompressed = LZString.decompressFromUTF16 compressed\n      code = session.get 'code'\n      code[if session.get('team') is 'humans' then 'hero-placeholder' else 'hero-placeholder-1'].plan = uncompressed\n      session.set 'code', code\n      session.unset 'interpret'\n    if session.get('codeLanguage') in ['io', 'clojure']\n      session.set 'codeLanguage', 'python'\n    if session is @session\n      @addSessionBrowserInfo session\n      # hero-ladder games require the correct session team in level:loaded\n      team = @team ? @session.get('team')\n      Backbone.Mediator.publish 'level:loaded', level: @level, team: team\n      Backbone.Mediator.publish 'level:session-loaded', level: @level, session: @session\n      @consolidateFlagHistory() if @opponentSession?.loaded\n    else if session is @opponentSession\n      @consolidateFlagHistory() if @session.loaded\n    if @level.isType('course')  # course-ladder is hard to handle because there's 2 sessions\n      heroThangType = me.get('heroConfig')?.thangType or ThangType.heroes.captain\n      console.log \"Course mode, loading custom hero: \", heroThangType if LOG\n      url = \"/db/thang.type/#{heroThangType}/version\"\n      if heroResource = @maybeLoadURL(url, ThangType, 'thang')\n        console.log \"Pushing resource: \", heroResource if LOG\n        @worldNecessities.push heroResource\n      @sessionDependenciesRegistered[session.id] = true\n    unless @level.isType('hero', 'hero-ladder', 'hero-coop')\n      # Return before loading heroConfig ThangTypes. Finish if all world necessities were completed by the time the session loaded.\n      if @checkAllWorldNecessitiesRegisteredAndLoaded()\n        @onWorldNecessitiesLoaded()\n      return\n    # Load the ThangTypes needed for the session's heroConfig for these types of levels\n    heroConfig = session.get('heroConfig')\n    heroConfig ?= me.get('heroConfig') if session is @session and not @headless\n    heroConfig ?= {}\n    heroConfig.inventory ?= feet: '53e237bf53457600003e3f05'  # If all else fails, assign simple boots.\n    heroConfig.thangType ?= '529ffbf1cf1818f2be000001'  # If all else fails, assign Tharin as the hero.\n    session.set 'heroConfig', heroConfig unless _.isEqual heroConfig, session.get('heroConfig')\n    url = \"/db/thang.type/#{heroConfig.thangType}/version\"\n    if heroResource = @maybeLoadURL(url, ThangType, 'thang')\n      @worldNecessities.push heroResource\n    else\n      heroThangType = @supermodel.getModel url\n      @loadDefaultComponentsForThangType heroThangType\n      @loadThangsRequiredByThangType heroThangType\n\n    for itemThangType in _.values(heroConfig.inventory)\n      url = \"/db/thang.type/#{itemThangType}/version?project=name,components,original,rasterIcon,kind\"\n      if itemResource = @maybeLoadURL(url, ThangType, 'thang')\n        @worldNecessities.push itemResource\n      else\n        itemThangType = @supermodel.getModel url\n        @loadDefaultComponentsForThangType itemThangType\n        @loadThangsRequiredByThangType itemThangType\n    @sessionDependenciesRegistered[session.id] = true\n    if _.size(@sessionDependenciesRegistered) is 2 and @checkAllWorldNecessitiesRegisteredAndLoaded()\n      @onWorldNecessitiesLoaded()\n\n  loadCodeLanguagesForSession: (session) ->\n    codeLanguages = _.uniq _.filter [session.get('codeLanguage') or 'python', session.get('submittedCodeLanguage')]\n    for codeLanguage in codeLanguages\n      continue if codeLanguage in ['clojure', 'io']\n      do (codeLanguage) =>\n        modulePath = \"vendor/aether-#{codeLanguage}\"\n        return unless application.moduleLoader?.load modulePath\n        languageModuleResource = @supermodel.addSomethingResource 'language_module'\n        onModuleLoaded = (e) ->\n          return unless e.id is modulePath\n          languageModuleResource.markLoaded()\n          @stopListening application.moduleLoader, 'loaded', onModuleLoaded  # listenToOnce might work here instead, haven't tried\n        @listenTo application.moduleLoader, 'loaded', onModuleLoaded\n\n  addSessionBrowserInfo: (session) ->\n    return unless me.id is session.get 'creator'\n    return unless $.browser?\n    browser = {}\n    browser['desktop'] = $.browser.desktop if $.browser.desktop\n    browser['name'] = $.browser.name if $.browser.name\n    browser['platform'] = $.browser.platform if $.browser.platform\n    browser['version'] = $.browser.version if $.browser.version\n    session.set 'browser', browser\n    session.patch() unless session.fake\n\n  consolidateFlagHistory: ->\n    state = @session.get('state') ? {}\n    myFlagHistory = _.filter state.flagHistory ? [], team: @session.get('team')\n    opponentFlagHistory = _.filter @opponentSession.get('state')?.flagHistory ? [], team: @opponentSession.get('team')\n    state.flagHistory = myFlagHistory.concat opponentFlagHistory\n    @session.set 'state', state\n\n  # Grabbing the rest of the required data for the level\n\n  populateLevel: ->\n    thangIDs = []\n    componentVersions = []\n    systemVersions = []\n    articleVersions = []\n\n    flagThang = thangType: '53fa25f25bc220000052c2be', id: 'Placeholder Flag', components: []\n    for thang in (@level.get('thangs') or []).concat [flagThang]\n      thangIDs.push thang.thangType\n      @loadThangsRequiredByLevelThang(thang)\n      for comp in thang.components or []\n        componentVersions.push _.pick(comp, ['original', 'majorVersion'])\n\n    for system in @level.get('systems') or []\n      systemVersions.push _.pick(system, ['original', 'majorVersion'])\n      if indieSprites = system?.config?.indieSprites\n        for indieSprite in indieSprites\n          thangIDs.push indieSprite.thangType\n\n    unless @headless and not @loadArticles\n      for article in @level.get('documentation')?.generalArticles or []\n        articleVersions.push _.pick(article, ['original', 'majorVersion'])\n\n    objUniq = (array) -> _.uniq array, false, (arg) -> JSON.stringify(arg)\n\n    worldNecessities = []\n\n    @thangIDs = _.uniq thangIDs\n    @thangNames = new ThangNamesCollection(@thangIDs)\n    worldNecessities.push @supermodel.loadCollection(@thangNames, 'thang_names')\n    @listenToOnce @thangNames, 'sync', @onThangNamesLoaded\n    worldNecessities.push @sessionResource if @sessionResource?.isLoading\n    worldNecessities.push @opponentSessionResource if @opponentSessionResource?.isLoading\n\n    for obj in objUniq componentVersions\n      url = \"/db/level.component/#{obj.original}/version/#{obj.majorVersion}\"\n      worldNecessities.push @maybeLoadURL(url, LevelComponent, 'component')\n    for obj in objUniq systemVersions\n      url = \"/db/level.system/#{obj.original}/version/#{obj.majorVersion}\"\n      worldNecessities.push @maybeLoadURL(url, LevelSystem, 'system')\n    for obj in objUniq articleVersions\n      url = \"/db/article/#{obj.original}/version/#{obj.majorVersion}\"\n      @maybeLoadURL url, Article, 'article'\n    if obj = @level.get 'nextLevel'  # TODO: update to get next level from campaigns, not this old property\n      url = \"/db/level/#{obj.original}/version/#{obj.majorVersion}\"\n      @maybeLoadURL url, Level, 'level'\n\n    @worldNecessities = @worldNecessities.concat worldNecessities\n\n  loadThangsRequiredByLevelThang: (levelThang) ->\n    @loadThangsRequiredFromComponentList levelThang.components\n\n  loadThangsRequiredByThangType: (thangType) ->\n    @loadThangsRequiredFromComponentList thangType.get('components')\n\n  loadThangsRequiredFromComponentList: (components) ->\n    return unless components\n    requiredThangTypes = []\n    for component in components when component.config\n      if component.original is LevelComponent.EquipsID\n        requiredThangTypes.push itemThangType for itemThangType in _.values (component.config.inventory ? {})\n      else if component.config.requiredThangTypes\n        requiredThangTypes = requiredThangTypes.concat component.config.requiredThangTypes\n    extantRequiredThangTypes = _.filter requiredThangTypes\n    if extantRequiredThangTypes.length < requiredThangTypes.length\n      console.error \"Some Thang had a blank required ThangType in components list:\", components\n    for thangType in extantRequiredThangTypes\n      url = \"/db/thang.type/#{thangType}/version?project=name,components,original,rasterIcon,kind,prerenderedSpriteSheetData\"\n      @worldNecessities.push @maybeLoadURL(url, ThangType, 'thang')\n\n  onThangNamesLoaded: (thangNames) ->\n    for thangType in thangNames.models\n      @loadDefaultComponentsForThangType(thangType)\n      @loadThangsRequiredByThangType(thangType)\n    @thangNamesLoaded = true\n    @onWorldNecessitiesLoaded() if @checkAllWorldNecessitiesRegisteredAndLoaded()\n\n  loadDefaultComponentsForThangType: (thangType) ->\n    return unless components = thangType.get('components')\n    for component in components\n      url = \"/db/level.component/#{component.original}/version/#{component.majorVersion}\"\n      @worldNecessities.push @maybeLoadURL(url, LevelComponent, 'component')\n\n  onWorldNecessityLoaded: (resource) ->\n    index = @worldNecessities.indexOf(resource)\n    if resource.name is 'thang'\n      @loadDefaultComponentsForThangType(resource.model)\n      @loadThangsRequiredByThangType(resource.model)\n\n    return unless index >= 0\n    @worldNecessities.splice(index, 1)\n    @worldNecessities = (r for r in @worldNecessities when r?)\n    @onWorldNecessitiesLoaded() if @checkAllWorldNecessitiesRegisteredAndLoaded()\n\n  onWorldNecessityLoadFailed: (event) ->\n    @reportLoadError()\n    @trigger('world-necessity-load-failed', event)\n\n  checkAllWorldNecessitiesRegisteredAndLoaded: ->\n    return false unless _.filter(@worldNecessities).length is 0\n    return false unless @thangNamesLoaded\n    return false if @sessionDependenciesRegistered and not @sessionDependenciesRegistered[@session.id] and not @sessionless\n    return false if @sessionDependenciesRegistered and @opponentSession and not @sessionDependenciesRegistered[@opponentSession.id] and not @sessionless\n    return false unless @session?.loaded or @sessionless\n    true\n\n  onWorldNecessitiesLoaded: ->\n    console.log \"World necessities loaded.\" if LOG\n    return if @initialized\n    @initialized = true\n    @initWorld()\n    @supermodel.clearMaxProgress()\n    @trigger 'world-necessities-loaded'\n    return if @headless\n    thangsToLoad = _.uniq( (t.spriteName for t in @world.thangs when t.exists) )\n    nameModelTuples = ([thangType.get('name'), thangType] for thangType in @thangNames.models)\n    nameModelMap = _.zipObject nameModelTuples\n    @spriteSheetsToBuild ?= []\n\n#    for thangTypeName in thangsToLoad\n#      thangType = nameModelMap[thangTypeName]\n#      continue if not thangType or thangType.isFullyLoaded()\n#      thangType.fetch()\n#      thangType = @supermodel.loadModel(thangType, 'thang').model\n#      res = @supermodel.addSomethingResource 'sprite_sheet', 5\n#      res.thangType = thangType\n#      res.markLoading()\n#      @spriteSheetsToBuild.push res\n\n    @buildLoopInterval = setInterval @buildLoop, 5 if @spriteSheetsToBuild.length\n\n  maybeLoadURL: (url, Model, resourceName) ->\n    return if @supermodel.getModel(url)\n    model = new Model().setURL url\n    @supermodel.loadModel(model, resourceName)\n\n  onSupermodelLoaded: ->\n    clearTimeout @loadTimeoutID\n    return if @destroyed\n    console.log 'SuperModel for Level loaded in', new Date().getTime() - @t0, 'ms' if LOG\n    @loadLevelSounds()\n    @denormalizeSession()\n\n  buildLoop: =>\n    someLeft = false\n    for spriteSheetResource, i in @spriteSheetsToBuild ? []\n      continue if spriteSheetResource.spriteSheetKeys\n      someLeft = true\n      thangType = spriteSheetResource.thangType\n      if thangType.loaded and not thangType.loading\n        keys = @buildSpriteSheetsForThangType spriteSheetResource.thangType\n        if keys and keys.length\n          @listenTo spriteSheetResource.thangType, 'build-complete', @onBuildComplete\n          spriteSheetResource.spriteSheetKeys = keys\n        else\n          spriteSheetResource.markLoaded()\n\n    clearInterval @buildLoopInterval unless someLeft\n\n  onBuildComplete: (e) ->\n    resource = null\n    for resource in @spriteSheetsToBuild\n      break if e.thangType is resource.thangType\n    return console.error 'Did not find spriteSheetToBuildResource for', e unless resource\n    resource.spriteSheetKeys = (k for k in resource.spriteSheetKeys when k isnt e.key)\n    resource.markLoaded() if resource.spriteSheetKeys.length is 0\n\n  denormalizeSession: ->\n    return if @sessionDenormalized or @spectateMode or @sessionless or me.isSessionless()\n    return if @headless and not @level.isType('web-dev')\n    # This is a way (the way?) PUT /db/level.sessions/undefined was happening\n    # See commit c242317d9\n    return if not @session.id\n    patch =\n      'levelName': @level.get('name')\n      'levelID': @level.get('slug') or @level.id\n    if me.id is @session.get 'creator'\n      patch.creatorName = me.get('name')\n    for key, value of patch\n      if @session.get(key) is value\n        delete patch[key]\n    unless _.isEmpty patch\n      @session.set key, value for key, value of patch\n      tempSession = new LevelSession _id: @session.id\n      tempSession.save(patch, {patch: true, type: 'PUT'})\n    @sessionDenormalized = true\n\n  # Building sprite sheets\n\n  buildSpriteSheetsForThangType: (thangType) ->\n    return if @headless\n    # TODO: Finish making sure the supermodel loads the raster image before triggering load complete, and that the cocosprite has access to the asset.\n#    if f = thangType.get('raster')\n#      queue = new createjs.LoadQueue()\n#      queue.loadFile('/file/'+f)\n    @grabThangTypeTeams() unless @thangTypeTeams\n    keys = []\n    for team in @thangTypeTeams[thangType.get('original')] ? [null]\n      spriteOptions = {resolutionFactor: SPRITE_RESOLUTION_FACTOR, async: true}\n      if thangType.get('kind') is 'Floor'\n        spriteOptions.resolutionFactor = 2\n      if team and color = @teamConfigs[team]?.color\n        spriteOptions.colorConfig = team: color\n      key = @buildSpriteSheet thangType, spriteOptions\n      if _.isString(key) then keys.push key\n    keys\n\n  grabThangTypeTeams: ->\n    @grabTeamConfigs()\n    @thangTypeTeams = {}\n    for thang in @level.get('thangs')\n      if @level.isType('hero', 'course') and thang.id is 'Hero Placeholder'\n        continue  # No team colors for heroes on single-player levels\n      for component in thang.components\n        if team = component.config?.team\n          @thangTypeTeams[thang.thangType] ?= []\n          @thangTypeTeams[thang.thangType].push team unless team in @thangTypeTeams[thang.thangType]\n          break\n    @thangTypeTeams\n\n  grabTeamConfigs: ->\n    for system in @level.get('systems')\n      if @teamConfigs = system.config?.teamConfigs\n        break\n    unless @teamConfigs\n      # Hack: pulled from Alliance System code. TODO: put in just one place.\n      @teamConfigs = {'humans': {'superteam': 'humans', 'color': {'hue': 0, 'saturation': 0.75, 'lightness': 0.5}, 'playable': true}, 'ogres': {'superteam': 'ogres', 'color': {'hue': 0.66, 'saturation': 0.75, 'lightness': 0.5}, 'playable': false}, 'neutral': {'superteam': 'neutral', 'color': {'hue': 0.33, 'saturation': 0.75, 'lightness': 0.5}}}\n    @teamConfigs\n\n  buildSpriteSheet: (thangType, options) ->\n    if thangType.get('name') is 'Wizard'\n      options.colorConfig = me.get('wizard')?.colorConfig or {}\n    thangType.buildSpriteSheet options\n\n  # World init\n\n  initWorld: ->\n    return if @level.isType('web-dev')\n    @world = new World()\n    @world.levelSessionIDs = if @opponentSessionID then [@sessionID, @opponentSessionID] else [@sessionID]\n    @world.submissionCount = @session?.get('state')?.submissionCount ? 0\n    @world.flagHistory = @session?.get('state')?.flagHistory ? []\n    @world.difficulty = @session?.get('state')?.difficulty ? 0\n    if @observing\n      @world.difficulty = Math.max 0, @world.difficulty - 1  # Show the difficulty they won, not the next one.\n    serializedLevel = @level.serialize {@supermodel, @session, @opponentSession, @headless, @sessionless}\n    @world.loadFromLevel serializedLevel, false\n    console.log 'World has been initialized from level loader.' if LOG\n\n  # Initial Sound Loading\n\n  playJingle: ->\n    return if @headless or not me.get('volume')\n    volume = 0.5\n    if me.level() < 3\n      volume = 0.25  # Start softly, since they may not be expecting it\n    # Apparently the jingle, when it tries to play immediately during all this loading, you can't hear it.\n    # Add the timeout to fix this weird behavior.\n    f = ->\n      jingles = ['ident_1', 'ident_2']\n      AudioPlayer.playInterfaceSound jingles[Math.floor Math.random() * jingles.length], volume\n    setTimeout f, 500\n\n  loadAudio: ->\n    return if @headless or not me.get('volume')\n    AudioPlayer.preloadInterfaceSounds ['victory']\n\n  loadLevelSounds: ->\n    return if @headless or not me.get('volume')\n    scripts = @level.get 'scripts'\n    return unless scripts\n\n    for script in scripts when script.noteChain\n      for noteGroup in script.noteChain when noteGroup.sprites\n        for sprite in noteGroup.sprites when sprite.say?.sound\n          AudioPlayer.preloadSoundReference(sprite.say.sound)\n\n    thangTypes = @supermodel.getModels(ThangType)\n    for thangType in thangTypes\n      for trigger, sounds of thangType.get('soundTriggers') or {} when trigger isnt 'say'\n        AudioPlayer.preloadSoundReference sound for sound in sounds\n\n  # everything else sound wise is loaded as needed as worlds are generated\n\n  progress: -> @supermodel.progress\n\n  destroy: ->\n    clearInterval @buildLoopInterval if @buildLoopInterval\n    super()\n"]}