{"version":3,"sources":["app/lib/world/thang_state.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/lib/world/thang_state.js","sourcesContent":["{clone, typedArraySupport} = require './world_utils'\nVector = require './vector'\n\nif typedArraySupport\n  FloatArrayType = Float32Array  # Better performance than Float64Array\n  bytesPerFloat = FloatArrayType.BYTES_PER_ELEMENT ? FloatArrayType.prototype.BYTES_PER_ELEMENT\nelse\n  bytesPerFloat = 4\n\nmodule.exports = class ThangState\n  @className: 'ThangState'\n  @trackedPropertyTypes: [\n    'boolean'\n    'number'\n    'string'\n    'array'  # will turn everything into strings\n    'object'  # grrr\n    'Vector'\n    'Thang'  # serialized as ids, like strings\n  ]\n\n  hasRestored: false\n  constructor: (thang) ->\n    @props = []  # parallel array to @thang's trackedPropertiesKeys/Types\n    return unless thang\n    @thang = thang\n    for prop, propIndex in thang.trackedPropertiesKeys\n      type = thang.trackedPropertiesTypes[propIndex]\n      value = thang[prop]\n      if type is 'Vector'\n        @props.push value?.copy()  # could try storing [x, y, z] or {x, y, z} here instead if this is expensive\n      else if type is 'object' or type is 'array'\n        @props.push clone(value, true)\n      else\n        @props.push value\n\n  # Either pass storage and type, or don't pass either of them\n  getStoredProp: (propIndex, type, storage) ->\n    # Optimize it\n    unless type\n      type = @trackedPropertyTypes[propIndex]\n      storage = @trackedPropertyValues[propIndex]\n    if type is 'Vector'\n      value = new Vector storage[3 * @frameIndex], storage[3 * @frameIndex + 1], storage[3 * @frameIndex + 2]\n    else if type is 'string'\n      specialKey = storage[@frameIndex]\n      value = @specialKeysToValues[specialKey]\n    else if type is 'Thang'\n      specialKey = storage[@frameIndex]\n      value = @thang.world.getThangByID @specialKeysToValues[specialKey]\n    else if type is 'array'\n      specialKey = storage[@frameIndex]\n      valueString = @specialKeysToValues[specialKey]\n      if valueString and valueString.length > 1\n        # Trim leading Group Separator and trailing Record Separator, split by Record Separators, restore string array.\n        value = valueString.substring(1, valueString.length - 1).split '\\x1E'\n      else\n        value = []\n    else\n      value = storage[@frameIndex]\n    value\n\n  getStateForProp: (prop) ->\n    # Get the property, whether we have it stored in @props or in @trackedPropertyValues. Optimize it.\n    # Figured based on http://jsperf.com/object-vs-array-vs-native-linked-list/13 that it should be faster with small arrays to do the indexOf reads (each up to 24x faster) than to do a single object read, and then we don't have to maintain an extra @props object; just keep array\n    propIndex = @trackedPropertyKeys.indexOf prop\n    if propIndex is -1\n      initialPropIndex = @thang.unusedTrackedPropertyKeys.indexOf prop\n      return null if initialPropIndex is -1\n      return @thang.unusedTrackedPropertyValues[initialPropIndex]\n    value = @props[propIndex]\n    return value if value isnt undefined or @hasRestored\n    return @props[propIndex] = @getStoredProp propIndex\n\n  restore: ->\n    # Restore trackedProperties' values to @thang, retrieving them from @trackedPropertyValues if needed. Optimize it.\n    return @ if @thang._state is @ and not @thang.partialState\n    unless @hasRestored  # Restoring in a deserialized World for first time\n      for prop, propIndex in @thang.unusedTrackedPropertyKeys when @trackedPropertyKeys.indexOf(prop) is -1\n        @thang[prop] = @thang.unusedTrackedPropertyValues[propIndex]\n      props = []\n      for prop, propIndex in @trackedPropertyKeys\n        type = @trackedPropertyTypes[propIndex]\n        storage = @trackedPropertyValues[propIndex]\n        props.push @thang[prop] = @getStoredProp propIndex, type, storage\n        #console.log @frameIndex, @thang.id, prop, propIndex, type, storage, 'got', @thang[prop]\n      @props = props\n      @trackedPropertyTypes = @trackedPropertyValues = @specialKeysToValues = null  # leave @trackedPropertyKeys for indexing\n      @hasRestored = true\n    else  # Restoring later times\n      for prop, propIndex in @thang.unusedTrackedPropertyKeys when @trackedPropertyKeys.indexOf(prop) is -1\n        @thang[prop] = @thang.unusedTrackedPropertyValues[propIndex]\n      for prop, propIndex in @trackedPropertyKeys\n        @thang[prop] = @props[propIndex]\n    @thang.partialState = false\n    @thang.stateChanged = true\n    @\n\n  restorePartial: (ratio) ->\n    # Don't think we need to worry about unusedTrackedPropertyValues here.\n    # If it's not tracked yet, it'll very rarely partially change between frames; we can afford to miss the first one.\n    inverse = 1 - ratio\n    for prop, propIndex in @trackedPropertyKeys when prop is 'pos' or prop is 'rotation'\n      if @hasRestored\n        value = @props[propIndex]\n      else\n        type = @trackedPropertyTypes[propIndex]\n        storage = @trackedPropertyValues[propIndex]\n        value = @getStoredProp propIndex, type, storage\n      if prop is 'pos'\n        if (@thang.teleport and @thang.pos.distanceSquared(value) > 900) or (@thang.pos.x is 0 and @thang.pos.y is 0)\n          # Don't interpolate; it was probably a teleport. https://github.com/codecombat/codecombat/issues/738\n          @thang.pos = value\n        else\n          @thang.pos = @thang.pos.copy()\n          @thang.pos.x = inverse * @thang.pos.x + ratio * value.x\n          @thang.pos.y = inverse * @thang.pos.y + ratio * value.y\n          @thang.pos.z = inverse * @thang.pos.z + ratio * value.z\n      else if prop is 'rotation'\n        @thang.rotation = inverse * @thang.rotation + ratio * value\n      @thang.partialState = true\n    @thang.stateChanged = true\n    @\n\n  serialize: (frameIndex, trackedPropertyIndices, trackedPropertyTypes, trackedPropertyValues, specialValuesToKeys, specialKeysToValues) ->\n    # Performance hotspot--called once per tracked property per Thang per frame. Optimize the crap out of it.\n    for type, newPropIndex in trackedPropertyTypes\n      originalPropIndex = trackedPropertyIndices[newPropIndex]\n      storage = trackedPropertyValues[newPropIndex]\n      value = @props[originalPropIndex]\n      if value\n        # undefined, null, false, 0 won't trigger in this serialization code scheme anyway, so we can't differentiate between them when deserializing\n        if type is 'Vector'\n          storage[3 * frameIndex] = value.x\n          storage[3 * frameIndex + 1] = value.y\n          storage[3 * frameIndex + 2] = value.z\n        else if type is 'string'\n          specialKey = specialValuesToKeys[value]\n          unless specialKey\n            specialKey = specialKeysToValues.length\n            specialValuesToKeys[value] = specialKey\n            specialKeysToValues.push value\n            storage[frameIndex] = specialKey\n          storage[frameIndex] = specialKey\n        else if type is 'Thang'\n          value = value.id\n          specialKey = specialValuesToKeys[value]\n          unless specialKey\n            specialKey = specialKeysToValues.length\n            specialValuesToKeys[value] = specialKey\n            specialKeysToValues.push value\n            storage[frameIndex] = specialKey\n          storage[frameIndex] = specialKey\n        else if type is 'array'\n          # We make sure the array keys won't collide with any string keys by using some unprintable characters.\n          stringPieces = ['\\x1D']  # Group Separator\n          for element in value\n            if element and element.id  # Was checking element.isThang, but we can't store non-strings anyway\n              element = element.id\n            stringPieces.push element, '\\x1E'  # Record Separator(s)\n          value = stringPieces.join('')\n          specialKey = specialValuesToKeys[value]\n          unless specialKey\n            specialKey = specialKeysToValues.length\n            specialValuesToKeys[value] = specialKey\n            specialKeysToValues.push value\n            storage[frameIndex] = specialKey\n          storage[frameIndex] = specialKey\n        else\n          storage[frameIndex] = value\n        #console.log @thang.id, 'assigned prop', originalPropIndex, newPropIndex, value, type, 'at', frameIndex, 'to', storage[frameIndex]\n    null\n\n  @deserialize: (world, frameIndex, thang, trackedPropertyKeys, trackedPropertyTypes, trackedPropertyValues, specialKeysToValues) ->\n    # Optimize like no tomorrow--most performance-sensitive part of the whole app, called once per WorldFrame per Thang per trackedProperty, blocking the UI\n    ts = new ThangState\n    ts.thang = thang\n    ts.frameIndex = frameIndex\n    ts.trackedPropertyKeys = trackedPropertyKeys\n    ts.trackedPropertyTypes = trackedPropertyTypes\n    ts.trackedPropertyValues = trackedPropertyValues\n    ts.specialKeysToValues = specialKeysToValues\n    ts\n\n  @transferableBytesNeededForType: (type, nFrames) ->\n    bytes = switch type\n      when 'boolean' then 1\n      when 'number' then bytesPerFloat\n      when 'Vector' then bytesPerFloat * 3\n      when 'string' then 4\n      when 'Thang' then 4  # turn them into strings of their ids\n      when 'array'  then 4  # turn them into strings and hope it doesn't explode?\n      else 0\n    # We need to be a multiple of bytesPerFloat otherwise bigger-byte array (Float64Array, etc.) offsets won't work\n    # http://www.kirupa.com/forum/showthread.php?378737-Typed-Arrays-Y-U-No-offset-at-values-other-than-multiples-of-element-size\n    bytesPerFloat * Math.ceil(nFrames * bytes / bytesPerFloat)\n\n  @createArrayForType: (type, nFrames, buffer, offset) ->\n    bytes = @transferableBytesNeededForType type, nFrames\n    storage = switch type\n      when 'boolean'\n        new Uint8Array(buffer, offset, nFrames)\n      when 'number'\n        new FloatArrayType(buffer, offset, nFrames)\n      when 'Vector'\n        new FloatArrayType(buffer, offset, nFrames * 3)\n      when 'string'\n        new Uint32Array(buffer, offset, nFrames)\n      when 'Thang'\n        new Uint32Array(buffer, offset, nFrames)\n      when 'array'\n        new Uint32Array(buffer, offset, nFrames)\n      else\n        []\n    [storage, bytes]\n\nunless typedArraySupport\n  # Fall back to normal arrays in IE 9\n  ThangState.createArrayForType = (type, nFrames, buffer, offset) ->\n    bytes = @transferableBytesNeededForType type, nFrames\n    elementsPerFrame = if type is 'Vector' then 3 else 1\n    storage = (0 for i in [0 ... nFrames * elementsPerFrame])\n    [storage, bytes]\n"]}