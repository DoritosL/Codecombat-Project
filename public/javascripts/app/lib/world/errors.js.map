{"version":3,"sources":["app/lib/world/errors.coffee"],"names":[],"mappings":";AAAA;EAAA;;;AAAA,SAAS,QAAQ,UAAR;;AAET,MAAM,CAAC,OAAO,CAAC,aAAf,GAAqC;;;EACnC,aAAC,UAAD,GAAY;;EACC,uBAAC,OAAD,EAAW,YAAX,EAA0B,YAA1B,EAAyC,YAAzC,EAAwD,WAAxD,EAAsE,YAAtE,EAAqF,IAArF;IAAC,IAAC,WAAD;IAAU,IAAC,gBAAD;IAAe,IAAC,gBAAD;IAAe,IAAC,gBAAD;IAAe,IAAC,eAAD;IAAc,IAAC,gBAAD;IAAe,IAAC,QAAD;IAChG,+CAAM,IAAC,QAAP;IACA,IAAC,KAAD,GAAQ;IACR,IAAG,+BAAH;MACE,KAAK,CAAC,iBAAN,CAAwB,IAAxB,EAA2B,IAAC,YAA5B,EADF;;EAHW;;0BAMb,WAAU;AACR;IAAA,IAAI,MAAI,IAAC,aAAL,GAAkB;IACtB,IAAG,IAAC,aAAD,KAAiB,QAApB;MACE,KAAK,kBADP;KAAA,MAEK,IAAG,IAAC,aAAD,KAAiB,SAApB;MACH,KAAK,iBAAe,IAAC,aAAhB,GAA6B,WAA7B,GAAuC,CAAI,IAAC,aAAD,GAAgB,CAAnB,GAA0B,GAA1B,GAAmC,EAApC,CAAvC,GAA8E,IADhF;KAAA,MAEA,IAAG,IAAC,aAAJ;MACH,KAAK,kBAAgB,IAAC,aAAjB,GAA8B,IADhC;KAAA;MAGH,KAAK,uBAHF;;IAKL,aAAa,OAAO,IAAC;IACrB,IAAO,wBAAP;MACE,aAAa,OADf;KAAA,MAEK,IAAG,CAAC,CAAC,OAAF,CAAU,IAAC,YAAX,CAAH;MACH,aAAa,QADV;;IAEL,eAAe,IAAC,aAAD,IAAkB,CAAI,IAAC,aAAY,CAAC,KAAd,CAAoB,UAApB;IACrC,IAAG,YAAH;MACE,IAAI;MACJ,IAAG,eAAc,QAAjB;QACE,IAAI,OAAK,IAAC,YAAN,GAAkB,KADxB;OAAA,MAEK,IAAG,eAAc,QAAjB;QACH,IAAG,IAAI,CAAC,KAAL,CAAW,IAAC,YAAZ,MAA4B,IAAC,YAAhC;UAAiD,IAAC,aAAlD;SAAA;UAAmE,IAAC,YAAW,CAAC,OAAb,CAAqB,CAArB,EAAnE;SADG;OAAA,MAEA,IAAG,eAAc,SAAjB;QACH,IAAI,KAAG,IAAC,aADL;OAAA,MAEA,IAAI,8BAAkB,IAAC,YAAW,CAAC,EAA/B,IAAsC,IAAC,YAAW,CAAC,qBAAvD;QAEH,IAAI,IAAC,YAAW,CAAC,QAAb,GAFD;OAAA,MAGA,IAAG,IAAC,YAAD,YAAwB,MAA3B;QACH,IAAI,IAAC,YAAW,CAAC,QAAb,GADD;;MAEL,YAAY,aAAa,IAAC,YAAD,YAAwB;MACjD,KAAK,wBAAsB,IAAC,aAAvB,GAAoC,cAApC,GAAkD,UAAlD,GAA6D,GAA7D,GAA+D,CAAI,CAAH,GAAU,QAAM,CAAN,GAAQ,GAAlB,GAA0B,EAA3B,CAA/D,GAA6F,IAdpG;KAAA,MAeK,IAAG,IAAC,aAAD,IAAkB,IAAC,aAAD,KAAmB,SAAxC;MACH,KAAK,kBADF;;IAEL,IAAwB,IAAC,QAAzB;MAAA,KAAK,OAAO,IAAC,SAAb;;WACA;EAnCQ;;;;GAR+C","file":"public/javascripts/app/lib/world/errors.js","sourcesContent":["Vector = require './vector'\n\nmodule.exports.ArgumentError = class ArgumentError extends Error\n  @className: 'ArgumentError'\n  constructor: (@message, @functionName, @argumentName, @intendedType, @actualValue, @numArguments, @hint) ->\n    super @message\n    @name = 'ArgumentError'\n    if Error.captureStackTrace?\n      Error.captureStackTrace @, @constructor\n\n  toString: ->\n    s = \"`#{@functionName}`\"\n    if @argumentName is 'return'\n      s += \"'s return value\"\n    else if @argumentName is '_excess'\n      s += \" takes only #{@numArguments} argument#{if @numArguments > 1 then 's' else ''}.\"\n    else if @argumentName\n      s += \"'s argument `#{@argumentName}`\"\n    else\n      s += ' takes no arguments.'\n\n    actualType = typeof @actualValue\n    if not @actualValue?\n      actualType = 'null'\n    else if _.isArray @actualValue\n      actualType = 'array'\n    typeMismatch = @intendedType and not @intendedType.match actualType\n    if typeMismatch\n      v = ''\n      if actualType is 'string'\n        v = \"\\\"#{@actualValue}\\\"\"\n      else if actualType is 'number'\n        if Math.round(@actualValue) is @actualValue then @actualValue else @actualValue.toFixed(2)\n      else if actualType is 'boolean'\n        v = \"#{@actualValue}\"\n      else if (@actualValue? and @actualValue.id and @actualValue.trackedPropertiesKeys)\n        # (Don't import Thang, but determine whether it is Thang.)\n        v = @actualValue.toString()\n      else if @actualValue instanceof Vector\n        v = @actualValue.toString()\n      showValue = showValue or @actualValue instanceof Vector\n      s += \" should have type `#{@intendedType}`, but got `#{actualType}`#{if v then \": `#{v}`\" else ''}.\"\n    else if @argumentName and @argumentName isnt '_excess'\n      s += ' has a problem.'\n    s += '\\n' + @message if @message\n    s\n"]}