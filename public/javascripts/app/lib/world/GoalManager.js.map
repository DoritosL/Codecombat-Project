{"version":3,"sources":["app/lib/world/GoalManager.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/lib/world/GoalManager.js","sourcesContent":["CocoClass = require 'core/CocoClass'\nutils = require 'core/utils'\n\nmodule.exports = class GoalManager extends CocoClass\n  # The Goal Manager is created both on the main thread and\n  # each time the world is generated. The one in world generation\n  # records which code and world related goals\n  # are completed or failed, and then the results are sent back\n  # and saved to the main thread instance.\n  # The main instance handles goals based on UI notifications,\n  # and keeps track of what the goals are at any given point.\n\n  # Goals can only have only one goal property. Otherwise who knows what will happen.\n  # If you want weird goals or hybrid goals, make a custom goal.\n\n  nextGoalID: 0\n  nicks: ['GoalManager']\n\n  constructor: (@world, @initialGoals, @team, options) ->\n    super()\n    @options = options or {}\n    @init()\n\n  init: ->\n    @goals = []\n    @goalStates = {} # goalID -> object (complete, frameCompleted)\n    @userCodeMap = {} # @userCodeMap.thangID.methodName.aether.raw = codeString\n    @thangTeams = {}\n    @initThangTeams()\n    @addGoal goal for goal in @initialGoals if @initialGoals\n\n  initThangTeams: ->\n    return unless @world\n    for thang in @world.thangs when thang.team and thang.isAttackable\n      continue unless thang.team\n      @thangTeams[thang.team] = [] unless @thangTeams[thang.team]\n      @thangTeams[thang.team].push(thang.id)\n\n  subscriptions:\n    'god:new-world-created': 'onNewWorldCreated'\n    'god:new-html-goal-states': 'onNewHTMLGoalStates'\n    'level:restarted': 'onLevelRestarted'\n\n  backgroundSubscriptions:\n    'world:thang-died': 'onThangDied'\n    'world:thang-touched-goal': 'onThangTouchedGoal'\n    'world:thang-left-map': 'onThangLeftMap'\n    'world:thang-collected-item': 'onThangCollectedItem'\n    'world:user-code-problem': 'onUserCodeProblem'\n    'world:lines-of-code-counted': 'onLinesOfCodeCounted'\n\n  onLevelRestarted: ->\n    @goals = []\n    @goalStates = {}\n    @userCodeMap = {}\n    @notifyGoalChanges()\n    @addGoal goal for goal in @initialGoals if @initialGoals\n\n  # INTERFACE AND LIFETIME OVERVIEW\n\n  # world generator gets current goals from the main instance\n  getGoals: -> @goals\n\n  # background instance created by world generator,\n  # gets these goals and code, and is told to be all ears during world gen\n  setGoals: (@goals) ->\n  setCode: (@userCodeMap) -> @updateCodeGoalStates()\n  worldGenerationWillBegin: ->\n    @initGoalStates()\n    @checkForInitialUserCodeProblems()\n\n  # World generator feeds world events to the goal manager to keep track\n  submitWorldGenerationEvent: (channel, event, frameNumber) ->\n    func = @backgroundSubscriptions[channel]\n    func = utils.normalizeFunc(func, @)\n    return unless func\n    func.call(@, event, frameNumber)\n\n  # after world generation, generated goal states\n  # are grabbed to send back to main instance\n  worldGenerationEnded: (finalFrame) -> @wrapUpGoalStates(finalFrame)\n  getGoalStates: -> @goalStates\n\n  # main instance gets them and updates their existing goal states,\n  # passes the word along\n  onNewWorldCreated: (e) ->\n    @world = e.world\n    @updateGoalStates(e.goalStates) if e.goalStates?\n\n  onNewHTMLGoalStates: (e) ->\n    @updateGoalStates(e.goalStates) if e.goalStates?\n\n  updateGoalStates: (newGoalStates) ->\n    for goalID, goalState of newGoalStates\n      continue unless @goalStates[goalID]?\n      @goalStates[goalID] = goalState\n    @notifyGoalChanges()\n\n  # IMPLEMENTATION DETAILS\n\n  addGoal: (goal) ->\n    goal = $.extend(true, {}, goal)\n    goal.id = @nextGoalID++ if not goal.id\n    return if @goalStates[goal.id]?\n    @goals.push(goal)\n    goal.isPositive = @goalIsPositive goal.id\n    @goalStates[goal.id] = {status: 'incomplete', keyFrame: 0, team: goal.team}\n    @notifyGoalChanges()\n    return unless goal.notificationGoal\n    f = (channel) => (event) => @onNote(channel, event)\n    channel = goal.notificationGoal.channel\n    @addNewSubscription(channel, f(channel))\n\n  notifyGoalChanges: ->\n    return if @options.headless\n    overallStatus = @checkOverallStatus()\n    event =\n      goalStates: @goalStates\n      goals: @goals\n      overallStatus: overallStatus\n      timedOut: @world? and (@world.totalFrames is @world.maxTotalFrames and overallStatus not in ['success', 'failure'])\n    Backbone.Mediator.publish('goal-manager:new-goal-states', event)\n\n  checkOverallStatus: (ignoreIncomplete=false) ->\n    overallStatus = null\n    goals = if @goalStates then _.values @goalStates else []\n    goals = (g for g in goals when not g.optional)\n    goals = (g for g in goals when g.team in [undefined, @team]) if @team\n    statuses = (goal.status for goal in goals)\n    overallStatus = 'success' if statuses.length > 0 and _.every(statuses, (s) -> s is 'success' or (ignoreIncomplete and s is null))\n    overallStatus = 'failure' if statuses.length > 0 and 'failure' in statuses\n    #console.log 'got overallStatus', overallStatus, 'from goals', goals, 'goalStates', @goalStates, 'statuses', statuses\n    overallStatus\n\n  # WORLD GOAL TRACKING\n\n  initGoalStates: ->\n    @goalStates = {}\n    return unless @goals\n    for goal in @goals\n      state = {\n        status: null # should eventually be either 'success', 'failure', or 'incomplete'\n        keyFrame: 0 # when it became a 'success' or 'failure'\n        team: goal.team\n        optional: goal.optional\n      }\n      @initGoalState(state, [goal.killThangs, goal.saveThangs], 'killed')\n      for getTo in goal.getAllToLocations ? []\n        @initGoalState(state, [getTo.getToLocation?.who, []], 'arrived')\n      for keepFrom in goal.keepAllFromLocations ? []\n        @initGoalState(state, [[], keepFrom.keepFromLocation?.who], 'arrived')\n      @initGoalState(state, [goal.getToLocations?.who, goal.keepFromLocations?.who], 'arrived')\n      @initGoalState(state, [goal.leaveOffSides?.who, goal.keepFromLeavingOffSides?.who], 'left')\n      @initGoalState(state, [goal.collectThangs?.targets, goal.keepFromCollectingThangs?.targets], 'collected')\n      @initGoalState(state, [goal.codeProblems], 'problems')\n      @initGoalState(state, [_.keys(goal.linesOfCode ? {})], 'lines')\n      @goalStates[goal.id] = state\n\n  checkForInitialUserCodeProblems: ->\n    # There might have been some user code problems reported before the goal manager started listening.\n    return unless @world\n    for thang in @world.thangs when thang.isProgrammable\n      for message, problem of thang.publishedUserCodeProblems\n        @onUserCodeProblem {thang: thang, problem: problem}, 0\n\n  onThangDied: (e, frameNumber) ->\n    for goal in @goals ? []\n      @checkKillThangs(goal.id, goal.killThangs, e.thang, frameNumber) if goal.killThangs?\n      @checkKillThangs(goal.id, goal.saveThangs, e.thang, frameNumber) if goal.saveThangs?\n\n  checkKillThangs: (goalID, targets, thang, frameNumber) ->\n    return unless thang.id in targets or thang.team in targets\n    @updateGoalState(goalID, thang.id, 'killed', frameNumber)\n\n  onThangTouchedGoal: (e, frameNumber) ->\n    for goal in @goals ? []\n      @checkArrived(goal.id, goal.getToLocations.who, goal.getToLocations.targets, e.actor, e.touched.id, frameNumber) if goal.getToLocations?\n      if goal.getAllToLocations?\n        for getTo in goal.getAllToLocations\n          @checkArrived(goal.id, getTo.getToLocation.who, getTo.getToLocation.targets, e.actor, e.touched.id, frameNumber)\n      @checkArrived(goal.id, goal.keepFromLocations.who, goal.keepFromLocations.targets, e.actor, e.touched.id, frameNumber) if goal.keepFromLocations?\n      if goal.keepAllFromLocations?\n        for keepFrom in goal.keepAllFromLocations\n          @checkArrived(goal.id, keepFrom.keepFromLocation.who , keepFrom.keepFromLocation.targets, e.actor, e.touched.id, frameNumber )\n\n  checkArrived: (goalID, who, targets, thang, touchedID, frameNumber) ->\n    return unless touchedID in targets\n    return unless thang.id in who or thang.team in who\n    @updateGoalState(goalID, thang.id, 'arrived', frameNumber)\n\n  onThangLeftMap: (e, frameNumber) ->\n    for goal in @goals ? []\n      @checkLeft(goal.id, goal.leaveOffSides.who, goal.leaveOffSides.sides, e.thang, e.side, frameNumber) if goal.leaveOffSides?\n      @checkLeft(goal.id, goal.keepFromLeavingOffSides.who, goal.keepFromLeavingOffSides.sides, e.thang, e.side, frameNumber) if goal.keepFromLeavingOffSides?\n\n  checkLeft: (goalID, who, sides, thang, side, frameNumber) ->\n    return if sides and side and not (side in sides)\n    return unless thang.id in who or thang.team in who\n    @updateGoalState(goalID, thang.id, 'left', frameNumber)\n\n  onThangCollectedItem: (e, frameNumber) ->\n    for goal in @goals ? []\n      @checkCollected(goal.id, goal.collectThangs.who, goal.collectThangs.targets, e.actor, e.item.id, frameNumber) if goal.collectThangs?\n      @checkCollected(goal.id, goal.keepFromCollectingThangs.who, goal.keepFromCollectingThangs.targets, e.actor, e.item.id, frameNumber) if goal.keepFromCollectingThangs?\n\n  checkCollected: (goalID, who, targets, thang, itemID, frameNumber) ->\n    return unless itemID in targets\n    return unless thang.id in who or thang.team in who\n    @updateGoalState(goalID, itemID, 'collected', frameNumber)\n\n  onUserCodeProblem: (e, frameNumber) ->\n    for goal in @goals ? [] when goal.codeProblems\n      @checkCodeProblem goal.id, goal.codeProblems, e.thang, frameNumber\n\n  checkCodeProblem: (goalID, who, thang, frameNumber) ->\n    return unless thang.id in who or thang.team in who\n    @updateGoalState goalID, thang.id, 'problems', frameNumber\n\n  onLinesOfCodeCounted: (e, frameNumber) ->\n    for goal in @goals ? [] when goal.linesOfCode\n      @checkLinesOfCode goal.id, goal.linesOfCode, e.thang, e.linesUsed, frameNumber\n\n  checkLinesOfCode: (goalID, who, thang, linesUsed, frameNumber) ->\n    return unless linesAllowed = who[thang.id] ? who[thang.team]\n    @updateGoalState goalID, thang.id, 'lines', frameNumber if linesUsed > linesAllowed\n\n  wrapUpGoalStates: (finalFrame) ->\n    for goalID, state of @goalStates\n      if state.status is null\n        if @goalIsPositive(goalID)\n          state.status = 'incomplete'\n        else\n          state.status = 'success'\n          state.keyFrame = 'end' # special case for objective UI to handle\n\n  # UI EVENT GOAL TRACKING\n\n  onNote: (channel, e) ->\n    # TODO for UI event related goals\n\n  # HELPER FUNCTIONS\n\n  # It's a pretty similar pattern for each of the above goals.\n  # Once you determine a thang has done the thing, you mark it done in the progress object.\n  initGoalState: (state, whos, progressObjectName) ->\n    # 'whos' is an array of goal 'who' values.\n    # This inits the progress object for the goal tracking.\n\n    arrays = (prop for prop in whos when prop?.length)\n    return unless arrays.length\n    state[progressObjectName] ?= {}\n    for array in arrays\n      for thang in array\n        if @thangTeams[thang]?\n          for t in @thangTeams[thang]\n            state[progressObjectName][t] = false\n        else\n          state[progressObjectName][thang] = false\n\n  getGoalState: (goalID) ->\n    @goalStates[goalID].status\n\n  setGoalState: (goalID, status) ->\n    state = @goalStates[goalID]\n    state.status = status\n    if overallStatus = @checkOverallStatus true\n      matchedGoals = (_.find(@goals, {id: goalID}) for goalID, goalState of @goalStates when goalState.status is overallStatus)\n      mostEagerGoal = _.min matchedGoals, 'worldEndsAfter'\n      victory = overallStatus is 'success'\n      tentative = overallStatus is 'success'\n      @world?.endWorld victory, mostEagerGoal.worldEndsAfter, tentative if mostEagerGoal isnt Infinity\n\n  updateGoalState: (goalID, thangID, progressObjectName, frameNumber) ->\n    # A thang has done something related to the goal!\n    # Mark it down and update the goal state.\n    goal = _.find @goals, {id: goalID}\n    state = @goalStates[goalID]\n    stateThangs = state[progressObjectName]\n    stateThangs[thangID] = true\n    success = @goalIsPositive goalID\n    if success\n      numNeeded = goal.howMany ? Math.max(1, _.size stateThangs)\n    else\n      # saveThangs: by default we would want to save all the Thangs, which means that we would want none of them to be 'done'\n      numNeeded = _.size(stateThangs) - Math.max((goal.howMany ? 1), _.size stateThangs) + 1\n    numDone = _.filter(stateThangs).length\n    #console.log 'needed', numNeeded, 'done', numDone, 'of total', _.size(stateThangs), 'with how many', goal.howMany, 'and stateThangs', stateThangs, 'for', goalID, thangID, 'on frame', frameNumber, 'all Thangs', _.keys(stateThangs), _.values(stateThangs)\n    return unless numDone >= numNeeded\n    return if state.status and not success  # already failed it; don't wipe keyframe\n    state.status = if success then 'success' else 'failure'\n    state.keyFrame = frameNumber\n    #console.log goalID, 'became', success, 'on frame', frameNumber, 'with overallStatus', @checkOverallStatus true\n    if overallStatus = @checkOverallStatus true\n      matchedGoals = (_.find(@goals, {id: goalID}) for goalID, goalState of @goalStates when goalState.status is overallStatus)\n      mostEagerGoal = _.min matchedGoals, 'worldEndsAfter'\n      victory = overallStatus is 'success'\n      tentative = overallStatus is 'success'\n      @world?.endWorld victory, mostEagerGoal.worldEndsAfter, tentative if mostEagerGoal isnt Infinity\n\n  goalIsPositive: (goalID) ->\n    # Positive goals are completed when all conditions are true (kill all these thangs)\n    # Negative goals fail when any are true (keep all these thangs from being killed)\n    goal = _.find(@goals, {id: goalID}) ? {}\n    return false for prop of goal when @positiveGoalMap[prop] is 0\n    true\n\n  positiveGoalMap:\n    killThangs: 1\n    saveThangs: 0\n    getToLocations: 1\n    getAllToLocations: 1\n    keepFromLocations: 0\n    keepAllFromLocations: 0\n    leaveOffSides: 1\n    keepFromLeavingOffSides: 0\n    collectThangs: 1\n    keepFromCollectingThangs: 0\n    linesOfCode: 0\n    codeProblems: 0\n\n  updateCodeGoalStates: ->\n    # TODO\n\n  # teardown\n\n  destroy: ->\n    super()\n"]}