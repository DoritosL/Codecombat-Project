{"version":3,"sources":["app/lib/world/world.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/lib/world/world.js","sourcesContent":["Vector = require './vector'\nRectangle = require './rectangle'\nEllipse = require './ellipse'\nLineSegment = require './line_segment'\nWorldFrame = require './world_frame'\nThang = require './thang'\nThangState = require './thang_state'\nRand = require './rand'\nWorldScriptNote = require './world_script_note'\n{now, consolidateThangs, typedArraySupport} = require './world_utils'\nComponent = require 'lib/world/component'\nSystem = require 'lib/world/system'\nPROGRESS_UPDATE_INTERVAL = 100\nDESERIALIZATION_INTERVAL = 10\nREAL_TIME_BUFFER_MIN = 2 * PROGRESS_UPDATE_INTERVAL\nREAL_TIME_BUFFER_MAX = 3 * PROGRESS_UPDATE_INTERVAL\nREAL_TIME_BUFFERED_WAIT_INTERVAL = 0.5 * PROGRESS_UPDATE_INTERVAL\nREAL_TIME_COUNTDOWN_DELAY = 3000  # match CountdownScreen\nITEM_ORIGINAL = '53e12043b82921000051cdf9'\nEXISTS_ORIGINAL = '524b4150ff92f1f4f8000024'\nCOUNTDOWN_LEVELS = ['sky-span']\n\nmodule.exports = class World\n  @className: 'World'\n  age: 0\n  ended: false\n  preloading: false  # Whether we are just preloading a world in case we soon cast it\n  debugging: false  # Whether we are just rerunning to debug a world we've already cast\n  headless: false  # Whether we are just simulating for goal states instead of all serialized results\n  framesSerializedSoFar: 0\n  framesClearedSoFar: 0\n  apiProperties: ['age', 'dt']\n  realTimeBufferMax: REAL_TIME_BUFFER_MAX / 1000\n  constructor: (@userCodeMap, classMap) ->\n    # classMap is needed for deserializing Worlds, Thangs, and other classes\n    @classMap = classMap ? {Vector: Vector, Rectangle: Rectangle, Thang: Thang, Ellipse: Ellipse, LineSegment: LineSegment}\n    Thang.resetThangIDs()\n\n    @userCodeMap ?= {}\n    @thangs = []\n    @thangMap = {}\n    @systems = []\n    @systemMap = {}\n    @scriptNotes = []\n    @rand = new Rand 0  # Existence System may change this seed\n    @frames = [new WorldFrame(@, 0)]\n\n  destroy: ->\n    @goalManager?.destroy()\n    thang.destroy() for thang in @thangs\n    @[key] = undefined for key of @\n    @destroyed = true\n    @destroy = ->\n\n  getFrame: (frameIndex) ->\n    # Optimize it a bit--assume we have all if @ended and are at the previous frame otherwise\n    frames = @frames\n    if @ended\n      frame = frames[frameIndex]\n    else if frameIndex\n      frame = frames[frameIndex - 1].getNextFrame()\n      frames.push frame\n    else\n      frame = frames[0]\n    @age = frameIndex * @dt\n    frame\n\n  getThangByID: (id) ->\n    @thangMap[id]\n\n  setThang: (thang) ->\n    thang.stateChanged = true\n    for old, i in @thangs\n      if old.id is thang.id\n        @thangs[i] = thang\n        break\n    @thangMap[thang.id] = thang\n\n  thangDialogueSounds: (startFrame=0) ->\n    return [] unless startFrame < @frames.length\n    [sounds, seen] = [[], {}]\n    for frameIndex in [startFrame ... @frames.length]\n      frame = @frames[frameIndex]\n      for thangID, state of frame.thangStateMap\n        continue unless state.thang.say and sayMessage = state.getStateForProp 'sayMessage'\n        soundKey = state.thang.spriteName + ':' + sayMessage\n        unless seen[soundKey]\n          sounds.push [state.thang.spriteName, sayMessage]\n          seen[soundKey] = true\n    sounds\n\n  setGoalManager: (@goalManager) ->\n\n  addError: (error) ->\n    (@runtimeErrors ?= []).push error\n    (@unhandledRuntimeErrors ?= []).push error\n\n  loadFrames: (loadedCallback, errorCallback, loadProgressCallback, preloadedCallback, skipDeferredLoading, loadUntilFrame) ->\n    return if @aborted\n    @totalFrames = 2 if @justBegin\n    console.log 'Warning: loadFrames called on empty World (no thangs).' unless @thangs.length\n    continueLaterFn = =>\n      @loadFrames(loadedCallback, errorCallback, loadProgressCallback, preloadedCallback, skipDeferredLoading, loadUntilFrame) unless @destroyed\n    if @realTime and not @countdownFinished\n      @realTimeSpeedFactor = 1\n      unless @showsCountdown\n        if @levelID in ['woodland-cleaver', 'village-guard', 'shield-rush']\n          @realTimeSpeedFactor = 2\n        else if @levelID in ['thornbush-farm', 'back-to-back', 'ogre-encampment', 'peasant-protection', 'munchkin-swarm', 'munchkin-harvest', 'swift-dagger', 'shrapnel', 'arcane-ally', 'touch-of-death', 'bonemender']\n          @realTimeSpeedFactor = 3\n      if @showsCountdown\n        return setTimeout @finishCountdown(continueLaterFn), REAL_TIME_COUNTDOWN_DELAY\n      else\n        @finishCountdown continueLaterFn\n    t1 = now()\n    @t0 ?= t1\n    @worldLoadStartTime ?= t1\n    @lastRealTimeUpdate ?= 0\n    frameToLoadUntil = if loadUntilFrame then loadUntilFrame + 1 else @totalFrames  # Might stop early if debugging.\n    i = @frames.length\n    while true\n      if @indefiniteLength\n        break if not @realTime # realtime has been stopped\n        break if @victory? # game won or lost  # TODO: give a couple seconds of buffer after victory is set instead of ending instantly\n      else\n        break if i >= frameToLoadUntil\n        break if i >= @totalFrames\n      return unless @shouldContinueLoading t1, loadProgressCallback, skipDeferredLoading, continueLaterFn\n      @adjustFlowSettings loadUntilFrame if @debugging\n      try\n        @getFrame(i)\n        ++i  # Increment this after we have succeeded in getting the frame, otherwise we'll have to do that frame again\n      catch error\n        @addError error  # Not an Aether.errors.UserCodeError; maybe we can't recover\n      unless @preloading or @debugging\n        for error in (@unhandledRuntimeErrors ? [])\n          return unless errorCallback error  # errorCallback tells us whether the error is recoverable\n        @unhandledRuntimeErrors = []\n    @finishLoadingFrames loadProgressCallback, loadedCallback, preloadedCallback\n\n  finishLoadingFrames: (loadProgressCallback, loadedCallback, preloadedCallback) ->\n    unless @debugging\n      @ended = true\n      system.finish @thangs for system in @systems\n    if @preloading\n      preloadedCallback()\n    else\n      loadProgressCallback? 1\n      loadedCallback()\n\n  finishCountdown: (continueLaterFn) -> =>\n    return if @destroyed\n    @countdownFinished = true\n    continueLaterFn()\n\n  shouldDelayRealTimeSimulation: (t) ->\n    return false unless @realTime\n    timeSinceStart = (t - @worldLoadStartTime) * @realTimeSpeedFactor\n    timeLoaded = @frames.length * @dt * 1000\n    timeBuffered = timeLoaded - timeSinceStart\n    if @indefiniteLength\n      return timeBuffered > 0\n    else\n      return timeBuffered > REAL_TIME_BUFFER_MAX * @realTimeSpeedFactor\n\n  shouldUpdateRealTimePlayback: (t) ->\n    return false unless @realTime\n    return false if @frames.length * @dt is @lastRealTimeUpdate\n    timeLoaded = @frames.length * @dt * 1000\n    timeSinceStart = (t - @worldLoadStartTime) * @realTimeSpeedFactor\n    remainingBuffer = @lastRealTimeUpdate * 1000 - timeSinceStart\n    if @indefiniteLength\n      return remainingBuffer <= 0\n    else\n      return remainingBuffer < REAL_TIME_BUFFER_MIN * @realTimeSpeedFactor\n\n  shouldContinueLoading: (t1, loadProgressCallback, skipDeferredLoading, continueLaterFn) ->\n    t2 = now()\n    chunkSize = @frames.length - @framesSerializedSoFar\n    simedTime = @frames.length / @frameRate\n\n    chunkTime = switch\n      when simedTime > 15 then 7\n      when simedTime > 10 then 5\n      when simedTime > 5 then 3\n      when simedTime > 2 then 1\n      else 0.5\n\n    bailoutTime = Math.max(2000*chunkTime, 10000)\n\n    dt = t2 - t1\n\n    if @realTime\n      shouldUpdateProgress = @shouldUpdateRealTimePlayback t2\n      shouldDelayRealTimeSimulation = not shouldUpdateProgress and @shouldDelayRealTimeSimulation t2\n    else\n      shouldUpdateProgress = (dt > PROGRESS_UPDATE_INTERVAL and (chunkSize / @frameRate >= chunkTime) or dt > bailoutTime)\n      shouldDelayRealTimeSimulation = false\n    return true unless shouldUpdateProgress or shouldDelayRealTimeSimulation\n    # Stop loading frames for now; continue in a moment.\n    if shouldUpdateProgress\n      @lastRealTimeUpdate = @frames.length * @dt if @realTime\n      #console.log 'we think it is now', (t2 - @worldLoadStartTime) / 1000, 'so delivering', @lastRealTimeUpdate\n      loadProgressCallback? @frames.length / @totalFrames unless @preloading\n    t1 = t2\n    if t2 - @t0 > 1000\n      console.log '  Loaded', @frames.length, 'of', @totalFrames, '(+' + (t2 - @t0).toFixed(0) + 'ms)' unless @realTime\n      @t0 = t2\n    if skipDeferredLoading\n      continueLaterFn()\n    else\n      delay = 0\n      if shouldDelayRealTimeSimulation\n        if @indefiniteLength\n          delay = 1000 / 30\n        else\n          delay = REAL_TIME_BUFFERED_WAIT_INTERVAL\n      setTimeout continueLaterFn, delay\n    false\n\n  adjustFlowSettings: (loadUntilFrame) ->\n    for thang in @thangs when thang.isProgrammable\n      userCode = @userCodeMap[thang.id] ? {}\n      for methodName, aether of userCode\n        framesToLoadFlowBefore = if methodName is 'plan' or methodName is 'makeBid' then 200 else 1  # Adjust if plan() is taking even longer\n        aether._shouldSkipFlow = @frames.length < loadUntilFrame - framesToLoadFlowBefore\n\n  finalizePreload: (loadedCallback) ->\n    @preloading = false\n    loadedCallback() if @ended\n\n  abort: ->\n    @aborted = true\n\n  addFlagEvent: (flagEvent) ->\n    @flagHistory.push flagEvent\n\n  addRealTimeInputEvent: (realTimeInputEvent) ->\n    @realTimeInputEvents.push realTimeInputEvent\n\n  loadFromLevel: (level, willSimulate=true) ->\n    @levelID = level.slug\n    @levelComponents = level.levelComponents\n    @thangTypes = level.thangTypes\n    @loadScriptsFromLevel level\n    @loadSystemsFromLevel level\n    @loadThangsFromLevel level, willSimulate\n    @showsCountdown = @levelID in COUNTDOWN_LEVELS or _.any(@thangs, (t) -> (t.programmableProperties and 'findFlags' in t.programmableProperties) or t.inventory?.flag)\n    @picoCTFProblem = level.picoCTFProblem if level.picoCTFProblem\n    if @picoCTFProblem?.instances and not @picoCTFProblem.flag_sha1\n      @picoCTFProblem = _.merge @picoCTFProblem, @picoCTFProblem.instances[0]\n    system.start @thangs for system in @systems\n\n  loadSystemsFromLevel: (level) ->\n    # Remove old Systems\n    @systems = []\n    @systemMap = {}\n\n    # Load new Systems\n    for levelSystem in level.systems\n      systemModel = levelSystem.model\n      config = levelSystem.config\n      systemClass = @loadClassFromCode systemModel.js, systemModel.name, 'system'\n      #console.log \"using db system class ---\\n\", systemClass, \"\\n--- from code ---n\", systemModel.js, \"\\n---\"\n      system = new systemClass @, config\n      @addSystems system\n    null\n\n  loadThangsFromLevel: (level, willSimulate) ->\n    # Remove old Thangs\n    @thangs = []\n    @thangMap = {}\n\n    # Load new Thangs\n    toAdd = (@loadThangFromLevel thangConfig, level.levelComponents, level.thangTypes for thangConfig in level.thangs ? [])\n    @extraneousThangs = consolidateThangs toAdd if willSimulate  # Combine walls, for example; serialize the leftovers later\n    @addThang thang for thang in toAdd\n    null\n\n  loadThangFromLevel: (thangConfig, levelComponents, thangTypes, equipBy=null) ->\n    components = []\n    for component, componentIndex in thangConfig.components\n      componentModel = _.find levelComponents, (c) ->\n        c.original is component.original and c.version.major is (component.majorVersion ? 0)\n      componentClass = @loadClassFromCode componentModel.js, componentModel.name, 'component'\n      components.push [componentClass, component.config]\n      if component.original is ITEM_ORIGINAL\n        isItem = true\n        component.config.ownerID = equipBy if equipBy\n      else if component.original is EXISTS_ORIGINAL\n        existsConfigIndex = componentIndex\n    if isItem and existsConfigIndex?\n      # For memory usage performance, make sure these don't get any tracked properties assigned.\n      components[existsConfigIndex][1] = {exists: false, stateless: true}\n    thangTypeOriginal = thangConfig.thangType\n    thangTypeModel = _.find thangTypes, (t) -> t.original is thangTypeOriginal\n    return console.error thangConfig.id ? equipBy, 'could not find ThangType for', thangTypeOriginal unless thangTypeModel\n    thangTypeName = thangTypeModel.name\n    thang = new Thang @, thangTypeName, thangConfig.id\n    try\n      thang.addComponents components...\n    catch e\n      console.error 'couldn\\'t load components for', thangTypeOriginal, thangConfig.id, 'because', e.toString(), e.stack\n    thang\n\n  addThang: (thang) ->\n    @thangs.unshift thang  # Interactions happen in reverse order of specification/drawing\n    @setThang thang\n    @updateThangState thang\n    thang.updateRegistration()\n    thang\n\n  loadScriptsFromLevel: (level) ->\n    @scriptNotes = []\n    @scripts = []\n    @addScripts level.scripts...\n\n  loadClassFromCode: (js, name, kind='component') ->\n    # Cache them based on source code so we don't have to worry about extra compilations\n    @componentCodeClassMap ?= {}\n    @systemCodeClassMap ?= {}\n    map = if kind is 'component' then @componentCodeClassMap else @systemCodeClassMap\n    c = map[js]\n    return c if c\n    try\n      c = map[js] = eval js\n    catch err\n      console.error \"Couldn't compile #{kind} code:\", err, \"\\n\", js\n      c = map[js] = {}\n    c.className = name\n    c\n\n  updateThangState: (thang) ->\n    @frames[@frames.length-1].thangStateMap[thang.id] = thang.getState()\n\n  size: ->\n    @calculateBounds() unless @width? and @height?\n    return [@width, @height] if @width? and @height?\n\n  getBounds: ->\n    @calculateBounds() unless @bounds?\n    return @bounds\n\n  calculateBounds: ->\n    bounds = {left: 0, top: 0, right: 0, bottom: 0}\n    hasLand = _.some @thangs, 'isLand'\n    for thang in @thangs when thang.isLand or (not hasLand and thang.rectangle)  # Look at Lands only\n      rect = thang.rectangle().axisAlignedBoundingBox()\n      bounds.left = Math.min(bounds.left, rect.x - rect.width / 2)\n      bounds.right = Math.max(bounds.right, rect.x + rect.width / 2)\n      bounds.bottom = Math.min(bounds.bottom, rect.y - rect.height / 2)\n      bounds.top = Math.max(bounds.top, rect.y + rect.height / 2)\n    @width = bounds.right - bounds.left\n    @height = bounds.top - bounds.bottom\n    @bounds = bounds\n    [@width, @height]\n\n  publishNote: (channel, event) ->\n    event ?= {}\n    channel = 'world:' + channel\n    for script in @scripts ? []\n      continue if script.channel isnt channel\n      scriptNote = new WorldScriptNote script, event\n      continue if scriptNote.invalid\n      @scriptNotes.push scriptNote\n    return unless @goalManager\n    @goalManager.submitWorldGenerationEvent(channel, event, @frames.length)\n\n  getGoalState: (goalID) ->\n    @goalManager.getGoalState(goalID)\n\n  setGoalState: (goalID, status) ->\n    @goalManager.setGoalState(goalID, status)\n\n  endWorld: (victory=false, delay=3, tentative=false) ->\n    @totalFrames = Math.min(@totalFrames, @frames.length + Math.floor(delay / @dt))  # end a few seconds later\n    @victory = victory  # TODO: should just make this signify the winning superteam\n    @victoryIsTentative = tentative\n    status = if @victory then 'won' else 'lost'\n    @publishNote status\n    console.log \"The world ended in #{status} on frame #{@totalFrames}\"\n\n  addSystems: (systems...) ->\n    @systems = @systems.concat systems\n    for system in systems\n      @systemMap[system.constructor.className] = system\n  getSystem: (systemClassName) ->\n    @systemMap?[systemClassName]\n\n  addScripts: (scripts...) ->\n    @scripts = (@scripts ? []).concat scripts\n\n  addTrackedProperties: (props...) ->\n    @trackedProperties = (@trackedProperties ? []).concat props\n\n  serialize: ->\n    # Code hotspot; optimize it\n    @freeMemoryBeforeFinalSerialization() if @ended\n    startFrame = @framesSerializedSoFar\n    endFrame = @frames.length\n    if @indefiniteLength\n      toClear = Math.max(@framesSerializedSoFar-10, 0)\n      for i in _.range(@framesClearedSoFar, toClear)\n        @frames[i] = null\n      @framesClearedSoFar = @framesSerializedSoFar\n    #console.log \"... world serializing frames from\", startFrame, \"to\", endFrame, \"of\", @totalFrames\n    [transferableObjects, nontransferableObjects] = [0, 0]\n    serializedFlagHistory = (_.omit(_.clone(flag), 'processed') for flag in @flagHistory)\n    o = {totalFrames: @totalFrames, maxTotalFrames: @maxTotalFrames, frameRate: @frameRate, dt: @dt, victory: @victory, userCodeMap: {}, trackedProperties: {}, flagHistory: serializedFlagHistory, difficulty: @difficulty, scores: @getScores(), randomSeed: @randomSeed, picoCTFFlag: @picoCTFFlag}\n    o.trackedProperties[prop] = @[prop] for prop in @trackedProperties or []\n\n    for thangID, methods of @userCodeMap\n      serializedMethods = o.userCodeMap[thangID] = {}\n      for methodName, method of methods\n        serializedMethods[methodName] = method.serialize?() ? method # serialize the method again if it has been deserialized\n\n    t0 = now()\n    o.trackedPropertiesThangIDs = []\n    o.trackedPropertiesPerThangIndices = []\n    o.trackedPropertiesPerThangKeys = []\n    o.trackedPropertiesPerThangTypes = []\n    trackedPropertiesPerThangValues = []  # We won't send these, just the offsets and the storage buffer\n    o.trackedPropertiesPerThangValuesOffsets = []  # Needed to reconstruct ArrayBufferViews on other end, since Firefox has bugs transfering those: https://bugzilla.mozilla.org/show_bug.cgi?id=841904 and https://bugzilla.mozilla.org/show_bug.cgi?id=861925  # Actually, as of January 2014, it should be fixed. So we could try to undo the workaround.\n    transferableStorageBytesNeeded = 0\n    nFrames = endFrame - startFrame\n    for thang in @thangs\n      # Don't serialize empty trackedProperties for stateless Thangs which haven't changed (like obstacles).\n      # Check both, since sometimes people mark stateless Thangs but then change them, and those should still be tracked, and the inverse doesn't work on the other end (we'll just think it doesn't exist then).\n      # If streaming the world, a thang marked stateless that actually change will get messed up. I think.\n      continue if thang.stateless and not _.some(thang.trackedPropertiesUsed, Boolean)\n      o.trackedPropertiesThangIDs.push thang.id\n      trackedPropertiesIndices = []\n      trackedPropertiesKeys = []\n      trackedPropertiesTypes = []\n      for used, propIndex in thang.trackedPropertiesUsed\n        continue unless used\n        trackedPropertiesIndices.push propIndex\n        trackedPropertiesKeys.push thang.trackedPropertiesKeys[propIndex]\n        trackedPropertiesTypes.push thang.trackedPropertiesTypes[propIndex]\n      o.trackedPropertiesPerThangIndices.push trackedPropertiesIndices\n      o.trackedPropertiesPerThangKeys.push trackedPropertiesKeys\n      o.trackedPropertiesPerThangTypes.push trackedPropertiesTypes\n      trackedPropertiesPerThangValues.push []\n      o.trackedPropertiesPerThangValuesOffsets.push []\n      for type in trackedPropertiesTypes\n        transferableStorageBytesNeeded += ThangState.transferableBytesNeededForType(type, nFrames)\n    if typedArraySupport\n      o.storageBuffer = new ArrayBuffer(transferableStorageBytesNeeded)\n    else\n      o.storageBuffer = []\n    storageBufferOffset = 0\n    for trackedPropertiesValues, thangIndex in trackedPropertiesPerThangValues\n      trackedPropertiesValuesOffsets = o.trackedPropertiesPerThangValuesOffsets[thangIndex]\n      for type, propIndex in o.trackedPropertiesPerThangTypes[thangIndex]\n        [storage, bytesStored] = ThangState.createArrayForType type, nFrames, o.storageBuffer, storageBufferOffset\n        trackedPropertiesValues.push storage\n        trackedPropertiesValuesOffsets.push storageBufferOffset\n        ++transferableObjects if bytesStored\n        ++nontransferableObjects unless bytesStored\n        if typedArraySupport\n          storageBufferOffset += bytesStored\n        else\n          # Instead of one big array with each storage as a view into it, they're all separate, so let's keep 'em around for flattening.\n          storageBufferOffset += storage.length\n          o.storageBuffer.push storage\n\n    o.specialKeysToValues = [null, Infinity, NaN]\n    # Whatever is in specialKeysToValues index 0 will be default for anything missing, so let's make sure it's null.\n    # Don't think we can include undefined or it'll be treated as a sparse array; haven't tested performance.\n    o.specialValuesToKeys = {}\n    for specialValue, i in o.specialKeysToValues\n      o.specialValuesToKeys[specialValue] = i\n\n    t1 = now()\n    o.frameHashes = []\n    for frameIndex in [startFrame ... endFrame]\n      o.frameHashes.push @frames[frameIndex].serialize(frameIndex - startFrame, o.trackedPropertiesThangIDs, o.trackedPropertiesPerThangIndices, o.trackedPropertiesPerThangTypes, trackedPropertiesPerThangValues, o.specialValuesToKeys, o.specialKeysToValues)\n    t2 = now()\n\n    unless typedArraySupport\n      flattened = []\n      for storage in o.storageBuffer\n        for value in storage\n          flattened.push value\n      o.storageBuffer = flattened\n\n    #console.log 'Allocating memory:', (t1 - t0).toFixed(0), 'ms; assigning values:', (t2 - t1).toFixed(0), 'ms, so', ((t2 - t1) / nFrames).toFixed(3), 'ms per frame for', nFrames, 'frames'\n    #console.log 'Got', transferableObjects, 'transferable objects and', nontransferableObjects, 'nontransferable; stored', transferableStorageBytesNeeded, 'bytes transferably'\n\n    o.thangs = (t.serialize() for t in @thangs.concat(@extraneousThangs ? []))\n    o.scriptNotes = (sn.serialize() for sn in @scriptNotes)\n    if o.scriptNotes.length > 200\n      console.log 'Whoa, serializing a lot of WorldScriptNotes here:', o.scriptNotes.length\n    @freeMemoryAfterEachSerialization() unless @ended\n    {serializedWorld: o, transferableObjects: [o.storageBuffer], startFrame: startFrame, endFrame: endFrame}\n\n  @deserialize: (o, classMap, oldSerializedWorldFrames, finishedWorldCallback, startFrame, endFrame, level, streamingWorld) ->\n    # Code hotspot; optimize it\n    #console.log 'Deserializing', o, 'length', JSON.stringify(o).length\n    #console.log JSON.stringify(o)\n    #console.log 'Got special keys and values:', o.specialValuesToKeys, o.specialKeysToValues\n    perf = {}\n    perf.t0 = now()\n    nFrames = endFrame - startFrame\n    if streamingWorld\n      w = streamingWorld\n      # Make sure we get any Aether updates from the new frames into the already-deserialized streaming world Aethers.\n      for thangID, methods of o.userCodeMap\n        for methodName, serializedAether of methods\n          for aetherStateKey in ['flow', 'metrics', 'style', 'problems']\n            w.userCodeMap[thangID] ?= {}\n            w.userCodeMap[thangID][methodName] ?= {}\n            w.userCodeMap[thangID][methodName][aetherStateKey] = serializedAether[aetherStateKey]\n    else\n      w = new World o.userCodeMap, classMap\n    [w.totalFrames, w.maxTotalFrames, w.frameRate, w.dt, w.scriptNotes, w.victory, w.flagHistory, w.difficulty, w.scores, w.randomSeed, w.picoCTFFlag] = [o.totalFrames, o.maxTotalFrames, o.frameRate, o.dt, o.scriptNotes ? [], o.victory, o.flagHistory, o.difficulty, o.scores, o.randomSeed, o.picoCTFFlag]\n    w[prop] = val for prop, val of o.trackedProperties\n\n    perf.t1 = now()\n    if w.thangs.length\n      for thangConfig in o.thangs\n        if thang = w.thangMap[thangConfig.id]\n          for prop, val of thangConfig.finalState\n            thang[prop] = val\n        else\n          w.thangs.push thang = Thang.deserialize(thangConfig, w, classMap, level.levelComponents)\n          w.setThang thang\n    else\n      w.thangs = (Thang.deserialize(thang, w, classMap, level.levelComponents) for thang in o.thangs)\n      w.setThang thang for thang in w.thangs\n    w.scriptNotes = (WorldScriptNote.deserialize(sn, w, classMap) for sn in o.scriptNotes)\n    perf.t2 = now()\n\n    o.trackedPropertiesThangs = (w.getThangByID thangID for thangID in o.trackedPropertiesThangIDs)\n    o.trackedPropertiesPerThangValues = []\n    for trackedPropertyTypes, thangIndex in o.trackedPropertiesPerThangTypes\n      o.trackedPropertiesPerThangValues.push (trackedPropertiesValues = [])\n      trackedPropertiesValuesOffsets = o.trackedPropertiesPerThangValuesOffsets[thangIndex]\n      for type, propIndex in trackedPropertyTypes\n        storage = ThangState.createArrayForType(type, nFrames, o.storageBuffer, trackedPropertiesValuesOffsets[propIndex])[0]\n        unless typedArraySupport\n          # This could be more efficient\n          i = trackedPropertiesValuesOffsets[propIndex]\n          storage = o.storageBuffer.slice i, i + storage.length\n        trackedPropertiesValues.push storage\n    perf.t3 = now()\n\n    perf.batches = 0\n    perf.framesCPUTime = 0\n    w.frames = [] unless streamingWorld\n    clearTimeout @deserializationTimeout if @deserializationTimeout\n\n    if w.indefiniteLength\n      clearTo = Math.max(w.frames.length - 100, 0)\n      if clearTo > w.framesClearedSoFar\n        for i in _.range(w.framesClearedSoFar, clearTo)\n          w.frames[i] = null\n      w.framesClearedSoFar = clearTo\n\n    @deserializationTimeout = _.delay @deserializeSomeFrames, 1, o, w, finishedWorldCallback, perf, startFrame, endFrame\n    w  # Return in-progress deserializing world\n\n  # Spread deserialization out across multiple calls so the interface stays responsive\n  @deserializeSomeFrames: (o, w, finishedWorldCallback, perf, startFrame, endFrame) =>\n    ++perf.batches\n    startTime = now()\n    for frameIndex in [w.frames.length ... endFrame]\n      w.frames.push WorldFrame.deserialize(w, frameIndex - startFrame, o.trackedPropertiesThangIDs, o.trackedPropertiesThangs, o.trackedPropertiesPerThangKeys, o.trackedPropertiesPerThangTypes, o.trackedPropertiesPerThangValues, o.specialKeysToValues, o.frameHashes[frameIndex - startFrame], w.dt * frameIndex)\n      elapsed = now() - startTime\n      if elapsed > DESERIALIZATION_INTERVAL and frameIndex < endFrame - 1\n        #console.log \"  Deserialization not finished, let's do it again soon. Have:\", w.frames.length, \", wanted from\", startFrame, \"to\", endFrame\n        perf.framesCPUTime += elapsed\n        @deserializationTimeout = _.delay @deserializeSomeFrames, 1, o, w, finishedWorldCallback, perf, startFrame, endFrame\n        return\n    @deserializationTimeout = null\n    perf.framesCPUTime += elapsed\n    @finishDeserializing w, finishedWorldCallback, perf, startFrame, endFrame\n\n  @finishDeserializing: (w, finishedWorldCallback, perf, startFrame, endFrame) ->\n    perf.t4 = now()\n    w.ended = true\n    nFrames = endFrame - startFrame\n    totalCPUTime = perf.t3 - perf.t0 + perf.framesCPUTime\n    #console.log 'Deserialization:', totalCPUTime.toFixed(0) + 'ms (' + (totalCPUTime / nFrames).toFixed(3) + 'ms per frame).', perf.batches, 'batches. Did', startFrame, 'to', endFrame, 'in', (perf.t4 - perf.t0).toFixed(0) + 'ms wall clock time.'\n    if false\n      console.log '  Deserializing--constructing new World:', (perf.t1 - perf.t0).toFixed(2) + 'ms'\n      console.log '  Deserializing--Thangs and ScriptNotes:', (perf.t2 - perf.t1).toFixed(2) + 'ms'\n      console.log '  Deserializing--reallocating memory:', (perf.t3 - perf.t2).toFixed(2) + 'ms'\n      console.log '  Deserializing--WorldFrames:', (perf.t4 - perf.t3).toFixed(2) + 'ms wall clock time,', (perf.framesCPUTime).toFixed(2) + 'ms CPU time'\n    finishedWorldCallback w\n\n  findFirstChangedFrame: (oldWorld) ->\n    return 0 unless oldWorld\n    for newFrame, i in @frames\n      oldFrame = oldWorld.frames[i]\n      break unless oldFrame and ((newFrame.hash is oldFrame.hash) or not newFrame.hash? or not oldFrame.hash?)  # undefined gets in there when streaming at the last frame of each batch for some reason\n    firstChangedFrame = i\n    if @frames.length is @totalFrames\n      if @frames[i]\n        console.log 'First changed frame is', firstChangedFrame, 'with hash', @frames[i].hash, 'compared to', oldWorld.frames[i]?.hash\n      else\n        console.log 'No frames were changed out of all', @frames.length\n    firstChangedFrame\n\n  freeMemoryBeforeFinalSerialization: ->\n    @levelComponents = null\n    @thangTypes = null\n\n  freeMemoryAfterEachSerialization: ->\n    @frames[i] = null for frame, i in @frames when i < @frames.length - 1\n\n  pointsForThang: (thangID, camera=null) ->\n    # Optimized\n    @pointsForThangCache ?= {}\n    cacheKey = thangID\n    allPoints = @pointsForThangCache[cacheKey]\n    unless allPoints\n      allPoints = []\n      lastFrameIndex = @frames.length - 1\n      lastPos = x: null, y: null\n      for frameIndex in [lastFrameIndex .. 0] by -1\n        frame = @frames[frameIndex]\n        continue unless frame # may have been evicted for game dev levels\n        if pos = frame.thangStateMap[thangID]?.getStateForProp 'pos'\n          pos = camera.worldToSurface {x: pos.x, y: pos.y} if camera  # without z\n          if not lastPos.x? or (Math.abs(lastPos.x - pos.x) + Math.abs(lastPos.y - pos.y)) > 1\n            lastPos = pos\n        allPoints.push lastPos.y, lastPos.x unless lastPos.y is 0 and lastPos.x is 0\n      allPoints.reverse()\n      @pointsForThangCache[cacheKey] = allPoints\n\n    return allPoints\n\n  actionsForThang: (thangID, keepIdle=false) ->\n    # Optimized\n    @actionsForThangCache ?= {}\n    cacheKey = thangID + '_' + Boolean(keepIdle)\n    cached = @actionsForThangCache[cacheKey]\n    return cached if cached\n    states = (frame.thangStateMap[thangID] for frame in @frames)\n    actions = []\n    lastAction = ''\n    for state, i in states\n      action = state?.getStateForProp 'action'\n      continue unless action and (action isnt lastAction or state.actionActivated)\n      continue unless state.action isnt 'idle' or keepIdle\n      actions.push {frame: i, pos: state.pos, name: action}\n      lastAction = action\n    @actionsForThangCache[cacheKey] = actions\n    return actions\n\n  getTeamColors: ->\n    teamConfigs = @teamConfigs or {}\n    colorConfigs = {}\n    colorConfigs[teamName] = config.color for teamName, config of teamConfigs\n    colorConfigs\n\n  teamForPlayer: (n) ->\n    playableTeams = @playableTeams ? ['humans']\n    playableTeams[n % playableTeams.length]\n\n  getScores: ->\n    time: @age\n    'damage-taken': @getSystem('Combat')?.damageTakenForTeam 'humans'\n    'damage-dealt': @getSystem('Combat')?.damageDealtForTeam 'humans'\n    'gold-collected': @getSystem('Inventory')?.teamGold.humans?.collected\n    'difficulty': @difficulty\n"]}