{"version":3,"sources":["app/lib/world/vector.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/lib/world/vector.js","sourcesContent":["# https://github.com/hornairs/blog/blob/master/assets/coffeescripts/flocking/vector.coffee\nclass Vector\n  @className: 'Vector'\n  # Class methods for nondestructively operating\n  for name in ['add', 'subtract', 'multiply', 'divide', 'limit', 'normalize', 'rotate']\n    do (name) ->\n      Vector[name] = (a, b, useZ) ->\n        a.copy()[name](b, useZ)\n  for name in ['magnitude', 'heading', 'distance', 'dot', 'equals', 'copy', 'distanceSquared']\n    do (name) ->\n      Vector[name] = (a, b, useZ) ->\n        a[name](b, useZ)\n\n  isVector: true\n  apiProperties: ['x', 'y', 'z', 'magnitude', 'heading', 'distance', 'dot', 'equals', 'copy', 'distanceSquared', 'add', 'subtract', 'multiply', 'divide', 'limit', 'normalize', 'rotate']\n\n  constructor: (x=0, y=0, z=0) ->\n    return new Vector x, y, z unless @ instanceof Vector\n    [@x, @y, @z] = [x, y, z]\n\n  copy: ->\n    new Vector(@x, @y, @z)\n\n\n  # Mutating methods:\n\n  normalize: (useZ) ->\n    m = @magnitude useZ\n    @divide m, useZ if m > 0\n    @\n\n  esper_normalize: (useZ) ->\n    @copy().normalize(useZ)\n\n  limit: (max) ->\n    if @magnitude() > max\n      @normalize()\n      @multiply(max)\n    else\n      @\n\n  esper_limit: (max) ->\n    @copy().limit(max)\n\n  subtract: (other, useZ) ->\n    @x -= other.x\n    @y -= other.y\n    @z -= other.z if useZ\n    @\n\n  esper_subtract: (other, useZ) ->\n    @copy().subtract(other, useZ)\n\n  add: (other, useZ) ->\n    @x += other.x\n    @y += other.y\n    @z += other.z if useZ\n    @\n\n  esper_add: (other, useZ) ->\n    @copy().add(other, useZ)\n\n  divide: (n, useZ) ->\n    [@x, @y] = [@x / n, @y / n]\n    @z = @z / n if useZ\n    @\n\n  esper_divide: (n, useZ) ->\n    @copy().divide(n, useZ)\n\n  multiply: (n, useZ) ->\n    [@x, @y] = [@x * n, @y * n]\n    @z = @z * n if useZ\n    @\n\n  esper_multiply: (n, useZ) ->\n    @copy().multiply(n, useZ)\n\n  # Rotate it around the origin\n  # If we ever want to make this also use z: https://en.wikipedia.org/wiki/Axes_conventions\n  rotate: (theta) ->\n    return @ unless theta\n    [@x, @y] = [Math.cos(theta) * @x - Math.sin(theta) * @y, Math.sin(theta) * @x + Math.cos(theta) * @y]\n    @\n\n  esper_rotate: (theta) ->\n    @copy().rotate(theta)\n\n  # Non-mutating methods:\n\n  magnitude: (useZ) ->\n    sum = @x * @x + @y * @y\n    sum += @z * @z if useZ\n    Math.sqrt sum\n\n  magnitudeSquared: (useZ) ->\n    sum = @x * @x + @y * @y\n    sum += @z * @z if useZ\n    sum\n\n  heading: ->\n    -1 * Math.atan2(-1 * @y, @x)\n\n  distance: (other, useZ) ->\n    dx = @x - other.x\n    dy = @y - other.y\n    sum = dx * dx + dy * dy\n    if useZ\n      dz = @z - other.z\n      sum += dz * dz\n    Math.sqrt sum\n\n  distanceSquared: (other, useZ) ->\n    dx = @x - other.x\n    dy = @y - other.y\n    sum = dx * dx + dy * dy\n    if useZ\n      dz = @z - other.z\n      sum += dz * dz\n    sum\n\n  dot: (other, useZ) ->\n    sum = @x * other.x + @y * other.y\n    sum += @z * other.z if useZ\n    sum\n\n  # Not the strict projection, the other isn't converted to a unit vector first.\n  projectOnto: (other, useZ) ->\n    other.copy().multiply(@dot(other, useZ), useZ)\n\n  isZero: (useZ) ->\n    result = @x is 0 and @y is 0\n    result = result and @z is 0 if useZ\n    result\n\n  equals: (other, useZ) ->\n    result = other and @x is other.x and @y is other.y\n    result = result and @z is other.z if useZ\n    result\n\n  invalid: () ->\n    return (@x is Infinity) || isNaN(@x) || @y is Infinity || isNaN(@y) || @z is Infinity || isNaN(@z)\n\n  toString: (precision = 2) ->\n    return \"{x: #{@x.toFixed(precision)}, y: #{@y.toFixed(precision)}, z: #{@z.toFixed(precision)}}\"\n\n\n  serialize: ->\n    {CN: @constructor.className, x: @x, y: @y, z: @z}\n\n  @deserialize: (o, world, classMap) ->\n    new Vector o.x, o.y, o.z\n\n  serializeForAether: -> @serialize()\n  @deserializeFromAether: (o) -> @deserialize o\n\nmodule.exports = Vector\n"]}