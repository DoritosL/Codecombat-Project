{"version":3,"sources":["app/lib/world/ellipse.coffee"],"names":[],"mappings":"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","file":"public/javascripts/app/lib/world/ellipse.js","sourcesContent":["Vector = require './vector'\nLineSegment = require './line_segment'\nRectangle = require './rectangle'\n\nclass Ellipse\n  @className: \"Ellipse\"\n\n  # TODO: add class methods for add, multiply, subtract, divide, rotate\n\n  isEllipse: true\n  apiProperties: ['x', 'y', 'width', 'height', 'rotation', 'distanceToPoint', 'distanceSquaredToPoint', 'distanceToRectangle', 'distanceSquaredToRectangle', 'distanceToEllipse', 'distanceSquaredToEllipse', 'distanceToShape', 'distanceSquaredToShape', 'containsPoint', 'intersectsLineSegment', 'intersectsRectangle', 'intersectsEllipse', 'getPos', 'containsPoint', 'copy']\n\n  constructor: (@x=0, @y=0, @width=0, @height=0, @rotation=0) ->\n\n  copy: ->\n    new Ellipse(@x, @y, @width, @height, @rotation)\n\n  getPos: ->\n    new Vector(@x, @y)\n\n  rectangle: ->\n    new Rectangle(@x, @y, @width, @height, @rotation)\n\n  axisAlignedBoundingBox: (rounded=true) ->\n    @rectangle().axisAlignedBoundingBox()\n\n  distanceToPoint: (p) ->\n    @rectangle().distanceToPoint p  # TODO: actually implement ellipse ellipse-point distance\n\n  distanceSquaredToPoint: (p) ->\n    # Doesn't handle rotation; just supposed to be faster than distanceToPoint.\n    @rectangle().distanceSquaredToPoint p  # TODO: actually implement ellipse-point distance\n\n  distanceToRectangle: (other) ->\n    Math.sqrt @distanceSquaredToRectangle other\n\n  distanceSquaredToRectangle: (other) ->\n    @rectangle().distanceSquaredToRectangle other  # TODO: actually implement ellipse-rectangle distance\n\n  distanceToEllipse: (ellipse) ->\n    Math.sqrt @distanceSquaredToEllipse ellipse\n\n  distanceSquaredToEllipse: (ellipse) ->\n    @rectangle().distanceSquaredToEllipse ellipse  # TODO: actually implement ellipse-ellipse distance\n\n  distanceToShape: (shape) ->\n    Math.sqrt @distanceSquaredToShape shape\n\n  distanceSquaredToShape: (shape) ->\n    if shape.isEllipse then @distanceSquaredToEllipse shape else @distanceSquaredToRectangle shape\n\n  containsPoint: (p, withRotation=true) ->\n    # \"ellipse space\" is the cartesian space\n    # where the ellipse becomes the unit\n    # circle centered at (0, 0)\n    [x, y] = [p.x - @x, p.y - @y] # translate point into ellipse space\n    if withRotation and @rotation # optionally rotate point into ellipse space\n      c = Math.cos(@rotation)\n      s = Math.sin(@rotation)\n      [x, y] = [x*c + y*s, y*c - x*s]\n    x = x / @width * 2 # scale point into ellipse space\n    y = y / @height * 2\n    x*x + y*y <= 1 #if the resulting point falls on/in the unit circle at 0, 0\n\n\n  intersectsLineSegment: (p1, p2) ->\n    [px1, py1, px2, py2] = [p1.x, p1.y, p2.x, p2.y]\n    m = (py1 - py2) / (px1 - px2)\n    m2 = Math.pow(m, 2)\n    c = py1 - (m * px1)\n    c2 = Math.pow(c, 2)\n    [a, b] = [@width / 2, @height / 2]\n    [h, k] = [@x, @y]\n    a2 = Math.pow(a, 2)\n    a4 = Math.pow(a, 2)\n    b2 = Math.pow(b, 2)\n    b4 = Math.pow(b, 4)\n    h2 = Math.pow(h, 2)\n    k2 = Math.pow(k, 2)\n    sint = Math.sin(@rotation)\n    sin2t = Math.sin(2 * @rotation)\n    cost = Math.cos(@rotation)\n    cos2t = Math.cos(2 * @rotation)\n    if (not isNaN m) and m != Infinity and m != -Infinity\n      numeratorLeft = (-a2 * c * m * cos2t) - (a2 * c * m) + (a2 * c * sin2t) - (a2 * h * m * sin2t) - (a2 * h * cos2t) + (a2 * h) + (a2 * k * m * cos2t) + (a2 * k * m) - (a2 * k * sin2t)\n      numeratorMiddle = Math.SQRT2 * Math.sqrt((a4 * b2 * m2 * cos2t) + (a4 * b2 * m2) - (2 * a4 * b2 * m * sin2t) - (a4 * b2 * cos2t) + (a4 * b2) - (a2 * b4 * m2 * cos2t) + (a2 * b4 * m2) + (2 * a2 * b4 * m * sin2t) + (a2 * b4 * cos2t) + (a2 * b4) - (2 * a2 * b2 * c2) - (4 * a2 * b2 * c * h * m) + (4 * a2 * b2 * c * k) - (2 * a2 * b2 * h2 * m2) + (4 * a2 * b2 * h * k * m) - (2 * a2 * b2 * k2))\n      numeratorRight = (b2 * c * m * cos2t) - (b2 * c * m) - (b2 * c * sin2t) + (b2 * h * m * sin2t) + (b2 * h * cos2t) + (b2 * h) - (b2 * k * m * cos2t) + (b2 * k * m) + (b2 * k * sin2t)\n      denominator = (a2 * m2 * cos2t) + (a2 * m2) - (2 * a2 * m * sin2t) - (a2 * cos2t) + a2 - (b2 * m2 * cos2t) + (b2 * m2) + (2 * b2 * m * sin2t) + (b2 * cos2t) + b2\n      solution1 = (-numeratorLeft - numeratorMiddle + numeratorRight) / denominator\n      solution2 = (-numeratorLeft + numeratorMiddle + numeratorRight) / denominator\n      if (not isNaN solution1) and (not isNaN solution2)\n        [littleX, bigX] = if px1 < px2 then [px1, px2] else [px2, px1]\n        if (littleX <= solution1 and bigX >= solution1) or (littleX <= solution2 and bigX >= solution2)\n          return true\n      if (not isNaN solution1) or (not isNaN solution2)\n        solution = if not isNaN solution1 then solution1 else solution2\n        [littleX, bigX] = if px1 < px2 then [px1, px2] else [px2, px1]\n        if littleX <= solution and bigX >= solution\n          return true\n      else\n        return false\n    else\n      x = px1\n      x2 = Math.pow(x, 2)\n      numeratorLeft = (-a2 * h * sin2t) + (a2 * k * cos2t) + (a2 * k) + (a2 * x * sin2t)\n      numeratorMiddle = Math.SQRT2 * Math.sqrt((a4 * b2 * cos2t) + (a4 * b2) - (a2 * b4 * cos2t) + (a2 * b4) - (2 * a2 * b2 * h2) + (4 * a2 * b2 * h * x) - (2 * a2 * b2 * x2))\n      numeratorRight = (b2 * h * sin2t) - (b2 * k * cos2t) + (b2 * k) - (b2 * x * sin2t)\n      denominator = (a2 * cos2t) + a2 - (b2 * cos2t) + b2\n      solution1 = (numeratorLeft - numeratorMiddle + numeratorRight) / denominator\n      solution2 = (numeratorLeft + numeratorMiddle + numeratorRight) / denominator\n      if (not isNaN solution1) or (not isNaN solution2)\n        solution = if not isNaN solution1 then solution1 else solution2\n        [littleY, bigY] = if py1 < py2 then [py1, py2] else [py2, py1]\n        if littleY <= solution and bigY >= solution\n          return true\n      else\n        return false\n    false\n\n  intersectsRectangle: (rectangle) ->\n    rectangle.intersectsEllipse @\n\n  intersectsEllipse: (ellipse) ->\n    @rectangle().intersectsEllipse ellipse  # TODO: actually implement ellipse-ellipse intersection\n    #return true if @containsPoint ellipse.getPos()\n\n  intersectsShape: (shape) ->\n    if shape.isEllipse then @intersectsEllipse shape else @intersectsRectangle shape\n\n  toString: ->\n    return \"{x: #{@x.toFixed(0)}, y: #{@y.toFixed(0)}, w: #{@width.toFixed(0)}, h: #{@height.toFixed(0)}, rot: #{@rotation.toFixed(3)}}\"\n\n  serialize: ->\n    {CN: @constructor.className, x: @x, y: @y, w: @width, h: @height, r: @rotation}\n\n  @deserialize: (o, world, classMap) ->\n    new Ellipse o.x, o.y, o.w, o.h, o.r\n\n  serializeForAether: -> @serialize()\n  @deserializeFromAether: (o) -> @deserialize o\n\nmodule.exports = Ellipse\n"]}